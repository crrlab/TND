/* soapC.cpp
   Generated by gSOAP 2.8.0 from SMC.h
   Copyright(C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.
   The generated code is released under one of the following licenses:
   GPL OR Genivia's license for commercial use.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.0 2011-03-24 16:03:36 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", NULL, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (!soap->header)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap, -1)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (!soap->fault)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (!soap->fault)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (!soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 1)
	{	if (!soap->fault->detail)
		{	soap->fault->detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
			soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
		}
		return (const char**)&soap->fault->detail->__any;
	}
	if (!soap->fault->SOAP_ENV__Detail)
	{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
	}
	return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if (soap->error || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{
	if (soap_peek_element(soap))
		return NULL;
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_server__setCameraURI:
		return soap_in_server__setCameraURI(soap, NULL, NULL, "server:setCameraURI");
	case SOAP_TYPE_server__setCameraURIResponse:
		return soap_in_server__setCameraURIResponse(soap, NULL, NULL, "server:setCameraURIResponse");
	case SOAP_TYPE_server__getinfo:
		return soap_in_server__getinfo(soap, NULL, NULL, "server:getinfo");
	case SOAP_TYPE_server__getinfoResponse:
		return soap_in_server__getinfoResponse(soap, NULL, NULL, "server:getinfoResponse");
	case SOAP_TYPE_agent__setCameraURI:
		return soap_in_agent__setCameraURI(soap, NULL, NULL, "agent:setCameraURI");
	case SOAP_TYPE_agent__setCameraURIResponse:
		return soap_in_agent__setCameraURIResponse(soap, NULL, NULL, "agent:setCameraURIResponse");
	case SOAP_TYPE_agent__setCameraInfo:
		return soap_in_agent__setCameraInfo(soap, NULL, NULL, "agent:setCameraInfo");
	case SOAP_TYPE_agent__setCameraInfoResponse:
		return soap_in_agent__setCameraInfoResponse(soap, NULL, NULL, "agent:setCameraInfoResponse");
	case SOAP_TYPE_agent__removeCamera:
		return soap_in_agent__removeCamera(soap, NULL, NULL, "agent:removeCamera");
	case SOAP_TYPE_agent__removeCameraResponse:
		return soap_in_agent__removeCameraResponse(soap, NULL, NULL, "agent:removeCameraResponse");
	case SOAP_TYPE_agent__addCamera:
		return soap_in_agent__addCamera(soap, NULL, NULL, "agent:addCamera");
	case SOAP_TYPE_agent__addCameraResponse:
		return soap_in_agent__addCameraResponse(soap, NULL, NULL, "agent:addCameraResponse");
	case SOAP_TYPE_agent__coreStation:
		return soap_in_agent__coreStation(soap, NULL, NULL, "agent:coreStation");
	case SOAP_TYPE_agent__coreStationResponse:
		return soap_in_agent__coreStationResponse(soap, NULL, NULL, "agent:coreStationResponse");
	case SOAP_TYPE_camera__info:
		return soap_in_camera__info(soap, NULL, NULL, "camera:info");
	case SOAP_TYPE_camera__uri:
		return soap_in_camera__uri(soap, NULL, NULL, "camera:uri");
	case SOAP_TYPE_PointerTocamera__uri:
		return soap_in_PointerTocamera__uri(soap, NULL, NULL, "camera:uri");
	case SOAP_TYPE_PointerTocamera__info:
		return soap_in_PointerTocamera__info(soap, NULL, NULL, "camera:info");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "server:setCameraURI"))
		{	*type = SOAP_TYPE_server__setCameraURI;
			return soap_in_server__setCameraURI(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "server:setCameraURIResponse"))
		{	*type = SOAP_TYPE_server__setCameraURIResponse;
			return soap_in_server__setCameraURIResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "server:getinfo"))
		{	*type = SOAP_TYPE_server__getinfo;
			return soap_in_server__getinfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "server:getinfoResponse"))
		{	*type = SOAP_TYPE_server__getinfoResponse;
			return soap_in_server__getinfoResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "agent:setCameraURI"))
		{	*type = SOAP_TYPE_agent__setCameraURI;
			return soap_in_agent__setCameraURI(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "agent:setCameraURIResponse"))
		{	*type = SOAP_TYPE_agent__setCameraURIResponse;
			return soap_in_agent__setCameraURIResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "agent:setCameraInfo"))
		{	*type = SOAP_TYPE_agent__setCameraInfo;
			return soap_in_agent__setCameraInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "agent:setCameraInfoResponse"))
		{	*type = SOAP_TYPE_agent__setCameraInfoResponse;
			return soap_in_agent__setCameraInfoResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "agent:removeCamera"))
		{	*type = SOAP_TYPE_agent__removeCamera;
			return soap_in_agent__removeCamera(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "agent:removeCameraResponse"))
		{	*type = SOAP_TYPE_agent__removeCameraResponse;
			return soap_in_agent__removeCameraResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "agent:addCamera"))
		{	*type = SOAP_TYPE_agent__addCamera;
			return soap_in_agent__addCamera(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "agent:addCameraResponse"))
		{	*type = SOAP_TYPE_agent__addCameraResponse;
			return soap_in_agent__addCameraResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "agent:coreStation"))
		{	*type = SOAP_TYPE_agent__coreStation;
			return soap_in_agent__coreStation(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "agent:coreStationResponse"))
		{	*type = SOAP_TYPE_agent__coreStationResponse;
			return soap_in_agent__coreStationResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "camera:info"))
		{	*type = SOAP_TYPE_camera__info;
			return soap_in_camera__info(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "camera:uri"))
		{	*type = SOAP_TYPE_camera__uri;
			return soap_in_camera__uri(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
	}
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_server__setCameraURI:
		return soap_out_server__setCameraURI(soap, tag, id, (const struct server__setCameraURI *)ptr, "server:setCameraURI");
	case SOAP_TYPE_server__setCameraURIResponse:
		return soap_out_server__setCameraURIResponse(soap, tag, id, (const struct server__setCameraURIResponse *)ptr, "server:setCameraURIResponse");
	case SOAP_TYPE_server__getinfo:
		return soap_out_server__getinfo(soap, tag, id, (const struct server__getinfo *)ptr, "server:getinfo");
	case SOAP_TYPE_server__getinfoResponse:
		return soap_out_server__getinfoResponse(soap, tag, id, (const struct server__getinfoResponse *)ptr, "server:getinfoResponse");
	case SOAP_TYPE_agent__setCameraURI:
		return soap_out_agent__setCameraURI(soap, tag, id, (const struct agent__setCameraURI *)ptr, "agent:setCameraURI");
	case SOAP_TYPE_agent__setCameraURIResponse:
		return soap_out_agent__setCameraURIResponse(soap, tag, id, (const struct agent__setCameraURIResponse *)ptr, "agent:setCameraURIResponse");
	case SOAP_TYPE_agent__setCameraInfo:
		return soap_out_agent__setCameraInfo(soap, tag, id, (const struct agent__setCameraInfo *)ptr, "agent:setCameraInfo");
	case SOAP_TYPE_agent__setCameraInfoResponse:
		return soap_out_agent__setCameraInfoResponse(soap, tag, id, (const struct agent__setCameraInfoResponse *)ptr, "agent:setCameraInfoResponse");
	case SOAP_TYPE_agent__removeCamera:
		return soap_out_agent__removeCamera(soap, tag, id, (const struct agent__removeCamera *)ptr, "agent:removeCamera");
	case SOAP_TYPE_agent__removeCameraResponse:
		return soap_out_agent__removeCameraResponse(soap, tag, id, (const struct agent__removeCameraResponse *)ptr, "agent:removeCameraResponse");
	case SOAP_TYPE_agent__addCamera:
		return soap_out_agent__addCamera(soap, tag, id, (const struct agent__addCamera *)ptr, "agent:addCamera");
	case SOAP_TYPE_agent__addCameraResponse:
		return soap_out_agent__addCameraResponse(soap, tag, id, (const struct agent__addCameraResponse *)ptr, "agent:addCameraResponse");
	case SOAP_TYPE_agent__coreStation:
		return soap_out_agent__coreStation(soap, tag, id, (const struct agent__coreStation *)ptr, "agent:coreStation");
	case SOAP_TYPE_agent__coreStationResponse:
		return soap_out_agent__coreStationResponse(soap, tag, id, (const struct agent__coreStationResponse *)ptr, "agent:coreStationResponse");
	case SOAP_TYPE_camera__info:
		return soap_out_camera__info(soap, tag, id, (const struct camera__info *)ptr, "camera:info");
	case SOAP_TYPE_camera__uri:
		return soap_out_camera__uri(soap, tag, id, (const struct camera__uri *)ptr, "camera:uri");
	case SOAP_TYPE_PointerTocamera__uri:
		return soap_out_PointerTocamera__uri(soap, tag, id, (struct camera__uri *const*)ptr, "camera:uri");
	case SOAP_TYPE_PointerTocamera__info:
		return soap_out_PointerTocamera__info(soap, tag, id, (struct camera__info *const*)ptr, "camera:info");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_server__setCameraURI:
		soap_serialize_server__setCameraURI(soap, (const struct server__setCameraURI *)ptr);
		break;
	case SOAP_TYPE_server__setCameraURIResponse:
		soap_serialize_server__setCameraURIResponse(soap, (const struct server__setCameraURIResponse *)ptr);
		break;
	case SOAP_TYPE_server__getinfo:
		soap_serialize_server__getinfo(soap, (const struct server__getinfo *)ptr);
		break;
	case SOAP_TYPE_server__getinfoResponse:
		soap_serialize_server__getinfoResponse(soap, (const struct server__getinfoResponse *)ptr);
		break;
	case SOAP_TYPE_agent__setCameraURI:
		soap_serialize_agent__setCameraURI(soap, (const struct agent__setCameraURI *)ptr);
		break;
	case SOAP_TYPE_agent__setCameraURIResponse:
		soap_serialize_agent__setCameraURIResponse(soap, (const struct agent__setCameraURIResponse *)ptr);
		break;
	case SOAP_TYPE_agent__setCameraInfo:
		soap_serialize_agent__setCameraInfo(soap, (const struct agent__setCameraInfo *)ptr);
		break;
	case SOAP_TYPE_agent__setCameraInfoResponse:
		soap_serialize_agent__setCameraInfoResponse(soap, (const struct agent__setCameraInfoResponse *)ptr);
		break;
	case SOAP_TYPE_agent__removeCamera:
		soap_serialize_agent__removeCamera(soap, (const struct agent__removeCamera *)ptr);
		break;
	case SOAP_TYPE_agent__removeCameraResponse:
		soap_serialize_agent__removeCameraResponse(soap, (const struct agent__removeCameraResponse *)ptr);
		break;
	case SOAP_TYPE_agent__addCamera:
		soap_serialize_agent__addCamera(soap, (const struct agent__addCamera *)ptr);
		break;
	case SOAP_TYPE_agent__addCameraResponse:
		soap_serialize_agent__addCameraResponse(soap, (const struct agent__addCameraResponse *)ptr);
		break;
	case SOAP_TYPE_agent__coreStation:
		soap_serialize_agent__coreStation(soap, (const struct agent__coreStation *)ptr);
		break;
	case SOAP_TYPE_agent__coreStationResponse:
		soap_serialize_agent__coreStationResponse(soap, (const struct agent__coreStationResponse *)ptr);
		break;
	case SOAP_TYPE_camera__info:
		soap_serialize_camera__info(soap, (const struct camera__info *)ptr);
		break;
	case SOAP_TYPE_camera__uri:
		soap_serialize_camera__uri(soap, (const struct camera__uri *)ptr);
		break;
	case SOAP_TYPE_PointerTocamera__uri:
		soap_serialize_PointerTocamera__uri(soap, (struct camera__uri *const*)ptr);
		break;
	case SOAP_TYPE_PointerTocamera__info:
		soap_serialize_PointerTocamera__info(soap, (struct camera__info *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{
	switch (t)
	{
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_camera__uri:
		return (void*)soap_instantiate_camera__uri(soap, -1, type, arrayType, n);
	case SOAP_TYPE_camera__info:
		return (void*)soap_instantiate_camera__info(soap, -1, type, arrayType, n);
	case SOAP_TYPE_agent__coreStationResponse:
		return (void*)soap_instantiate_agent__coreStationResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_agent__coreStation:
		return (void*)soap_instantiate_agent__coreStation(soap, -1, type, arrayType, n);
	case SOAP_TYPE_agent__addCameraResponse:
		return (void*)soap_instantiate_agent__addCameraResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_agent__addCamera:
		return (void*)soap_instantiate_agent__addCamera(soap, -1, type, arrayType, n);
	case SOAP_TYPE_agent__removeCameraResponse:
		return (void*)soap_instantiate_agent__removeCameraResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_agent__removeCamera:
		return (void*)soap_instantiate_agent__removeCamera(soap, -1, type, arrayType, n);
	case SOAP_TYPE_agent__setCameraInfoResponse:
		return (void*)soap_instantiate_agent__setCameraInfoResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_agent__setCameraInfo:
		return (void*)soap_instantiate_agent__setCameraInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_agent__setCameraURIResponse:
		return (void*)soap_instantiate_agent__setCameraURIResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_agent__setCameraURI:
		return (void*)soap_instantiate_agent__setCameraURI(soap, -1, type, arrayType, n);
	case SOAP_TYPE_server__getinfoResponse:
		return (void*)soap_instantiate_server__getinfoResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_server__getinfo:
		return (void*)soap_instantiate_server__getinfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_server__setCameraURIResponse:
		return (void*)soap_instantiate_server__setCameraURIResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_server__setCameraURI:
		return (void*)soap_instantiate_server__setCameraURI(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE_camera__uri:
		if (p->size < 0)
			SOAP_DELETE((struct camera__uri*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct camera__uri*)p->ptr);
		break;
	case SOAP_TYPE_camera__info:
		if (p->size < 0)
			SOAP_DELETE((struct camera__info*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct camera__info*)p->ptr);
		break;
	case SOAP_TYPE_agent__coreStationResponse:
		if (p->size < 0)
			SOAP_DELETE((struct agent__coreStationResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct agent__coreStationResponse*)p->ptr);
		break;
	case SOAP_TYPE_agent__coreStation:
		if (p->size < 0)
			SOAP_DELETE((struct agent__coreStation*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct agent__coreStation*)p->ptr);
		break;
	case SOAP_TYPE_agent__addCameraResponse:
		if (p->size < 0)
			SOAP_DELETE((struct agent__addCameraResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct agent__addCameraResponse*)p->ptr);
		break;
	case SOAP_TYPE_agent__addCamera:
		if (p->size < 0)
			SOAP_DELETE((struct agent__addCamera*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct agent__addCamera*)p->ptr);
		break;
	case SOAP_TYPE_agent__removeCameraResponse:
		if (p->size < 0)
			SOAP_DELETE((struct agent__removeCameraResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct agent__removeCameraResponse*)p->ptr);
		break;
	case SOAP_TYPE_agent__removeCamera:
		if (p->size < 0)
			SOAP_DELETE((struct agent__removeCamera*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct agent__removeCamera*)p->ptr);
		break;
	case SOAP_TYPE_agent__setCameraInfoResponse:
		if (p->size < 0)
			SOAP_DELETE((struct agent__setCameraInfoResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct agent__setCameraInfoResponse*)p->ptr);
		break;
	case SOAP_TYPE_agent__setCameraInfo:
		if (p->size < 0)
			SOAP_DELETE((struct agent__setCameraInfo*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct agent__setCameraInfo*)p->ptr);
		break;
	case SOAP_TYPE_agent__setCameraURIResponse:
		if (p->size < 0)
			SOAP_DELETE((struct agent__setCameraURIResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct agent__setCameraURIResponse*)p->ptr);
		break;
	case SOAP_TYPE_agent__setCameraURI:
		if (p->size < 0)
			SOAP_DELETE((struct agent__setCameraURI*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct agent__setCameraURI*)p->ptr);
		break;
	case SOAP_TYPE_server__getinfoResponse:
		if (p->size < 0)
			SOAP_DELETE((struct server__getinfoResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct server__getinfoResponse*)p->ptr);
		break;
	case SOAP_TYPE_server__getinfo:
		if (p->size < 0)
			SOAP_DELETE((struct server__getinfo*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct server__getinfo*)p->ptr);
		break;
	case SOAP_TYPE_server__setCameraURIResponse:
		if (p->size < 0)
			SOAP_DELETE((struct server__setCameraURIResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct server__setCameraURIResponse*)p->ptr);
		break;
	case SOAP_TYPE_server__setCameraURI:
		if (p->size < 0)
			SOAP_DELETE((struct server__setCameraURI*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct server__setCameraURI*)p->ptr);
		break;
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Header*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Header*)p->ptr);
		break;
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Code*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Code*)p->ptr);
		break;
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Detail*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Detail*)p->ptr);
		break;
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Reason*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Reason*)p->ptr);
		break;
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Fault*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Fault*)p->ptr);
		break;
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *p)
{	(void)soap; (void)p; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if ((t = soap_string_in(soap, 1, -1, -1)))
				s->assign(t);
			else
				return NULL;
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_std__string);
	if (soap_out_std__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::string);
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::string[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::string);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::string*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__type = 0;
	a->fault = NULL;
	a->__any = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag_fault = 1;
	size_t soap_flag___any = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default_server__setCameraURI(struct soap *soap, struct server__setCameraURI *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->_info = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_server__setCameraURI(struct soap *soap, const struct server__setCameraURI *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTocamera__uri(soap, &a->_info);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_server__setCameraURI(struct soap *soap, const char *tag, int id, const struct server__setCameraURI *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_server__setCameraURI), type))
		return soap->error;
	if (soap_out_PointerTocamera__uri(soap, "info", -1, &a->_info, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct server__setCameraURI * SOAP_FMAC4 soap_in_server__setCameraURI(struct soap *soap, const char *tag, struct server__setCameraURI *a, const char *type)
{
	size_t soap_flag__info = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct server__setCameraURI *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_server__setCameraURI, sizeof(struct server__setCameraURI), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_server__setCameraURI(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__info && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTocamera__uri(soap, NULL, &a->_info, "camera:uri"))
				{	soap_flag__info--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct server__setCameraURI *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_server__setCameraURI, 0, sizeof(struct server__setCameraURI), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_server__setCameraURI(struct soap *soap, const struct server__setCameraURI *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_server__setCameraURI);
	if (soap_out_server__setCameraURI(soap, tag?tag:"server:setCameraURI", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct server__setCameraURI * SOAP_FMAC4 soap_get_server__setCameraURI(struct soap *soap, struct server__setCameraURI *p, const char *tag, const char *type)
{
	if ((p = soap_in_server__setCameraURI(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct server__setCameraURI * SOAP_FMAC2 soap_instantiate_server__setCameraURI(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_server__setCameraURI(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_server__setCameraURI, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct server__setCameraURI);
		if (size)
			*size = sizeof(struct server__setCameraURI);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct server__setCameraURI[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct server__setCameraURI);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct server__setCameraURI*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_server__setCameraURI(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct server__setCameraURI %p -> %p\n", q, p));
	*(struct server__setCameraURI*)p = *(struct server__setCameraURI*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_server__setCameraURIResponse(struct soap *soap, struct server__setCameraURIResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->message);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_server__setCameraURIResponse(struct soap *soap, const struct server__setCameraURIResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->message);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_server__setCameraURIResponse(struct soap *soap, const char *tag, int id, const struct server__setCameraURIResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_server__setCameraURIResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "message", -1, &a->message, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct server__setCameraURIResponse * SOAP_FMAC4 soap_in_server__setCameraURIResponse(struct soap *soap, const char *tag, struct server__setCameraURIResponse *a, const char *type)
{
	size_t soap_flag_message = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct server__setCameraURIResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_server__setCameraURIResponse, sizeof(struct server__setCameraURIResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_server__setCameraURIResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_message && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "message", &a->message, "xsd:string"))
				{	soap_flag_message--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct server__setCameraURIResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_server__setCameraURIResponse, 0, sizeof(struct server__setCameraURIResponse), 0, soap_copy_server__setCameraURIResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_message > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_server__setCameraURIResponse(struct soap *soap, const struct server__setCameraURIResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_server__setCameraURIResponse);
	if (soap_out_server__setCameraURIResponse(soap, tag?tag:"server:setCameraURIResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct server__setCameraURIResponse * SOAP_FMAC4 soap_get_server__setCameraURIResponse(struct soap *soap, struct server__setCameraURIResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_server__setCameraURIResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct server__setCameraURIResponse * SOAP_FMAC2 soap_instantiate_server__setCameraURIResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_server__setCameraURIResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_server__setCameraURIResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct server__setCameraURIResponse);
		if (size)
			*size = sizeof(struct server__setCameraURIResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct server__setCameraURIResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct server__setCameraURIResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct server__setCameraURIResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_server__setCameraURIResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct server__setCameraURIResponse %p -> %p\n", q, p));
	*(struct server__setCameraURIResponse*)p = *(struct server__setCameraURIResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_server__getinfo(struct soap *soap, struct server__getinfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->command);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_server__getinfo(struct soap *soap, const struct server__getinfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->command);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_server__getinfo(struct soap *soap, const char *tag, int id, const struct server__getinfo *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_server__getinfo), type))
		return soap->error;
	if (soap_out_std__string(soap, "command", -1, &a->command, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct server__getinfo * SOAP_FMAC4 soap_in_server__getinfo(struct soap *soap, const char *tag, struct server__getinfo *a, const char *type)
{
	size_t soap_flag_command = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct server__getinfo *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_server__getinfo, sizeof(struct server__getinfo), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_server__getinfo(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_command && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "command", &a->command, "xsd:string"))
				{	soap_flag_command--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct server__getinfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_server__getinfo, 0, sizeof(struct server__getinfo), 0, soap_copy_server__getinfo);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_command > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_server__getinfo(struct soap *soap, const struct server__getinfo *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_server__getinfo);
	if (soap_out_server__getinfo(soap, tag?tag:"server:getinfo", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct server__getinfo * SOAP_FMAC4 soap_get_server__getinfo(struct soap *soap, struct server__getinfo *p, const char *tag, const char *type)
{
	if ((p = soap_in_server__getinfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct server__getinfo * SOAP_FMAC2 soap_instantiate_server__getinfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_server__getinfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_server__getinfo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct server__getinfo);
		if (size)
			*size = sizeof(struct server__getinfo);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct server__getinfo[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct server__getinfo);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct server__getinfo*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_server__getinfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct server__getinfo %p -> %p\n", q, p));
	*(struct server__getinfo*)p = *(struct server__getinfo*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_server__getinfoResponse(struct soap *soap, struct server__getinfoResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->message);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_server__getinfoResponse(struct soap *soap, const struct server__getinfoResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->message);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_server__getinfoResponse(struct soap *soap, const char *tag, int id, const struct server__getinfoResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_server__getinfoResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "message", -1, &a->message, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct server__getinfoResponse * SOAP_FMAC4 soap_in_server__getinfoResponse(struct soap *soap, const char *tag, struct server__getinfoResponse *a, const char *type)
{
	size_t soap_flag_message = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct server__getinfoResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_server__getinfoResponse, sizeof(struct server__getinfoResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_server__getinfoResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_message && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "message", &a->message, "xsd:string"))
				{	soap_flag_message--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct server__getinfoResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_server__getinfoResponse, 0, sizeof(struct server__getinfoResponse), 0, soap_copy_server__getinfoResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_message > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_server__getinfoResponse(struct soap *soap, const struct server__getinfoResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_server__getinfoResponse);
	if (soap_out_server__getinfoResponse(soap, tag?tag:"server:getinfoResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct server__getinfoResponse * SOAP_FMAC4 soap_get_server__getinfoResponse(struct soap *soap, struct server__getinfoResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_server__getinfoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct server__getinfoResponse * SOAP_FMAC2 soap_instantiate_server__getinfoResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_server__getinfoResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_server__getinfoResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct server__getinfoResponse);
		if (size)
			*size = sizeof(struct server__getinfoResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct server__getinfoResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct server__getinfoResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct server__getinfoResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_server__getinfoResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct server__getinfoResponse %p -> %p\n", q, p));
	*(struct server__getinfoResponse*)p = *(struct server__getinfoResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_agent__setCameraURI(struct soap *soap, struct agent__setCameraURI *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->_info = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_agent__setCameraURI(struct soap *soap, const struct agent__setCameraURI *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTocamera__uri(soap, &a->_info);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_agent__setCameraURI(struct soap *soap, const char *tag, int id, const struct agent__setCameraURI *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_agent__setCameraURI), type))
		return soap->error;
	if (soap_out_PointerTocamera__uri(soap, "info", -1, &a->_info, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct agent__setCameraURI * SOAP_FMAC4 soap_in_agent__setCameraURI(struct soap *soap, const char *tag, struct agent__setCameraURI *a, const char *type)
{
	size_t soap_flag__info = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct agent__setCameraURI *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_agent__setCameraURI, sizeof(struct agent__setCameraURI), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_agent__setCameraURI(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__info && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTocamera__uri(soap, NULL, &a->_info, "camera:uri"))
				{	soap_flag__info--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct agent__setCameraURI *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_agent__setCameraURI, 0, sizeof(struct agent__setCameraURI), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_agent__setCameraURI(struct soap *soap, const struct agent__setCameraURI *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_agent__setCameraURI);
	if (soap_out_agent__setCameraURI(soap, tag?tag:"agent:setCameraURI", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct agent__setCameraURI * SOAP_FMAC4 soap_get_agent__setCameraURI(struct soap *soap, struct agent__setCameraURI *p, const char *tag, const char *type)
{
	if ((p = soap_in_agent__setCameraURI(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct agent__setCameraURI * SOAP_FMAC2 soap_instantiate_agent__setCameraURI(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_agent__setCameraURI(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_agent__setCameraURI, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct agent__setCameraURI);
		if (size)
			*size = sizeof(struct agent__setCameraURI);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct agent__setCameraURI[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct agent__setCameraURI);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct agent__setCameraURI*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_agent__setCameraURI(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct agent__setCameraURI %p -> %p\n", q, p));
	*(struct agent__setCameraURI*)p = *(struct agent__setCameraURI*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_agent__setCameraURIResponse(struct soap *soap, struct agent__setCameraURIResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->message);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_agent__setCameraURIResponse(struct soap *soap, const struct agent__setCameraURIResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->message);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_agent__setCameraURIResponse(struct soap *soap, const char *tag, int id, const struct agent__setCameraURIResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_agent__setCameraURIResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "message", -1, &a->message, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct agent__setCameraURIResponse * SOAP_FMAC4 soap_in_agent__setCameraURIResponse(struct soap *soap, const char *tag, struct agent__setCameraURIResponse *a, const char *type)
{
	size_t soap_flag_message = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct agent__setCameraURIResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_agent__setCameraURIResponse, sizeof(struct agent__setCameraURIResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_agent__setCameraURIResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_message && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "message", &a->message, "xsd:string"))
				{	soap_flag_message--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct agent__setCameraURIResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_agent__setCameraURIResponse, 0, sizeof(struct agent__setCameraURIResponse), 0, soap_copy_agent__setCameraURIResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_message > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_agent__setCameraURIResponse(struct soap *soap, const struct agent__setCameraURIResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_agent__setCameraURIResponse);
	if (soap_out_agent__setCameraURIResponse(soap, tag?tag:"agent:setCameraURIResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct agent__setCameraURIResponse * SOAP_FMAC4 soap_get_agent__setCameraURIResponse(struct soap *soap, struct agent__setCameraURIResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_agent__setCameraURIResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct agent__setCameraURIResponse * SOAP_FMAC2 soap_instantiate_agent__setCameraURIResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_agent__setCameraURIResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_agent__setCameraURIResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct agent__setCameraURIResponse);
		if (size)
			*size = sizeof(struct agent__setCameraURIResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct agent__setCameraURIResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct agent__setCameraURIResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct agent__setCameraURIResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_agent__setCameraURIResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct agent__setCameraURIResponse %p -> %p\n", q, p));
	*(struct agent__setCameraURIResponse*)p = *(struct agent__setCameraURIResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_agent__setCameraInfo(struct soap *soap, struct agent__setCameraInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->_info = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_agent__setCameraInfo(struct soap *soap, const struct agent__setCameraInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTocamera__info(soap, &a->_info);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_agent__setCameraInfo(struct soap *soap, const char *tag, int id, const struct agent__setCameraInfo *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_agent__setCameraInfo), type))
		return soap->error;
	if (soap_out_PointerTocamera__info(soap, "info", -1, &a->_info, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct agent__setCameraInfo * SOAP_FMAC4 soap_in_agent__setCameraInfo(struct soap *soap, const char *tag, struct agent__setCameraInfo *a, const char *type)
{
	size_t soap_flag__info = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct agent__setCameraInfo *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_agent__setCameraInfo, sizeof(struct agent__setCameraInfo), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_agent__setCameraInfo(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__info && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTocamera__info(soap, NULL, &a->_info, "camera:info"))
				{	soap_flag__info--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct agent__setCameraInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_agent__setCameraInfo, 0, sizeof(struct agent__setCameraInfo), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_agent__setCameraInfo(struct soap *soap, const struct agent__setCameraInfo *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_agent__setCameraInfo);
	if (soap_out_agent__setCameraInfo(soap, tag?tag:"agent:setCameraInfo", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct agent__setCameraInfo * SOAP_FMAC4 soap_get_agent__setCameraInfo(struct soap *soap, struct agent__setCameraInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in_agent__setCameraInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct agent__setCameraInfo * SOAP_FMAC2 soap_instantiate_agent__setCameraInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_agent__setCameraInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_agent__setCameraInfo, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct agent__setCameraInfo);
		if (size)
			*size = sizeof(struct agent__setCameraInfo);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct agent__setCameraInfo[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct agent__setCameraInfo);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct agent__setCameraInfo*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_agent__setCameraInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct agent__setCameraInfo %p -> %p\n", q, p));
	*(struct agent__setCameraInfo*)p = *(struct agent__setCameraInfo*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_agent__setCameraInfoResponse(struct soap *soap, struct agent__setCameraInfoResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->message);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_agent__setCameraInfoResponse(struct soap *soap, const struct agent__setCameraInfoResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->message);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_agent__setCameraInfoResponse(struct soap *soap, const char *tag, int id, const struct agent__setCameraInfoResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_agent__setCameraInfoResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "message", -1, &a->message, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct agent__setCameraInfoResponse * SOAP_FMAC4 soap_in_agent__setCameraInfoResponse(struct soap *soap, const char *tag, struct agent__setCameraInfoResponse *a, const char *type)
{
	size_t soap_flag_message = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct agent__setCameraInfoResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_agent__setCameraInfoResponse, sizeof(struct agent__setCameraInfoResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_agent__setCameraInfoResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_message && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "message", &a->message, "xsd:string"))
				{	soap_flag_message--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct agent__setCameraInfoResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_agent__setCameraInfoResponse, 0, sizeof(struct agent__setCameraInfoResponse), 0, soap_copy_agent__setCameraInfoResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_message > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_agent__setCameraInfoResponse(struct soap *soap, const struct agent__setCameraInfoResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_agent__setCameraInfoResponse);
	if (soap_out_agent__setCameraInfoResponse(soap, tag?tag:"agent:setCameraInfoResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct agent__setCameraInfoResponse * SOAP_FMAC4 soap_get_agent__setCameraInfoResponse(struct soap *soap, struct agent__setCameraInfoResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_agent__setCameraInfoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct agent__setCameraInfoResponse * SOAP_FMAC2 soap_instantiate_agent__setCameraInfoResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_agent__setCameraInfoResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_agent__setCameraInfoResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct agent__setCameraInfoResponse);
		if (size)
			*size = sizeof(struct agent__setCameraInfoResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct agent__setCameraInfoResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct agent__setCameraInfoResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct agent__setCameraInfoResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_agent__setCameraInfoResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct agent__setCameraInfoResponse %p -> %p\n", q, p));
	*(struct agent__setCameraInfoResponse*)p = *(struct agent__setCameraInfoResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_agent__removeCamera(struct soap *soap, struct agent__removeCamera *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->uuid);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_agent__removeCamera(struct soap *soap, const struct agent__removeCamera *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->uuid);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_agent__removeCamera(struct soap *soap, const char *tag, int id, const struct agent__removeCamera *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_agent__removeCamera), type))
		return soap->error;
	if (soap_out_std__string(soap, "uuid", -1, &a->uuid, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct agent__removeCamera * SOAP_FMAC4 soap_in_agent__removeCamera(struct soap *soap, const char *tag, struct agent__removeCamera *a, const char *type)
{
	size_t soap_flag_uuid = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct agent__removeCamera *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_agent__removeCamera, sizeof(struct agent__removeCamera), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_agent__removeCamera(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_uuid && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "uuid", &a->uuid, "xsd:string"))
				{	soap_flag_uuid--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct agent__removeCamera *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_agent__removeCamera, 0, sizeof(struct agent__removeCamera), 0, soap_copy_agent__removeCamera);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_uuid > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_agent__removeCamera(struct soap *soap, const struct agent__removeCamera *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_agent__removeCamera);
	if (soap_out_agent__removeCamera(soap, tag?tag:"agent:removeCamera", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct agent__removeCamera * SOAP_FMAC4 soap_get_agent__removeCamera(struct soap *soap, struct agent__removeCamera *p, const char *tag, const char *type)
{
	if ((p = soap_in_agent__removeCamera(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct agent__removeCamera * SOAP_FMAC2 soap_instantiate_agent__removeCamera(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_agent__removeCamera(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_agent__removeCamera, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct agent__removeCamera);
		if (size)
			*size = sizeof(struct agent__removeCamera);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct agent__removeCamera[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct agent__removeCamera);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct agent__removeCamera*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_agent__removeCamera(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct agent__removeCamera %p -> %p\n", q, p));
	*(struct agent__removeCamera*)p = *(struct agent__removeCamera*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_agent__removeCameraResponse(struct soap *soap, struct agent__removeCameraResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->message);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_agent__removeCameraResponse(struct soap *soap, const struct agent__removeCameraResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->message);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_agent__removeCameraResponse(struct soap *soap, const char *tag, int id, const struct agent__removeCameraResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_agent__removeCameraResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "message", -1, &a->message, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct agent__removeCameraResponse * SOAP_FMAC4 soap_in_agent__removeCameraResponse(struct soap *soap, const char *tag, struct agent__removeCameraResponse *a, const char *type)
{
	size_t soap_flag_message = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct agent__removeCameraResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_agent__removeCameraResponse, sizeof(struct agent__removeCameraResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_agent__removeCameraResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_message && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "message", &a->message, "xsd:string"))
				{	soap_flag_message--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct agent__removeCameraResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_agent__removeCameraResponse, 0, sizeof(struct agent__removeCameraResponse), 0, soap_copy_agent__removeCameraResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_message > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_agent__removeCameraResponse(struct soap *soap, const struct agent__removeCameraResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_agent__removeCameraResponse);
	if (soap_out_agent__removeCameraResponse(soap, tag?tag:"agent:removeCameraResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct agent__removeCameraResponse * SOAP_FMAC4 soap_get_agent__removeCameraResponse(struct soap *soap, struct agent__removeCameraResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_agent__removeCameraResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct agent__removeCameraResponse * SOAP_FMAC2 soap_instantiate_agent__removeCameraResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_agent__removeCameraResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_agent__removeCameraResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct agent__removeCameraResponse);
		if (size)
			*size = sizeof(struct agent__removeCameraResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct agent__removeCameraResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct agent__removeCameraResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct agent__removeCameraResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_agent__removeCameraResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct agent__removeCameraResponse %p -> %p\n", q, p));
	*(struct agent__removeCameraResponse*)p = *(struct agent__removeCameraResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_agent__addCamera(struct soap *soap, struct agent__addCamera *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->uuid);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_agent__addCamera(struct soap *soap, const struct agent__addCamera *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->uuid);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_agent__addCamera(struct soap *soap, const char *tag, int id, const struct agent__addCamera *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_agent__addCamera), type))
		return soap->error;
	if (soap_out_std__string(soap, "uuid", -1, &a->uuid, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct agent__addCamera * SOAP_FMAC4 soap_in_agent__addCamera(struct soap *soap, const char *tag, struct agent__addCamera *a, const char *type)
{
	size_t soap_flag_uuid = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct agent__addCamera *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_agent__addCamera, sizeof(struct agent__addCamera), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_agent__addCamera(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_uuid && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "uuid", &a->uuid, "xsd:string"))
				{	soap_flag_uuid--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct agent__addCamera *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_agent__addCamera, 0, sizeof(struct agent__addCamera), 0, soap_copy_agent__addCamera);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_uuid > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_agent__addCamera(struct soap *soap, const struct agent__addCamera *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_agent__addCamera);
	if (soap_out_agent__addCamera(soap, tag?tag:"agent:addCamera", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct agent__addCamera * SOAP_FMAC4 soap_get_agent__addCamera(struct soap *soap, struct agent__addCamera *p, const char *tag, const char *type)
{
	if ((p = soap_in_agent__addCamera(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct agent__addCamera * SOAP_FMAC2 soap_instantiate_agent__addCamera(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_agent__addCamera(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_agent__addCamera, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct agent__addCamera);
		if (size)
			*size = sizeof(struct agent__addCamera);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct agent__addCamera[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct agent__addCamera);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct agent__addCamera*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_agent__addCamera(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct agent__addCamera %p -> %p\n", q, p));
	*(struct agent__addCamera*)p = *(struct agent__addCamera*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_agent__addCameraResponse(struct soap *soap, struct agent__addCameraResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->message);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_agent__addCameraResponse(struct soap *soap, const struct agent__addCameraResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->message);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_agent__addCameraResponse(struct soap *soap, const char *tag, int id, const struct agent__addCameraResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_agent__addCameraResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "message", -1, &a->message, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct agent__addCameraResponse * SOAP_FMAC4 soap_in_agent__addCameraResponse(struct soap *soap, const char *tag, struct agent__addCameraResponse *a, const char *type)
{
	size_t soap_flag_message = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct agent__addCameraResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_agent__addCameraResponse, sizeof(struct agent__addCameraResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_agent__addCameraResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_message && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "message", &a->message, "xsd:string"))
				{	soap_flag_message--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct agent__addCameraResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_agent__addCameraResponse, 0, sizeof(struct agent__addCameraResponse), 0, soap_copy_agent__addCameraResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_message > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_agent__addCameraResponse(struct soap *soap, const struct agent__addCameraResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_agent__addCameraResponse);
	if (soap_out_agent__addCameraResponse(soap, tag?tag:"agent:addCameraResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct agent__addCameraResponse * SOAP_FMAC4 soap_get_agent__addCameraResponse(struct soap *soap, struct agent__addCameraResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_agent__addCameraResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct agent__addCameraResponse * SOAP_FMAC2 soap_instantiate_agent__addCameraResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_agent__addCameraResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_agent__addCameraResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct agent__addCameraResponse);
		if (size)
			*size = sizeof(struct agent__addCameraResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct agent__addCameraResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct agent__addCameraResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct agent__addCameraResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_agent__addCameraResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct agent__addCameraResponse %p -> %p\n", q, p));
	*(struct agent__addCameraResponse*)p = *(struct agent__addCameraResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_agent__coreStation(struct soap *soap, struct agent__coreStation *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->command);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_agent__coreStation(struct soap *soap, const struct agent__coreStation *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->command);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_agent__coreStation(struct soap *soap, const char *tag, int id, const struct agent__coreStation *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_agent__coreStation), type))
		return soap->error;
	if (soap_out_std__string(soap, "command", -1, &a->command, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct agent__coreStation * SOAP_FMAC4 soap_in_agent__coreStation(struct soap *soap, const char *tag, struct agent__coreStation *a, const char *type)
{
	size_t soap_flag_command = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct agent__coreStation *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_agent__coreStation, sizeof(struct agent__coreStation), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_agent__coreStation(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_command && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "command", &a->command, "xsd:string"))
				{	soap_flag_command--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct agent__coreStation *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_agent__coreStation, 0, sizeof(struct agent__coreStation), 0, soap_copy_agent__coreStation);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_command > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_agent__coreStation(struct soap *soap, const struct agent__coreStation *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_agent__coreStation);
	if (soap_out_agent__coreStation(soap, tag?tag:"agent:coreStation", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct agent__coreStation * SOAP_FMAC4 soap_get_agent__coreStation(struct soap *soap, struct agent__coreStation *p, const char *tag, const char *type)
{
	if ((p = soap_in_agent__coreStation(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct agent__coreStation * SOAP_FMAC2 soap_instantiate_agent__coreStation(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_agent__coreStation(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_agent__coreStation, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct agent__coreStation);
		if (size)
			*size = sizeof(struct agent__coreStation);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct agent__coreStation[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct agent__coreStation);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct agent__coreStation*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_agent__coreStation(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct agent__coreStation %p -> %p\n", q, p));
	*(struct agent__coreStation*)p = *(struct agent__coreStation*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_agent__coreStationResponse(struct soap *soap, struct agent__coreStationResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->message);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_agent__coreStationResponse(struct soap *soap, const struct agent__coreStationResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->message);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_agent__coreStationResponse(struct soap *soap, const char *tag, int id, const struct agent__coreStationResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_agent__coreStationResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "message", -1, &a->message, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct agent__coreStationResponse * SOAP_FMAC4 soap_in_agent__coreStationResponse(struct soap *soap, const char *tag, struct agent__coreStationResponse *a, const char *type)
{
	size_t soap_flag_message = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct agent__coreStationResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_agent__coreStationResponse, sizeof(struct agent__coreStationResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_agent__coreStationResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_message && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "message", &a->message, "xsd:string"))
				{	soap_flag_message--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct agent__coreStationResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_agent__coreStationResponse, 0, sizeof(struct agent__coreStationResponse), 0, soap_copy_agent__coreStationResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_message > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_agent__coreStationResponse(struct soap *soap, const struct agent__coreStationResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_agent__coreStationResponse);
	if (soap_out_agent__coreStationResponse(soap, tag?tag:"agent:coreStationResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct agent__coreStationResponse * SOAP_FMAC4 soap_get_agent__coreStationResponse(struct soap *soap, struct agent__coreStationResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_agent__coreStationResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct agent__coreStationResponse * SOAP_FMAC2 soap_instantiate_agent__coreStationResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_agent__coreStationResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_agent__coreStationResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct agent__coreStationResponse);
		if (size)
			*size = sizeof(struct agent__coreStationResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct agent__coreStationResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct agent__coreStationResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct agent__coreStationResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_agent__coreStationResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct agent__coreStationResponse %p -> %p\n", q, p));
	*(struct agent__coreStationResponse*)p = *(struct agent__coreStationResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_camera__info(struct soap *soap, struct camera__info *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->Info_type);
	soap_default_std__string(soap, &a->Info);
	soap_default_std__string(soap, &a->uuid);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_camera__info(struct soap *soap, const struct camera__info *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->Info_type);
	soap_serialize_std__string(soap, &a->Info);
	soap_serialize_std__string(soap, &a->uuid);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_camera__info(struct soap *soap, const char *tag, int id, const struct camera__info *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_camera__info), type))
		return soap->error;
	if (soap_out_std__string(soap, "Info-type", -1, &a->Info_type, ""))
		return soap->error;
	if (soap_out_std__string(soap, "Info", -1, &a->Info, ""))
		return soap->error;
	if (soap_out_std__string(soap, "uuid", -1, &a->uuid, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct camera__info * SOAP_FMAC4 soap_in_camera__info(struct soap *soap, const char *tag, struct camera__info *a, const char *type)
{
	size_t soap_flag_Info_type = 1;
	size_t soap_flag_Info = 1;
	size_t soap_flag_uuid = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct camera__info *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_camera__info, sizeof(struct camera__info), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_camera__info(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Info_type && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Info-type", &a->Info_type, "xsd:string"))
				{	soap_flag_Info_type--;
					continue;
				}
			if (soap_flag_Info && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Info", &a->Info, "xsd:string"))
				{	soap_flag_Info--;
					continue;
				}
			if (soap_flag_uuid && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "uuid", &a->uuid, "xsd:string"))
				{	soap_flag_uuid--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct camera__info *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_camera__info, 0, sizeof(struct camera__info), 0, soap_copy_camera__info);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Info_type > 0 || soap_flag_Info > 0 || soap_flag_uuid > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_camera__info(struct soap *soap, const struct camera__info *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_camera__info);
	if (soap_out_camera__info(soap, tag?tag:"camera:info", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct camera__info * SOAP_FMAC4 soap_get_camera__info(struct soap *soap, struct camera__info *p, const char *tag, const char *type)
{
	if ((p = soap_in_camera__info(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct camera__info * SOAP_FMAC2 soap_instantiate_camera__info(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_camera__info(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_camera__info, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct camera__info);
		if (size)
			*size = sizeof(struct camera__info);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct camera__info[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct camera__info);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct camera__info*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_camera__info(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct camera__info %p -> %p\n", q, p));
	*(struct camera__info*)p = *(struct camera__info*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_camera__uri(struct soap *soap, struct camera__uri *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->streamURI);
	soap_default_std__string(soap, &a->uuid);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_camera__uri(struct soap *soap, const struct camera__uri *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->streamURI);
	soap_serialize_std__string(soap, &a->uuid);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_camera__uri(struct soap *soap, const char *tag, int id, const struct camera__uri *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_camera__uri), type))
		return soap->error;
	if (soap_out_std__string(soap, "streamURI", -1, &a->streamURI, ""))
		return soap->error;
	if (soap_out_std__string(soap, "uuid", -1, &a->uuid, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct camera__uri * SOAP_FMAC4 soap_in_camera__uri(struct soap *soap, const char *tag, struct camera__uri *a, const char *type)
{
	size_t soap_flag_streamURI = 1;
	size_t soap_flag_uuid = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct camera__uri *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_camera__uri, sizeof(struct camera__uri), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_camera__uri(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_streamURI && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "streamURI", &a->streamURI, "xsd:string"))
				{	soap_flag_streamURI--;
					continue;
				}
			if (soap_flag_uuid && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "uuid", &a->uuid, "xsd:string"))
				{	soap_flag_uuid--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct camera__uri *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_camera__uri, 0, sizeof(struct camera__uri), 0, soap_copy_camera__uri);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_streamURI > 0 || soap_flag_uuid > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_camera__uri(struct soap *soap, const struct camera__uri *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_camera__uri);
	if (soap_out_camera__uri(soap, tag?tag:"camera:uri", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct camera__uri * SOAP_FMAC4 soap_get_camera__uri(struct soap *soap, struct camera__uri *p, const char *tag, const char *type)
{
	if ((p = soap_in_camera__uri(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct camera__uri * SOAP_FMAC2 soap_instantiate_camera__uri(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_camera__uri(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_camera__uri, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct camera__uri);
		if (size)
			*size = sizeof(struct camera__uri);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct camera__uri[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct camera__uri);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct camera__uri*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_camera__uri(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct camera__uri %p -> %p\n", q, p));
	*(struct camera__uri*)p = *(struct camera__uri*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTocamera__uri(struct soap *soap, struct camera__uri *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_camera__uri))
		soap_serialize_camera__uri(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTocamera__uri(struct soap *soap, const char *tag, int id, struct camera__uri *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_camera__uri);
	if (id < 0)
		return soap->error;
	return soap_out_camera__uri(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct camera__uri ** SOAP_FMAC4 soap_in_PointerTocamera__uri(struct soap *soap, const char *tag, struct camera__uri **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct camera__uri **)soap_malloc(soap, sizeof(struct camera__uri *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_camera__uri(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct camera__uri **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_camera__uri, sizeof(struct camera__uri), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTocamera__uri(struct soap *soap, struct camera__uri *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTocamera__uri);
	if (soap_out_PointerTocamera__uri(soap, tag?tag:"camera:uri", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct camera__uri ** SOAP_FMAC4 soap_get_PointerTocamera__uri(struct soap *soap, struct camera__uri **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTocamera__uri(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTocamera__info(struct soap *soap, struct camera__info *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_camera__info))
		soap_serialize_camera__info(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTocamera__info(struct soap *soap, const char *tag, int id, struct camera__info *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_camera__info);
	if (id < 0)
		return soap->error;
	return soap_out_camera__info(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct camera__info ** SOAP_FMAC4 soap_in_PointerTocamera__info(struct soap *soap, const char *tag, struct camera__info **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct camera__info **)soap_malloc(soap, sizeof(struct camera__info *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_camera__info(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct camera__info **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_camera__info, sizeof(struct camera__info), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTocamera__info(struct soap *soap, struct camera__info *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTocamera__info);
	if (soap_out_PointerTocamera__info(soap, tag?tag:"camera:info", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct camera__info ** SOAP_FMAC4 soap_get_PointerTocamera__info(struct soap *soap, struct camera__info **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTocamera__info(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, -1, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, -1, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
