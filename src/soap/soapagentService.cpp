/* soapagentService.cpp
   Generated by gSOAP 2.8.0 from SMC.h
   Copyright(C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.
   The generated code is released under one of the following licenses:
   GPL OR Genivia's license for commercial use.
*/

#include "soapagentService.h"

agentService::agentService()
{	agentService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

agentService::agentService(const struct soap &_soap) :soap(_soap)
{ }

agentService::agentService(soap_mode iomode)
{	agentService_init(iomode, iomode);
}

agentService::agentService(soap_mode imode, soap_mode omode)
{	agentService_init(imode, omode);
}

agentService::~agentService()
{ }

void agentService::agentService_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"camera", "http://tempuri.org/camera.xsd", NULL, NULL},
	{"agent", "http://tempuri.org/agent.xsd", NULL, NULL},
	{"server", "http://tempuri.org/server.xsd", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	this->namespaces = namespaces;
};

void agentService::destroy()
{	soap_destroy(this);
	soap_end(this);
}

agentService *agentService::copy()
{	agentService *dup = SOAP_NEW_COPY(agentService(*(struct soap*)this));
	return dup;
}

int agentService::soap_close_socket()
{	return soap_closesock(this);
}

int agentService::soap_senderfault(const char *string, const char *detailXML)
{	return ::soap_sender_fault(this, string, detailXML);
}

int agentService::soap_senderfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_sender_fault_subcode(this, subcodeQName, string, detailXML);
}

int agentService::soap_receiverfault(const char *string, const char *detailXML)
{	return ::soap_receiver_fault(this, string, detailXML);
}

int agentService::soap_receiverfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_receiver_fault_subcode(this, subcodeQName, string, detailXML);
}

void agentService::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
void agentService::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}

char *agentService::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

void agentService::soap_noheader()
{	header = NULL;
}

int agentService::run(int port)
{	if (soap_valid_socket(bind(NULL, port, 100)))
	{	for (;;)
		{	if (!soap_valid_socket(accept()))
				return this->error;
			(void)serve();
			soap_destroy(this);
			soap_end(this);
		}
	}
	else
		return this->error;
	return SOAP_OK;
}

SOAP_SOCKET agentService::bind(const char *host, int port, int backlog)
{	return soap_bind(this, host, port, backlog);
}

SOAP_SOCKET agentService::accept()
{	return soap_accept(this);
}

int agentService::serve()
{
#ifndef WITH_FASTCGI
	unsigned int k = this->max_keep_alive;
#endif
	do
	{	soap_begin(this);
#ifdef WITH_FASTCGI
		if (FCGI_Accept() < 0)
		{
			this->error = SOAP_EOF;
			return soap_send_fault(this);
		}
#endif

		soap_begin(this);

#ifndef WITH_FASTCGI
		if (this->max_keep_alive > 0 && !--k)
			this->keep_alive = 0;
#endif

		if (soap_begin_recv(this))
		{	if (this->error < SOAP_STOP)
			{
#ifdef WITH_FASTCGI
				soap_send_fault(this);
#else 
				return soap_send_fault(this);
#endif
			}
			soap_closesock(this);

			continue;
		}

		if (soap_envelope_begin_in(this)
		 || soap_recv_header(this)
		 || soap_body_begin_in(this)
		 || dispatch() || (this->fserveloop && this->fserveloop(this)))
		{
#ifdef WITH_FASTCGI
			soap_send_fault(this);
#else
			return soap_send_fault(this);
#endif
		}

#ifdef WITH_FASTCGI
		soap_destroy(this);
		soap_end(this);
	} while (1);
#else
	} while (this->keep_alive);
#endif
	return SOAP_OK;
}

static int serve_agent__coreStation(agentService*);
static int serve_agent__addCamera(agentService*);
static int serve_agent__removeCamera(agentService*);
static int serve_agent__setCameraInfo(agentService*);
static int serve_agent__setCameraURI(agentService*);

int agentService::dispatch()
{	soap_peek_element(this);
	if (!soap_match_tag(this, this->tag, "agent:coreStation"))
		return serve_agent__coreStation(this);
	if (!soap_match_tag(this, this->tag, "agent:addCamera"))
		return serve_agent__addCamera(this);
	if (!soap_match_tag(this, this->tag, "agent:removeCamera"))
		return serve_agent__removeCamera(this);
	if (!soap_match_tag(this, this->tag, "agent:setCameraInfo"))
		return serve_agent__setCameraInfo(this);
	if (!soap_match_tag(this, this->tag, "agent:setCameraURI"))
		return serve_agent__setCameraURI(this);
	return this->error = SOAP_NO_METHOD;
}

static int serve_agent__coreStation(agentService *soap)
{	struct agent__coreStation soap_tmp_agent__coreStation;
	struct agent__coreStationResponse soap_tmp_agent__coreStationResponse;
	soap_default_agent__coreStationResponse(soap, &soap_tmp_agent__coreStationResponse);
	soap_default_agent__coreStation(soap, &soap_tmp_agent__coreStation);
	soap->encodingStyle = NULL;
	if (!soap_get_agent__coreStation(soap, &soap_tmp_agent__coreStation, "agent:coreStation", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->coreStation(soap_tmp_agent__coreStation.command, soap_tmp_agent__coreStationResponse.message);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_agent__coreStationResponse(soap, &soap_tmp_agent__coreStationResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_agent__coreStationResponse(soap, &soap_tmp_agent__coreStationResponse, "agent:coreStationResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_agent__coreStationResponse(soap, &soap_tmp_agent__coreStationResponse, "agent:coreStationResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_agent__addCamera(agentService *soap)
{	struct agent__addCamera soap_tmp_agent__addCamera;
	struct agent__addCameraResponse soap_tmp_agent__addCameraResponse;
	soap_default_agent__addCameraResponse(soap, &soap_tmp_agent__addCameraResponse);
	soap_default_agent__addCamera(soap, &soap_tmp_agent__addCamera);
	soap->encodingStyle = NULL;
	if (!soap_get_agent__addCamera(soap, &soap_tmp_agent__addCamera, "agent:addCamera", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->addCamera(soap_tmp_agent__addCamera.uuid, soap_tmp_agent__addCameraResponse.message);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_agent__addCameraResponse(soap, &soap_tmp_agent__addCameraResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_agent__addCameraResponse(soap, &soap_tmp_agent__addCameraResponse, "agent:addCameraResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_agent__addCameraResponse(soap, &soap_tmp_agent__addCameraResponse, "agent:addCameraResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_agent__removeCamera(agentService *soap)
{	struct agent__removeCamera soap_tmp_agent__removeCamera;
	struct agent__removeCameraResponse soap_tmp_agent__removeCameraResponse;
	soap_default_agent__removeCameraResponse(soap, &soap_tmp_agent__removeCameraResponse);
	soap_default_agent__removeCamera(soap, &soap_tmp_agent__removeCamera);
	soap->encodingStyle = NULL;
	if (!soap_get_agent__removeCamera(soap, &soap_tmp_agent__removeCamera, "agent:removeCamera", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->removeCamera(soap_tmp_agent__removeCamera.uuid, soap_tmp_agent__removeCameraResponse.message);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_agent__removeCameraResponse(soap, &soap_tmp_agent__removeCameraResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_agent__removeCameraResponse(soap, &soap_tmp_agent__removeCameraResponse, "agent:removeCameraResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_agent__removeCameraResponse(soap, &soap_tmp_agent__removeCameraResponse, "agent:removeCameraResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_agent__setCameraInfo(agentService *soap)
{	struct agent__setCameraInfo soap_tmp_agent__setCameraInfo;
	struct agent__setCameraInfoResponse soap_tmp_agent__setCameraInfoResponse;
	soap_default_agent__setCameraInfoResponse(soap, &soap_tmp_agent__setCameraInfoResponse);
	soap_default_agent__setCameraInfo(soap, &soap_tmp_agent__setCameraInfo);
	soap->encodingStyle = NULL;
	if (!soap_get_agent__setCameraInfo(soap, &soap_tmp_agent__setCameraInfo, "agent:setCameraInfo", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->setCameraInfo(soap_tmp_agent__setCameraInfo._info, soap_tmp_agent__setCameraInfoResponse.message);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_agent__setCameraInfoResponse(soap, &soap_tmp_agent__setCameraInfoResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_agent__setCameraInfoResponse(soap, &soap_tmp_agent__setCameraInfoResponse, "agent:setCameraInfoResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_agent__setCameraInfoResponse(soap, &soap_tmp_agent__setCameraInfoResponse, "agent:setCameraInfoResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_agent__setCameraURI(agentService *soap)
{	struct agent__setCameraURI soap_tmp_agent__setCameraURI;
	struct agent__setCameraURIResponse soap_tmp_agent__setCameraURIResponse;
	soap_default_agent__setCameraURIResponse(soap, &soap_tmp_agent__setCameraURIResponse);
	soap_default_agent__setCameraURI(soap, &soap_tmp_agent__setCameraURI);
	soap->encodingStyle = NULL;
	if (!soap_get_agent__setCameraURI(soap, &soap_tmp_agent__setCameraURI, "agent:setCameraURI", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->setCameraURI(soap_tmp_agent__setCameraURI._info, soap_tmp_agent__setCameraURIResponse.message);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_agent__setCameraURIResponse(soap, &soap_tmp_agent__setCameraURIResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_agent__setCameraURIResponse(soap, &soap_tmp_agent__setCameraURIResponse, "agent:setCameraURIResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_agent__setCameraURIResponse(soap, &soap_tmp_agent__setCameraURIResponse, "agent:setCameraURIResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}
/* End of server object code */
