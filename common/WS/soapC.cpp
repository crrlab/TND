/* soapC.cpp
   Generated by gSOAP 2.8.0 from WS-Discovery.h
   Copyright(C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.
   The generated code is released under one of the following licenses:
   GPL OR Genivia's license for commercial use.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.0 2010-11-06 09:07:47 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", NULL, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (!soap->header)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap, -1)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (!soap->fault)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (!soap->fault)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (!soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 1)
	{	if (!soap->fault->detail)
		{	soap->fault->detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
			soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
		}
		return (const char**)&soap->fault->detail->__any;
	}
	if (!soap->fault->SOAP_ENV__Detail)
	{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
	}
	return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if (soap->error || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{
	if (soap_peek_element(soap))
		return NULL;
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_unsignedInt:
		return soap_in_unsignedInt(soap, NULL, NULL, "xsd:unsignedInt");
	case SOAP_TYPE_wsa3__RelationshipTypeValues:
		return soap_in_wsa3__RelationshipTypeValues(soap, NULL, NULL, "wsa3:RelationshipTypeValues");
	case SOAP_TYPE_ns1__DiscoveryReferenceType:
		return soap_in_ns1__DiscoveryReferenceType(soap, NULL, NULL, "ns1:DiscoveryReferenceType");
	case SOAP_TYPE_xsd__positiveInteger_:
		return soap_in_xsd__positiveInteger_(soap, NULL, NULL, "xsd:positiveInteger");
	case SOAP_TYPE_xsd__positiveInteger:
		return soap_in_xsd__positiveInteger(soap, NULL, NULL, "xsd:positiveInteger");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_xsd__nonNegativeInteger:
		return soap_in_xsd__nonNegativeInteger(soap, NULL, NULL, "xsd:nonNegativeInteger");
	case SOAP_TYPE_xsd__anyURI:
		return soap_in_xsd__anyURI(soap, NULL, NULL, "xsd:anyURI");
	case SOAP_TYPE_xsd__QName:
		return soap_in_xsd__QName(soap, NULL, NULL, "xsd:QName");
	case SOAP_TYPE_xsd__anyType:
		return soap_in_xsd__anyType(soap, NULL, NULL, "xsd:anyType");
	case SOAP_TYPE_wsa3__Relationship:
		return soap_in_wsa3__Relationship(soap, NULL, NULL, "wsa3:Relationship");
	case SOAP_TYPE_wsa3__ServiceNameType:
		return soap_in_wsa3__ServiceNameType(soap, NULL, NULL, "wsa3:ServiceNameType");
	case SOAP_TYPE_wsa3__ReferencePropertiesType:
		return soap_in_wsa3__ReferencePropertiesType(soap, NULL, NULL, "wsa3:ReferencePropertiesType");
	case SOAP_TYPE_wsa3__EndpointReferenceType:
		return soap_in_wsa3__EndpointReferenceType(soap, NULL, NULL, "wsa3:EndpointReferenceType");
	case SOAP_TYPE_PointerTo_ns1__Scope:
		return soap_in_PointerTo_ns1__Scope(soap, NULL, NULL, "ns1:Scope");
	case SOAP_TYPE_PointerTo_ns1__Scopes:
		return soap_in_PointerTo_ns1__Scopes(soap, NULL, NULL, "ns1:Scopes");
	case SOAP_TYPE_PointerTo_ns1__Types:
		return soap_in_PointerTo_ns1__Types(soap, NULL, NULL, "ns1:Types");
	case SOAP_TYPE_PointerTo_wsa3__FaultTo:
		return soap_in_PointerTo_wsa3__FaultTo(soap, NULL, NULL, "wsa3:FaultTo");
	case SOAP_TYPE_PointerTo_wsa3__ReplyTo:
		return soap_in_PointerTo_wsa3__ReplyTo(soap, NULL, NULL, "wsa3:ReplyTo");
	case SOAP_TYPE_PointerTo_wsa3__From:
		return soap_in_PointerTo_wsa3__From(soap, NULL, NULL, "wsa3:From");
	case SOAP_TYPE_PointerTo_wsa3__RelatesTo:
		return soap_in_PointerTo_wsa3__RelatesTo(soap, NULL, NULL, "wsa3:RelatesTo");
	case SOAP_TYPE_PointerTowsa3__ServiceNameType:
		return soap_in_PointerTowsa3__ServiceNameType(soap, NULL, NULL, "wsa3:ServiceNameType");
	case SOAP_TYPE_PointerTo_QName:
		return soap_in_PointerTo_QName(soap, NULL, NULL, "xsd:QName");
	case SOAP_TYPE_PointerTowsa3__ReferencePropertiesType:
		return soap_in_PointerTowsa3__ReferencePropertiesType(soap, NULL, NULL, "wsa3:ReferencePropertiesType");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "ns1:DiscoveryReferenceType"))
		{	*type = SOAP_TYPE_ns1__DiscoveryReferenceType;
			return soap_in_ns1__DiscoveryReferenceType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:positiveInteger"))
		{	*type = SOAP_TYPE_xsd__positiveInteger_;
			return soap_in_xsd__positiveInteger_(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:positiveInteger"))
		{	*type = SOAP_TYPE_xsd__positiveInteger;
			return soap_in_xsd__positiveInteger(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:nonNegativeInteger"))
		{	*type = SOAP_TYPE_xsd__nonNegativeInteger;
			return soap_in_xsd__nonNegativeInteger(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:anyURI"))
		{	*type = SOAP_TYPE_xsd__anyURI;
			return soap_in_xsd__anyURI(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	*type = SOAP_TYPE_xsd__QName;
			return soap_in_xsd__QName(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:anyType"))
		{	*type = SOAP_TYPE_xsd__anyType;
			return soap_in_xsd__anyType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedInt"))
		{	*type = SOAP_TYPE_unsignedInt;
			return soap_in_unsignedInt(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsa3:RelationshipTypeValues"))
		{	*type = SOAP_TYPE_wsa3__RelationshipTypeValues;
			return soap_in_wsa3__RelationshipTypeValues(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsa3:Relationship"))
		{	*type = SOAP_TYPE_wsa3__Relationship;
			return soap_in_wsa3__Relationship(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsa3:ServiceNameType"))
		{	*type = SOAP_TYPE_wsa3__ServiceNameType;
			return soap_in_wsa3__ServiceNameType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsa3:ReferencePropertiesType"))
		{	*type = SOAP_TYPE_wsa3__ReferencePropertiesType;
			return soap_in_wsa3__ReferencePropertiesType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsa3:EndpointReferenceType"))
		{	*type = SOAP_TYPE_wsa3__EndpointReferenceType;
			return soap_in_wsa3__EndpointReferenceType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "ns1:Scopes"))
		{	*type = SOAP_TYPE__ns1__Scopes;
			return soap_in__ns1__Scopes(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:Types"))
		{	*type = SOAP_TYPE__ns1__Types;
			return soap_in__ns1__Types(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SoapHttpRequestReplyAddress"))
		{	*type = SOAP_TYPE__ns1__SoapHttpRequestReplyAddress;
			return soap_in__ns1__SoapHttpRequestReplyAddress(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AppSequence"))
		{	*type = SOAP_TYPE__ns1__AppSequence;
			return soap_in__ns1__AppSequence(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:Scope"))
		{	*type = SOAP_TYPE__ns1__Scope;
			return soap_in__ns1__Scope(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:Probe"))
		{	*type = SOAP_TYPE__ns1__Probe;
			return soap_in__ns1__Probe(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:Bye"))
		{	*type = SOAP_TYPE__ns1__Bye;
			return soap_in__ns1__Bye(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsa3:Recipient"))
		{	*type = SOAP_TYPE__wsa3__Recipient;
			return soap_in__wsa3__Recipient(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsa3:FaultTo"))
		{	*type = SOAP_TYPE__wsa3__FaultTo;
			return soap_in__wsa3__FaultTo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsa3:ReplyTo"))
		{	*type = SOAP_TYPE__wsa3__ReplyTo;
			return soap_in__wsa3__ReplyTo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsa3:From"))
		{	*type = SOAP_TYPE__wsa3__From;
			return soap_in__wsa3__From(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsa3:RelatesTo"))
		{	*type = SOAP_TYPE__wsa3__RelatesTo;
			return soap_in__wsa3__RelatesTo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsa3:EndpointReference"))
		{	*type = SOAP_TYPE__wsa3__EndpointReference;
			return soap_in__wsa3__EndpointReference(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "wsa3:Action"))
		{	char **s;
			*type = SOAP_TYPE__wsa3__Action;
			s = soap_in__wsa3__Action(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "wsa3:To"))
		{	char **s;
			*type = SOAP_TYPE__wsa3__To;
			s = soap_in__wsa3__To(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "wsa3:MessageID"))
		{	char **s;
			*type = SOAP_TYPE__wsa3__MessageID;
			s = soap_in__wsa3__MessageID(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
	}
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_unsignedInt:
		return soap_out_unsignedInt(soap, tag, id, (const unsigned int *)ptr, "xsd:unsignedInt");
	case SOAP_TYPE_wsa3__RelationshipTypeValues:
		return soap_out_wsa3__RelationshipTypeValues(soap, tag, id, (const enum wsa3__RelationshipTypeValues *)ptr, "wsa3:RelationshipTypeValues");
	case SOAP_TYPE__ns1__Scopes:
		return soap_out__ns1__Scopes(soap, "ns1:Scopes", id, (const std::string *)ptr, NULL);
	case SOAP_TYPE__ns1__Types:
		return soap_out__ns1__Types(soap, "ns1:Types", id, (const std::string *)ptr, NULL);
	case SOAP_TYPE__ns1__SoapHttpRequestReplyAddress:
		return ((_ns1__SoapHttpRequestReplyAddress *)ptr)->soap_out(soap, "ns1:SoapHttpRequestReplyAddress", id, NULL);
	case SOAP_TYPE__ns1__AppSequence:
		return ((_ns1__AppSequence *)ptr)->soap_out(soap, "ns1:AppSequence", id, NULL);
	case SOAP_TYPE__ns1__Scope:
		return ((_ns1__Scope *)ptr)->soap_out(soap, "ns1:Scope", id, NULL);
	case SOAP_TYPE__ns1__Probe:
		return ((_ns1__Probe *)ptr)->soap_out(soap, "ns1:Probe", id, NULL);
	case SOAP_TYPE__ns1__Bye:
		return ((_ns1__Bye *)ptr)->soap_out(soap, "ns1:Bye", id, NULL);
	case SOAP_TYPE_ns1__DiscoveryReferenceType:
		return ((ns1__DiscoveryReferenceType *)ptr)->soap_out(soap, tag, id, "ns1:DiscoveryReferenceType");
	case SOAP_TYPE_xsd__positiveInteger_:
		return ((xsd__positiveInteger_ *)ptr)->soap_out(soap, tag, id, "xsd:positiveInteger");
	case SOAP_TYPE_xsd__positiveInteger:
		return soap_out_xsd__positiveInteger(soap, tag, id, (const std::string *)ptr, "xsd:positiveInteger");
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_xsd__nonNegativeInteger:
		return ((xsd__nonNegativeInteger *)ptr)->soap_out(soap, tag, id, "xsd:nonNegativeInteger");
	case SOAP_TYPE_xsd__anyURI:
		return ((xsd__anyURI *)ptr)->soap_out(soap, tag, id, "xsd:anyURI");
	case SOAP_TYPE_xsd__QName:
		return ((xsd__QName *)ptr)->soap_out(soap, tag, id, "xsd:QName");
	case SOAP_TYPE_xsd__anyType:
		return ((xsd__anyType *)ptr)->soap_out(soap, tag, id, "xsd:anyType");
	case SOAP_TYPE__wsa3__Recipient:
		return soap_out__wsa3__Recipient(soap, "wsa3:Recipient", id, (const struct wsa3__EndpointReferenceType *)ptr, NULL);
	case SOAP_TYPE__wsa3__FaultTo:
		return soap_out__wsa3__FaultTo(soap, "wsa3:FaultTo", id, (const struct wsa3__EndpointReferenceType *)ptr, NULL);
	case SOAP_TYPE__wsa3__ReplyTo:
		return soap_out__wsa3__ReplyTo(soap, "wsa3:ReplyTo", id, (const struct wsa3__EndpointReferenceType *)ptr, NULL);
	case SOAP_TYPE__wsa3__From:
		return soap_out__wsa3__From(soap, "wsa3:From", id, (const struct wsa3__EndpointReferenceType *)ptr, NULL);
	case SOAP_TYPE__wsa3__RelatesTo:
		return soap_out__wsa3__RelatesTo(soap, "wsa3:RelatesTo", id, (const struct wsa3__Relationship *)ptr, NULL);
	case SOAP_TYPE__wsa3__EndpointReference:
		return soap_out__wsa3__EndpointReference(soap, "wsa3:EndpointReference", id, (const struct wsa3__EndpointReferenceType *)ptr, NULL);
	case SOAP_TYPE_wsa3__Relationship:
		return soap_out_wsa3__Relationship(soap, tag, id, (const struct wsa3__Relationship *)ptr, "wsa3:Relationship");
	case SOAP_TYPE_wsa3__ServiceNameType:
		return soap_out_wsa3__ServiceNameType(soap, tag, id, (const struct wsa3__ServiceNameType *)ptr, "wsa3:ServiceNameType");
	case SOAP_TYPE_wsa3__ReferencePropertiesType:
		return soap_out_wsa3__ReferencePropertiesType(soap, tag, id, (const struct wsa3__ReferencePropertiesType *)ptr, "wsa3:ReferencePropertiesType");
	case SOAP_TYPE_wsa3__EndpointReferenceType:
		return soap_out_wsa3__EndpointReferenceType(soap, tag, id, (const struct wsa3__EndpointReferenceType *)ptr, "wsa3:EndpointReferenceType");
	case SOAP_TYPE_PointerTo_ns1__Scope:
		return soap_out_PointerTo_ns1__Scope(soap, tag, id, (_ns1__Scope *const*)ptr, "ns1:Scope");
	case SOAP_TYPE_PointerTo_ns1__Scopes:
		return soap_out_PointerTo_ns1__Scopes(soap, tag, id, (std::string *const*)ptr, "ns1:Scopes");
	case SOAP_TYPE_PointerTo_ns1__Types:
		return soap_out_PointerTo_ns1__Types(soap, tag, id, (std::string *const*)ptr, "ns1:Types");
	case SOAP_TYPE_PointerTo_wsa3__FaultTo:
		return soap_out_PointerTo_wsa3__FaultTo(soap, tag, id, (struct wsa3__EndpointReferenceType *const*)ptr, "wsa3:FaultTo");
	case SOAP_TYPE_PointerTo_wsa3__ReplyTo:
		return soap_out_PointerTo_wsa3__ReplyTo(soap, tag, id, (struct wsa3__EndpointReferenceType *const*)ptr, "wsa3:ReplyTo");
	case SOAP_TYPE_PointerTo_wsa3__From:
		return soap_out_PointerTo_wsa3__From(soap, tag, id, (struct wsa3__EndpointReferenceType *const*)ptr, "wsa3:From");
	case SOAP_TYPE_PointerTo_wsa3__RelatesTo:
		return soap_out_PointerTo_wsa3__RelatesTo(soap, tag, id, (struct wsa3__Relationship *const*)ptr, "wsa3:RelatesTo");
	case SOAP_TYPE__wsa3__Action:
		return soap_out_string(soap, "wsa3:Action", id, (char*const*)&ptr, NULL);
	case SOAP_TYPE__wsa3__To:
		return soap_out_string(soap, "wsa3:To", id, (char*const*)&ptr, NULL);
	case SOAP_TYPE__wsa3__MessageID:
		return soap_out_string(soap, "wsa3:MessageID", id, (char*const*)&ptr, NULL);
	case SOAP_TYPE_PointerTowsa3__ServiceNameType:
		return soap_out_PointerTowsa3__ServiceNameType(soap, tag, id, (struct wsa3__ServiceNameType *const*)ptr, "wsa3:ServiceNameType");
	case SOAP_TYPE_PointerTo_QName:
		return soap_out_PointerTo_QName(soap, tag, id, (char **const*)ptr, "xsd:QName");
	case SOAP_TYPE_PointerTowsa3__ReferencePropertiesType:
		return soap_out_PointerTowsa3__ReferencePropertiesType(soap, tag, id, (struct wsa3__ReferencePropertiesType *const*)ptr, "wsa3:ReferencePropertiesType");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE__ns1__Scopes:
		soap_serialize__ns1__Scopes(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE__ns1__Types:
		soap_serialize__ns1__Types(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE__ns1__SoapHttpRequestReplyAddress:
		((_ns1__SoapHttpRequestReplyAddress *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__AppSequence:
		((_ns1__AppSequence *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__Scope:
		((_ns1__Scope *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__Probe:
		((_ns1__Probe *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__Bye:
		((_ns1__Bye *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__DiscoveryReferenceType:
		((ns1__DiscoveryReferenceType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__positiveInteger_:
		((xsd__positiveInteger_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__positiveInteger:
		soap_serialize_xsd__positiveInteger(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_xsd__nonNegativeInteger:
		((xsd__nonNegativeInteger *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__anyURI:
		((xsd__anyURI *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__QName:
		((xsd__QName *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__anyType:
		((xsd__anyType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__wsa3__Recipient:
		soap_serialize__wsa3__Recipient(soap, (const struct wsa3__EndpointReferenceType *)ptr);
		break;
	case SOAP_TYPE__wsa3__FaultTo:
		soap_serialize__wsa3__FaultTo(soap, (const struct wsa3__EndpointReferenceType *)ptr);
		break;
	case SOAP_TYPE__wsa3__ReplyTo:
		soap_serialize__wsa3__ReplyTo(soap, (const struct wsa3__EndpointReferenceType *)ptr);
		break;
	case SOAP_TYPE__wsa3__From:
		soap_serialize__wsa3__From(soap, (const struct wsa3__EndpointReferenceType *)ptr);
		break;
	case SOAP_TYPE__wsa3__RelatesTo:
		soap_serialize__wsa3__RelatesTo(soap, (const struct wsa3__Relationship *)ptr);
		break;
	case SOAP_TYPE__wsa3__EndpointReference:
		soap_serialize__wsa3__EndpointReference(soap, (const struct wsa3__EndpointReferenceType *)ptr);
		break;
	case SOAP_TYPE_wsa3__Relationship:
		soap_serialize_wsa3__Relationship(soap, (const struct wsa3__Relationship *)ptr);
		break;
	case SOAP_TYPE_wsa3__ServiceNameType:
		soap_serialize_wsa3__ServiceNameType(soap, (const struct wsa3__ServiceNameType *)ptr);
		break;
	case SOAP_TYPE_wsa3__ReferencePropertiesType:
		soap_serialize_wsa3__ReferencePropertiesType(soap, (const struct wsa3__ReferencePropertiesType *)ptr);
		break;
	case SOAP_TYPE_wsa3__EndpointReferenceType:
		soap_serialize_wsa3__EndpointReferenceType(soap, (const struct wsa3__EndpointReferenceType *)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__Scope:
		soap_serialize_PointerTo_ns1__Scope(soap, (_ns1__Scope *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__Scopes:
		soap_serialize_PointerTo_ns1__Scopes(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__Types:
		soap_serialize_PointerTo_ns1__Types(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_wsa3__FaultTo:
		soap_serialize_PointerTo_wsa3__FaultTo(soap, (struct wsa3__EndpointReferenceType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_wsa3__ReplyTo:
		soap_serialize_PointerTo_wsa3__ReplyTo(soap, (struct wsa3__EndpointReferenceType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_wsa3__From:
		soap_serialize_PointerTo_wsa3__From(soap, (struct wsa3__EndpointReferenceType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_wsa3__RelatesTo:
		soap_serialize_PointerTo_wsa3__RelatesTo(soap, (struct wsa3__Relationship *const*)ptr);
		break;
	case SOAP_TYPE__wsa3__Action:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE__wsa3__To:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE__wsa3__MessageID:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_PointerTowsa3__ServiceNameType:
		soap_serialize_PointerTowsa3__ServiceNameType(soap, (struct wsa3__ServiceNameType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_QName:
		soap_serialize_PointerTo_QName(soap, (char **const*)ptr);
		break;
	case SOAP_TYPE_PointerTowsa3__ReferencePropertiesType:
		soap_serialize_PointerTowsa3__ReferencePropertiesType(soap, (struct wsa3__ReferencePropertiesType *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{
	switch (t)
	{
	case SOAP_TYPE_wsa3__EndpointReferenceType:
		return (void*)soap_instantiate_wsa3__EndpointReferenceType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsa3__ReferencePropertiesType:
		return (void*)soap_instantiate_wsa3__ReferencePropertiesType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsa3__ServiceNameType:
		return (void*)soap_instantiate_wsa3__ServiceNameType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_wsa3__Relationship:
		return (void*)soap_instantiate_wsa3__Relationship(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_xsd__anyType:
		return (void*)soap_instantiate_xsd__anyType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__QName:
		return (void*)soap_instantiate_xsd__QName(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__anyURI:
		return (void*)soap_instantiate_xsd__anyURI(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__nonNegativeInteger:
		return (void*)soap_instantiate_xsd__nonNegativeInteger(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__positiveInteger_:
		return (void*)soap_instantiate_xsd__positiveInteger_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__DiscoveryReferenceType:
		return (void*)soap_instantiate_ns1__DiscoveryReferenceType(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__Bye:
		return (void*)soap_instantiate__ns1__Bye(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__Probe:
		return (void*)soap_instantiate__ns1__Probe(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__Scope:
		return (void*)soap_instantiate__ns1__Scope(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__AppSequence:
		return (void*)soap_instantiate__ns1__AppSequence(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__SoapHttpRequestReplyAddress:
		return (void*)soap_instantiate__ns1__SoapHttpRequestReplyAddress(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE__wsa3__EndpointReference:
		return (void*)soap_instantiate__wsa3__EndpointReference(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsa3__RelatesTo:
		return (void*)soap_instantiate__wsa3__RelatesTo(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsa3__From:
		return (void*)soap_instantiate__wsa3__From(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsa3__ReplyTo:
		return (void*)soap_instantiate__wsa3__ReplyTo(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsa3__FaultTo:
		return (void*)soap_instantiate__wsa3__FaultTo(soap, -1, type, arrayType, n);
	case SOAP_TYPE__wsa3__Recipient:
		return (void*)soap_instantiate__wsa3__Recipient(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__positiveInteger:
		return (void*)soap_instantiate_xsd__positiveInteger(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__Types:
		return (void*)soap_instantiate__ns1__Types(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__Scopes:
		return (void*)soap_instantiate__ns1__Scopes(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOf_XML:
		return (void*)soap_instantiate_std__vectorTemplateOf_XML(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_wsa3__EndpointReferenceType:
		if (p->size < 0)
			SOAP_DELETE((struct wsa3__EndpointReferenceType*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct wsa3__EndpointReferenceType*)p->ptr);
		break;
	case SOAP_TYPE_wsa3__ReferencePropertiesType:
		if (p->size < 0)
			SOAP_DELETE((struct wsa3__ReferencePropertiesType*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct wsa3__ReferencePropertiesType*)p->ptr);
		break;
	case SOAP_TYPE_wsa3__ServiceNameType:
		if (p->size < 0)
			SOAP_DELETE((struct wsa3__ServiceNameType*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct wsa3__ServiceNameType*)p->ptr);
		break;
	case SOAP_TYPE_wsa3__Relationship:
		if (p->size < 0)
			SOAP_DELETE((struct wsa3__Relationship*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct wsa3__Relationship*)p->ptr);
		break;
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Header*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Header*)p->ptr);
		break;
	case SOAP_TYPE_xsd__anyType:
		if (p->size < 0)
			SOAP_DELETE((xsd__anyType*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__anyType*)p->ptr);
		break;
	case SOAP_TYPE_xsd__QName:
		if (p->size < 0)
			SOAP_DELETE((xsd__QName*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__QName*)p->ptr);
		break;
	case SOAP_TYPE_xsd__anyURI:
		if (p->size < 0)
			SOAP_DELETE((xsd__anyURI*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__anyURI*)p->ptr);
		break;
	case SOAP_TYPE_xsd__nonNegativeInteger:
		if (p->size < 0)
			SOAP_DELETE((xsd__nonNegativeInteger*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__nonNegativeInteger*)p->ptr);
		break;
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE_xsd__positiveInteger_:
		if (p->size < 0)
			SOAP_DELETE((xsd__positiveInteger_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__positiveInteger_*)p->ptr);
		break;
	case SOAP_TYPE_ns1__DiscoveryReferenceType:
		if (p->size < 0)
			SOAP_DELETE((ns1__DiscoveryReferenceType*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns1__DiscoveryReferenceType*)p->ptr);
		break;
	case SOAP_TYPE__ns1__Bye:
		if (p->size < 0)
			SOAP_DELETE((_ns1__Bye*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__Bye*)p->ptr);
		break;
	case SOAP_TYPE__ns1__Probe:
		if (p->size < 0)
			SOAP_DELETE((_ns1__Probe*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__Probe*)p->ptr);
		break;
	case SOAP_TYPE__ns1__Scope:
		if (p->size < 0)
			SOAP_DELETE((_ns1__Scope*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__Scope*)p->ptr);
		break;
	case SOAP_TYPE__ns1__AppSequence:
		if (p->size < 0)
			SOAP_DELETE((_ns1__AppSequence*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__AppSequence*)p->ptr);
		break;
	case SOAP_TYPE__ns1__SoapHttpRequestReplyAddress:
		if (p->size < 0)
			SOAP_DELETE((_ns1__SoapHttpRequestReplyAddress*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__SoapHttpRequestReplyAddress*)p->ptr);
		break;
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Code*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Code*)p->ptr);
		break;
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Detail*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Detail*)p->ptr);
		break;
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Reason*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Reason*)p->ptr);
		break;
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Fault*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Fault*)p->ptr);
		break;
	case SOAP_TYPE__wsa3__EndpointReference:
		if (p->size < 0)
			SOAP_DELETE((struct wsa3__EndpointReferenceType*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct wsa3__EndpointReferenceType*)p->ptr);
		break;
	case SOAP_TYPE__wsa3__RelatesTo:
		if (p->size < 0)
			SOAP_DELETE((struct wsa3__Relationship*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct wsa3__Relationship*)p->ptr);
		break;
	case SOAP_TYPE__wsa3__From:
		if (p->size < 0)
			SOAP_DELETE((struct wsa3__EndpointReferenceType*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct wsa3__EndpointReferenceType*)p->ptr);
		break;
	case SOAP_TYPE__wsa3__ReplyTo:
		if (p->size < 0)
			SOAP_DELETE((struct wsa3__EndpointReferenceType*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct wsa3__EndpointReferenceType*)p->ptr);
		break;
	case SOAP_TYPE__wsa3__FaultTo:
		if (p->size < 0)
			SOAP_DELETE((struct wsa3__EndpointReferenceType*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct wsa3__EndpointReferenceType*)p->ptr);
		break;
	case SOAP_TYPE__wsa3__Recipient:
		if (p->size < 0)
			SOAP_DELETE((struct wsa3__EndpointReferenceType*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct wsa3__EndpointReferenceType*)p->ptr);
		break;
	case SOAP_TYPE_xsd__positiveInteger:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE__ns1__Types:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE__ns1__Scopes:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE_std__vectorTemplateOf_XML:
		if (p->size < 0)
			SOAP_DELETE((std::vector<char * >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<char * >*)p->ptr);
		break;
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap *soap, const char *href, void *p, size_t len, int st, int tt, size_t n, unsigned int k)
{	return soap_id_forward(soap, href, p, len, st, tt, n, k, soap_container_insert);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
#ifdef WIN32
#pragma warning(push)
#pragma warning(disable:4065)
#endif
{
	(void)soap; (void)st; (void)p; (void)len; (void)q; (void)n; /* appease -Wall -Werror */
	switch (tt)
	{
	case SOAP_TYPE_std__vectorTemplateOf_XML:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<char * >*)p)[len] = *(char **)q;
		break;
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", st, tt));
	}
#ifdef WIN32
#pragma warning(pop)
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedInt(struct soap *soap, unsigned int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedInt
	*a = SOAP_DEFAULT_unsignedInt;
#else
	*a = (unsigned int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap *soap, const char *tag, int id, const unsigned int *a, const char *type)
{
	return soap_outunsignedInt(soap, tag, id, a, type, SOAP_TYPE_unsignedInt);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap *soap, const char *tag, unsigned int *a, const char *type)
{	unsigned int *p;
	p = soap_inunsignedInt(soap, tag, a, type, SOAP_TYPE_unsignedInt);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap *soap, const unsigned int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_unsignedInt);
	if (soap_out_unsignedInt(soap, tag?tag:"unsignedInt", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap *soap, unsigned int *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa3__RelationshipTypeValues(struct soap *soap, enum wsa3__RelationshipTypeValues *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_wsa3__RelationshipTypeValues
	*a = SOAP_DEFAULT_wsa3__RelationshipTypeValues;
#else
	*a = (enum wsa3__RelationshipTypeValues)0;
#endif
}

static const struct soap_code_map soap_codes_wsa3__RelationshipTypeValues[] =
{	{ (long)wsa3__Response, "wsa3:Response" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_wsa3__RelationshipTypeValues2s(struct soap *soap, enum wsa3__RelationshipTypeValues n)
{	const char *s = soap_code_str(soap_codes_wsa3__RelationshipTypeValues, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa3__RelationshipTypeValues(struct soap *soap, const char *tag, int id, const enum wsa3__RelationshipTypeValues *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_wsa3__RelationshipTypeValues), type) || soap_send(soap, soap_wsa3__RelationshipTypeValues2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2wsa3__RelationshipTypeValues(struct soap *soap, const char *s, enum wsa3__RelationshipTypeValues *a)
{
	const struct soap_code_map *map;
	char *t;
	if (!s)
		return soap->error;
	soap_s2QName(soap, s, &t, -1, -1);
	map = soap_code(soap_codes_wsa3__RelationshipTypeValues, t);
	if (map)
		*a = (enum wsa3__RelationshipTypeValues)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 0)))
			return soap->error = SOAP_TYPE;
		*a = (enum wsa3__RelationshipTypeValues)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum wsa3__RelationshipTypeValues * SOAP_FMAC4 soap_in_wsa3__RelationshipTypeValues(struct soap *soap, const char *tag, enum wsa3__RelationshipTypeValues *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum wsa3__RelationshipTypeValues *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_wsa3__RelationshipTypeValues, sizeof(enum wsa3__RelationshipTypeValues), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2wsa3__RelationshipTypeValues(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum wsa3__RelationshipTypeValues *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_wsa3__RelationshipTypeValues, 0, sizeof(enum wsa3__RelationshipTypeValues), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa3__RelationshipTypeValues(struct soap *soap, const enum wsa3__RelationshipTypeValues *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_wsa3__RelationshipTypeValues);
	if (soap_out_wsa3__RelationshipTypeValues(soap, tag?tag:"wsa3:RelationshipTypeValues", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum wsa3__RelationshipTypeValues * SOAP_FMAC4 soap_get_wsa3__RelationshipTypeValues(struct soap *soap, enum wsa3__RelationshipTypeValues *p, const char *tag, const char *type)
{
	if ((p = soap_in_wsa3__RelationshipTypeValues(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__SoapHttpRequestReplyAddress::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->_ns1__SoapHttpRequestReplyAddress::__item);
	this->_ns1__SoapHttpRequestReplyAddress::__anyAttribute = NULL;
	/* transient soap skipped */
}

void _ns1__SoapHttpRequestReplyAddress::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->_ns1__SoapHttpRequestReplyAddress::__item);
	/* transient soap skipped */
}

int _ns1__SoapHttpRequestReplyAddress::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__SoapHttpRequestReplyAddress(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SoapHttpRequestReplyAddress(struct soap *soap, const char *tag, int id, const _ns1__SoapHttpRequestReplyAddress *a, const char *type)
{
	if (((_ns1__SoapHttpRequestReplyAddress*)a)->__anyAttribute)
		soap_set_attr(soap, "-anyAttribute", ((_ns1__SoapHttpRequestReplyAddress*)a)->__anyAttribute, 1);
	return soap_out_string(soap, tag, id, &a->_ns1__SoapHttpRequestReplyAddress::__item, "");
}

void *_ns1__SoapHttpRequestReplyAddress::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__SoapHttpRequestReplyAddress(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__SoapHttpRequestReplyAddress * SOAP_FMAC4 soap_in__ns1__SoapHttpRequestReplyAddress(struct soap *soap, const char *tag, _ns1__SoapHttpRequestReplyAddress *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (_ns1__SoapHttpRequestReplyAddress *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__SoapHttpRequestReplyAddress, sizeof(_ns1__SoapHttpRequestReplyAddress), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__SoapHttpRequestReplyAddress)
			return (_ns1__SoapHttpRequestReplyAddress *)a->soap_in(soap, tag, type);
	}
	if (soap_s2string(soap, soap_attr_value(soap, "-anyAttribute", 0), &((_ns1__SoapHttpRequestReplyAddress*)a)->__anyAttribute, -1, -1))
		return NULL;
	if (!soap_in_string(soap, tag, &(a->_ns1__SoapHttpRequestReplyAddress::__item), ""))
		return NULL;
	return a;
}

int _ns1__SoapHttpRequestReplyAddress::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__SoapHttpRequestReplyAddress);
	if (this->soap_out(soap, tag?tag:"ns1:SoapHttpRequestReplyAddress", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__SoapHttpRequestReplyAddress::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__SoapHttpRequestReplyAddress(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__SoapHttpRequestReplyAddress * SOAP_FMAC4 soap_get__ns1__SoapHttpRequestReplyAddress(struct soap *soap, _ns1__SoapHttpRequestReplyAddress *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__SoapHttpRequestReplyAddress(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__SoapHttpRequestReplyAddress * SOAP_FMAC2 soap_instantiate__ns1__SoapHttpRequestReplyAddress(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__SoapHttpRequestReplyAddress(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__SoapHttpRequestReplyAddress, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__SoapHttpRequestReplyAddress);
		if (size)
			*size = sizeof(_ns1__SoapHttpRequestReplyAddress);
		((_ns1__SoapHttpRequestReplyAddress*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__SoapHttpRequestReplyAddress[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__SoapHttpRequestReplyAddress);
		for (int i = 0; i < n; i++)
			((_ns1__SoapHttpRequestReplyAddress*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__SoapHttpRequestReplyAddress*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SoapHttpRequestReplyAddress(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__SoapHttpRequestReplyAddress %p -> %p\n", q, p));
	*(_ns1__SoapHttpRequestReplyAddress*)p = *(_ns1__SoapHttpRequestReplyAddress*)q;
}

void _ns1__AppSequence::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_xsd__positiveInteger(soap, &this->_ns1__AppSequence::InstanceId);
	soap_default_string(soap, &this->_ns1__AppSequence::SequenceId);
	soap_default_xsd__positiveInteger(soap, &this->_ns1__AppSequence::MessageNumber);
	/* transient soap skipped */
}

void _ns1__AppSequence::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _ns1__AppSequence::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__AppSequence(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AppSequence(struct soap *soap, const char *tag, int id, const _ns1__AppSequence *a, const char *type)
{
	if (!((_ns1__AppSequence*)a)->InstanceId.empty())
		soap_set_attr(soap, "InstanceId", ((_ns1__AppSequence*)a)->InstanceId.c_str(), 1);
	if (((_ns1__AppSequence*)a)->SequenceId)
		soap_set_attr(soap, "SequenceId", ((_ns1__AppSequence*)a)->SequenceId, 1);
	if (!((_ns1__AppSequence*)a)->MessageNumber.empty())
		soap_set_attr(soap, "MessageNumber", ((_ns1__AppSequence*)a)->MessageNumber.c_str(), 1);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__AppSequence), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__AppSequence::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__AppSequence(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__AppSequence * SOAP_FMAC4 soap_in__ns1__AppSequence(struct soap *soap, const char *tag, _ns1__AppSequence *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__AppSequence *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__AppSequence, sizeof(_ns1__AppSequence), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__AppSequence)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__AppSequence *)a->soap_in(soap, tag, type);
		}
	}
	{	const char *t = soap_attr_value(soap, "InstanceId", 1);
		if (t)
		{	char *s;
			if (soap_s2string(soap, t, &s, -1, -1))
				return NULL;
			((_ns1__AppSequence*)a)->InstanceId.assign(s);
		}
		else if (soap->error)
			return NULL;
	}
	if (soap_s2string(soap, soap_attr_value(soap, "SequenceId", 0), &((_ns1__AppSequence*)a)->SequenceId, -1, -1))
		return NULL;
	{	const char *t = soap_attr_value(soap, "MessageNumber", 1);
		if (t)
		{	char *s;
			if (soap_s2string(soap, t, &s, -1, -1))
				return NULL;
			((_ns1__AppSequence*)a)->MessageNumber.assign(s);
		}
		else if (soap->error)
			return NULL;
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__AppSequence *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__AppSequence, 0, sizeof(_ns1__AppSequence), 0, soap_copy__ns1__AppSequence);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__AppSequence::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__AppSequence);
	if (this->soap_out(soap, tag?tag:"ns1:AppSequence", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__AppSequence::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__AppSequence(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__AppSequence * SOAP_FMAC4 soap_get__ns1__AppSequence(struct soap *soap, _ns1__AppSequence *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__AppSequence(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__AppSequence * SOAP_FMAC2 soap_instantiate__ns1__AppSequence(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__AppSequence(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__AppSequence, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__AppSequence);
		if (size)
			*size = sizeof(_ns1__AppSequence);
		((_ns1__AppSequence*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__AppSequence[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__AppSequence);
		for (int i = 0; i < n; i++)
			((_ns1__AppSequence*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__AppSequence*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AppSequence(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__AppSequence %p -> %p\n", q, p));
	*(_ns1__AppSequence*)p = *(_ns1__AppSequence*)q;
}

void _ns1__Scope::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->_ns1__Scope::__item);
	soap_default_string(soap, &this->_ns1__Scope::MatchBy);
	/* transient soap skipped */
}

void _ns1__Scope::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->_ns1__Scope::__item);
	/* transient soap skipped */
}

int _ns1__Scope::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__Scope(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__Scope(struct soap *soap, const char *tag, int id, const _ns1__Scope *a, const char *type)
{
	if (((_ns1__Scope*)a)->MatchBy)
		soap_set_attr(soap, "MatchBy", ((_ns1__Scope*)a)->MatchBy, 1);
	return soap_out_string(soap, tag, id, &a->_ns1__Scope::__item, "");
}

void *_ns1__Scope::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__Scope(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__Scope * SOAP_FMAC4 soap_in__ns1__Scope(struct soap *soap, const char *tag, _ns1__Scope *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (_ns1__Scope *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__Scope, sizeof(_ns1__Scope), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__Scope)
			return (_ns1__Scope *)a->soap_in(soap, tag, type);
	}
	if (soap_s2string(soap, soap_attr_value(soap, "MatchBy", 0), &((_ns1__Scope*)a)->MatchBy, -1, -1))
		return NULL;
	if (!soap_in_string(soap, tag, &(a->_ns1__Scope::__item), ""))
		return NULL;
	return a;
}

int _ns1__Scope::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__Scope);
	if (this->soap_out(soap, tag?tag:"ns1:Scope", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__Scope::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__Scope(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__Scope * SOAP_FMAC4 soap_get__ns1__Scope(struct soap *soap, _ns1__Scope *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__Scope(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__Scope * SOAP_FMAC2 soap_instantiate__ns1__Scope(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__Scope(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__Scope, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__Scope);
		if (size)
			*size = sizeof(_ns1__Scope);
		((_ns1__Scope*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__Scope[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__Scope);
		for (int i = 0; i < n; i++)
			((_ns1__Scope*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__Scope*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__Scope(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__Scope %p -> %p\n", q, p));
	*(_ns1__Scope*)p = *(_ns1__Scope*)q;
}

void _ns1__Probe::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__Probe::Types = NULL;
	this->_ns1__Probe::Scope = NULL;
	soap_default_std__vectorTemplateOf_XML(soap, &this->_ns1__Probe::__any);
	this->_ns1__Probe::__anyAttribute = NULL;
	/* transient soap skipped */
}

void _ns1__Probe::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__Types(soap, &this->_ns1__Probe::Types);
	soap_serialize_PointerTo_ns1__Scope(soap, &this->_ns1__Probe::Scope);
	soap_serialize_std__vectorTemplateOf_XML(soap, &this->_ns1__Probe::__any);
	/* transient soap skipped */
}

int _ns1__Probe::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__Probe(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__Probe(struct soap *soap, const char *tag, int id, const _ns1__Probe *a, const char *type)
{
	if (((_ns1__Probe*)a)->__anyAttribute)
		soap_set_attr(soap, "-anyAttribute", ((_ns1__Probe*)a)->__anyAttribute, 1);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__Probe), type))
		return soap->error;
	if (soap_out_PointerTo_ns1__Types(soap, "ns1:Types", -1, &(a->_ns1__Probe::Types), ""))
		return soap->error;
	if (soap_out_PointerTo_ns1__Scope(soap, "ns1:Scope", -1, &(a->_ns1__Probe::Scope), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOf_XML(soap, "-any", -1, &(a->_ns1__Probe::__any), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__Probe::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__Probe(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__Probe * SOAP_FMAC4 soap_in__ns1__Probe(struct soap *soap, const char *tag, _ns1__Probe *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__Probe *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__Probe, sizeof(_ns1__Probe), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__Probe)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__Probe *)a->soap_in(soap, tag, type);
		}
	}
	if (soap_s2string(soap, soap_attr_value(soap, "-anyAttribute", 0), &((_ns1__Probe*)a)->__anyAttribute, -1, -1))
		return NULL;
	size_t soap_flag_Types1 = 1;
	size_t soap_flag_Scope1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Types1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTo_ns1__Types(soap, "ns1:Types", &(a->_ns1__Probe::Types), ""))
				{	soap_flag_Types1--;
					continue;
				}
			if (soap_flag_Scope1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__Scope(soap, "ns1:Scope", &(a->_ns1__Probe::Scope), ""))
				{	soap_flag_Scope1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOf_XML(soap, "-any", &(a->_ns1__Probe::__any), ""))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__Probe *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__Probe, 0, sizeof(_ns1__Probe), 0, soap_copy__ns1__Probe);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__Probe::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__Probe);
	if (this->soap_out(soap, tag?tag:"ns1:Probe", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__Probe::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__Probe(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__Probe * SOAP_FMAC4 soap_get__ns1__Probe(struct soap *soap, _ns1__Probe *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__Probe(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__Probe * SOAP_FMAC2 soap_instantiate__ns1__Probe(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__Probe(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__Probe, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__Probe);
		if (size)
			*size = sizeof(_ns1__Probe);
		((_ns1__Probe*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__Probe[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__Probe);
		for (int i = 0; i < n; i++)
			((_ns1__Probe*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__Probe*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__Probe(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__Probe %p -> %p\n", q, p));
	*(_ns1__Probe*)p = *(_ns1__Probe*)q;
}

void _ns1__Bye::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default__wsa3__EndpointReference(soap, &this->_ns1__Bye::wsa3__EndpointReference);
	soap_default_std__vectorTemplateOf_XML(soap, &this->_ns1__Bye::__any);
	this->_ns1__Bye::__anyAttribute = NULL;
	/* transient soap skipped */
}

void _ns1__Bye::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize__wsa3__EndpointReference(soap, &this->_ns1__Bye::wsa3__EndpointReference);
	soap_serialize_std__vectorTemplateOf_XML(soap, &this->_ns1__Bye::__any);
	/* transient soap skipped */
}

int _ns1__Bye::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__Bye(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__Bye(struct soap *soap, const char *tag, int id, const _ns1__Bye *a, const char *type)
{
	if (((_ns1__Bye*)a)->__anyAttribute)
		soap_set_attr(soap, "-anyAttribute", ((_ns1__Bye*)a)->__anyAttribute, 1);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__Bye), type))
		return soap->error;
	if (soap_out__wsa3__EndpointReference(soap, "wsa3:EndpointReference", -1, &(a->_ns1__Bye::wsa3__EndpointReference), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOf_XML(soap, "-any", -1, &(a->_ns1__Bye::__any), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__Bye::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__Bye(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__Bye * SOAP_FMAC4 soap_in__ns1__Bye(struct soap *soap, const char *tag, _ns1__Bye *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__Bye *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__Bye, sizeof(_ns1__Bye), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__Bye)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__Bye *)a->soap_in(soap, tag, type);
		}
	}
	if (soap_s2string(soap, soap_attr_value(soap, "-anyAttribute", 0), &((_ns1__Bye*)a)->__anyAttribute, -1, -1))
		return NULL;
	size_t soap_flag_wsa3__EndpointReference1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_wsa3__EndpointReference1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in__wsa3__EndpointReference(soap, "wsa3:EndpointReference", &(a->_ns1__Bye::wsa3__EndpointReference), ""))
				{	soap_flag_wsa3__EndpointReference1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOf_XML(soap, "-any", &(a->_ns1__Bye::__any), ""))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__Bye *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__Bye, 0, sizeof(_ns1__Bye), 0, soap_copy__ns1__Bye);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_wsa3__EndpointReference1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__Bye::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__Bye);
	if (this->soap_out(soap, tag?tag:"ns1:Bye", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__Bye::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__Bye(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__Bye * SOAP_FMAC4 soap_get__ns1__Bye(struct soap *soap, _ns1__Bye *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__Bye(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__Bye * SOAP_FMAC2 soap_instantiate__ns1__Bye(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__Bye(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__Bye, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__Bye);
		if (size)
			*size = sizeof(_ns1__Bye);
		((_ns1__Bye*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns1__Bye[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__Bye);
		for (int i = 0; i < n; i++)
			((_ns1__Bye*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__Bye*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__Bye(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__Bye %p -> %p\n", q, p));
	*(_ns1__Bye*)p = *(_ns1__Bye*)q;
}

void ns1__DiscoveryReferenceType::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default__wsa3__EndpointReference(soap, &this->ns1__DiscoveryReferenceType::wsa3__EndpointReference);
	this->ns1__DiscoveryReferenceType::Types = NULL;
	this->ns1__DiscoveryReferenceType::Scopes = NULL;
	soap_default_unsignedInt(soap, &this->ns1__DiscoveryReferenceType::MetadataVersion);
	soap_default_std__vectorTemplateOf_XML(soap, &this->ns1__DiscoveryReferenceType::__any);
	this->ns1__DiscoveryReferenceType::__anyAttribute = NULL;
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void ns1__DiscoveryReferenceType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize__wsa3__EndpointReference(soap, &this->ns1__DiscoveryReferenceType::wsa3__EndpointReference);
	soap_serialize_PointerTo_ns1__Types(soap, &this->ns1__DiscoveryReferenceType::Types);
	soap_serialize_PointerTo_ns1__Scopes(soap, &this->ns1__DiscoveryReferenceType::Scopes);
	soap_serialize_std__vectorTemplateOf_XML(soap, &this->ns1__DiscoveryReferenceType::__any);
	/* transient soap skipped */
}

int ns1__DiscoveryReferenceType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__DiscoveryReferenceType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DiscoveryReferenceType(struct soap *soap, const char *tag, int id, const ns1__DiscoveryReferenceType *a, const char *type)
{
	if (((ns1__DiscoveryReferenceType*)a)->__anyAttribute)
		soap_set_attr(soap, "-anyAttribute", ((ns1__DiscoveryReferenceType*)a)->__anyAttribute, 1);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__DiscoveryReferenceType), "ns1:DiscoveryReferenceType"))
		return soap->error;
	/* transient soap skipped */
	if (soap_out__wsa3__EndpointReference(soap, "wsa3:EndpointReference", -1, &(a->ns1__DiscoveryReferenceType::wsa3__EndpointReference), ""))
		return soap->error;
	if (soap_out_PointerTo_ns1__Types(soap, "ns1:Types", -1, &(a->ns1__DiscoveryReferenceType::Types), ""))
		return soap->error;
	if (soap_out_PointerTo_ns1__Scopes(soap, "ns1:Scopes", -1, &(a->ns1__DiscoveryReferenceType::Scopes), ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "ns1:MetadataVersion", -1, &(a->ns1__DiscoveryReferenceType::MetadataVersion), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOf_XML(soap, "-any", -1, &(a->ns1__DiscoveryReferenceType::__any), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__DiscoveryReferenceType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__DiscoveryReferenceType(soap, tag, this, type);
}

SOAP_FMAC3 ns1__DiscoveryReferenceType * SOAP_FMAC4 soap_in_ns1__DiscoveryReferenceType(struct soap *soap, const char *tag, ns1__DiscoveryReferenceType *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__DiscoveryReferenceType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__DiscoveryReferenceType, sizeof(ns1__DiscoveryReferenceType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__DiscoveryReferenceType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__DiscoveryReferenceType *)a->soap_in(soap, tag, type);
		}
	}
	if (soap_s2string(soap, soap_attr_value(soap, "-anyAttribute", 0), &((ns1__DiscoveryReferenceType*)a)->__anyAttribute, -1, -1))
		return NULL;
	size_t soap_flag___item2 = 1;
	size_t soap_flag_wsa3__EndpointReference1 = 1;
	size_t soap_flag_Types1 = 1;
	size_t soap_flag_Scopes1 = 1;
	size_t soap_flag_MetadataVersion1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap_flag_wsa3__EndpointReference1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in__wsa3__EndpointReference(soap, "wsa3:EndpointReference", &(a->ns1__DiscoveryReferenceType::wsa3__EndpointReference), ""))
				{	soap_flag_wsa3__EndpointReference1--;
					continue;
				}
			if (soap_flag_Types1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTo_ns1__Types(soap, "ns1:Types", &(a->ns1__DiscoveryReferenceType::Types), ""))
				{	soap_flag_Types1--;
					continue;
				}
			if (soap_flag_Scopes1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTo_ns1__Scopes(soap, "ns1:Scopes", &(a->ns1__DiscoveryReferenceType::Scopes), ""))
				{	soap_flag_Scopes1--;
					continue;
				}
			if (soap_flag_MetadataVersion1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "ns1:MetadataVersion", &(a->ns1__DiscoveryReferenceType::MetadataVersion), "xsd:unsignedInt"))
				{	soap_flag_MetadataVersion1--;
					continue;
				}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOf_XML(soap, "-any", &(a->ns1__DiscoveryReferenceType::__any), ""))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__DiscoveryReferenceType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__DiscoveryReferenceType, 0, sizeof(ns1__DiscoveryReferenceType), 0, soap_copy_ns1__DiscoveryReferenceType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_wsa3__EndpointReference1 > 0 || soap_flag_MetadataVersion1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns1__DiscoveryReferenceType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__DiscoveryReferenceType);
	if (this->soap_out(soap, tag?tag:"ns1:DiscoveryReferenceType", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__DiscoveryReferenceType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__DiscoveryReferenceType(soap, this, tag, type);
}

SOAP_FMAC3 ns1__DiscoveryReferenceType * SOAP_FMAC4 soap_get_ns1__DiscoveryReferenceType(struct soap *soap, ns1__DiscoveryReferenceType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__DiscoveryReferenceType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns1__DiscoveryReferenceType * SOAP_FMAC2 soap_instantiate_ns1__DiscoveryReferenceType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__DiscoveryReferenceType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__DiscoveryReferenceType, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns1__DiscoveryReferenceType);
		if (size)
			*size = sizeof(ns1__DiscoveryReferenceType);
		((ns1__DiscoveryReferenceType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(ns1__DiscoveryReferenceType[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__DiscoveryReferenceType);
		for (int i = 0; i < n; i++)
			((ns1__DiscoveryReferenceType*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__DiscoveryReferenceType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__DiscoveryReferenceType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__DiscoveryReferenceType %p -> %p\n", q, p));
	*(ns1__DiscoveryReferenceType*)p = *(ns1__DiscoveryReferenceType*)q;
}

void xsd__positiveInteger_::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_xsd__positiveInteger(soap, &this->xsd__positiveInteger_::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__positiveInteger_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__positiveInteger(soap, &this->xsd__positiveInteger_::__item);
	/* transient soap skipped */
}

int xsd__positiveInteger_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__positiveInteger_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__positiveInteger_(struct soap *soap, const char *tag, int id, const xsd__positiveInteger_ *a, const char *type)
{
	return soap_out_xsd__positiveInteger(soap, tag, id, &(a->xsd__positiveInteger_::__item), "xsd:positiveInteger");
}

void *xsd__positiveInteger_::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__positiveInteger_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__positiveInteger_ * SOAP_FMAC4 soap_in_xsd__positiveInteger_(struct soap *soap, const char *tag, xsd__positiveInteger_ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__positiveInteger_ *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__positiveInteger_, sizeof(xsd__positiveInteger_), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__positiveInteger_)
			return (xsd__positiveInteger_ *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_xsd__positiveInteger(soap, tag, &(a->xsd__positiveInteger_::__item), "xsd:positiveInteger"))
		return NULL;
	return a;
}

int xsd__positiveInteger_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__positiveInteger_);
	if (this->soap_out(soap, tag?tag:"xsd:positiveInteger", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__positiveInteger_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__positiveInteger_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__positiveInteger_ * SOAP_FMAC4 soap_get_xsd__positiveInteger_(struct soap *soap, xsd__positiveInteger_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__positiveInteger_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__positiveInteger_ * SOAP_FMAC2 soap_instantiate_xsd__positiveInteger_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__positiveInteger_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__positiveInteger_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__positiveInteger_);
		if (size)
			*size = sizeof(xsd__positiveInteger_);
		((xsd__positiveInteger_*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(xsd__positiveInteger_[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__positiveInteger_);
		for (int i = 0; i < n; i++)
			((xsd__positiveInteger_*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__positiveInteger_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__positiveInteger_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__positiveInteger_ %p -> %p\n", q, p));
	*(xsd__positiveInteger_*)p = *(xsd__positiveInteger_*)q;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__positiveInteger(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_xsd__positiveInteger), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__positiveInteger(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__positiveInteger, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if ((t = soap_string_in(soap, 1, -1, -1)))
				s->assign(t);
			else
				return NULL;
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__positiveInteger, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_xsd__positiveInteger, 0, sizeof(std::string), 0, soap_copy_xsd__positiveInteger);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__positiveInteger(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__positiveInteger);
	if (soap_out_xsd__positiveInteger(soap, tag?tag:"xsd:positiveInteger", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__positiveInteger(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__positiveInteger(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *p)
{	(void)soap; (void)p; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if ((t = soap_string_in(soap, 1, -1, -1)))
				s->assign(t);
			else
				return NULL;
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_std__string);
	if (soap_out_std__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::string);
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::string[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::string);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::string*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

void xsd__nonNegativeInteger::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_unsignedInt(soap, &this->xsd__nonNegativeInteger::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__nonNegativeInteger::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int xsd__nonNegativeInteger::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__nonNegativeInteger(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__nonNegativeInteger(struct soap *soap, const char *tag, int id, const xsd__nonNegativeInteger *a, const char *type)
{
	return soap_out_unsignedInt(soap, tag, id, &(a->xsd__nonNegativeInteger::__item), "xsd:nonNegativeInteger");
}

void *xsd__nonNegativeInteger::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__nonNegativeInteger(soap, tag, this, type);
}

SOAP_FMAC3 xsd__nonNegativeInteger * SOAP_FMAC4 soap_in_xsd__nonNegativeInteger(struct soap *soap, const char *tag, xsd__nonNegativeInteger *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__nonNegativeInteger *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__nonNegativeInteger, sizeof(xsd__nonNegativeInteger), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__nonNegativeInteger)
			return (xsd__nonNegativeInteger *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_unsignedInt(soap, tag, &(a->xsd__nonNegativeInteger::__item), "xsd:nonNegativeInteger"))
		return NULL;
	return a;
}

int xsd__nonNegativeInteger::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__nonNegativeInteger);
	if (this->soap_out(soap, tag?tag:"xsd:nonNegativeInteger", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__nonNegativeInteger::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__nonNegativeInteger(soap, this, tag, type);
}

SOAP_FMAC3 xsd__nonNegativeInteger * SOAP_FMAC4 soap_get_xsd__nonNegativeInteger(struct soap *soap, xsd__nonNegativeInteger *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__nonNegativeInteger(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__nonNegativeInteger * SOAP_FMAC2 soap_instantiate_xsd__nonNegativeInteger(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__nonNegativeInteger(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__nonNegativeInteger, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__nonNegativeInteger);
		if (size)
			*size = sizeof(xsd__nonNegativeInteger);
		((xsd__nonNegativeInteger*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(xsd__nonNegativeInteger[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__nonNegativeInteger);
		for (int i = 0; i < n; i++)
			((xsd__nonNegativeInteger*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__nonNegativeInteger*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__nonNegativeInteger(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__nonNegativeInteger %p -> %p\n", q, p));
	*(xsd__nonNegativeInteger*)p = *(xsd__nonNegativeInteger*)q;
}

void xsd__anyURI::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->xsd__anyURI::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__anyURI::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->xsd__anyURI::__item);
	/* transient soap skipped */
}

int xsd__anyURI::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__anyURI(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyURI(struct soap *soap, const char *tag, int id, const xsd__anyURI *a, const char *type)
{
	return soap_out_string(soap, tag, id, &(a->xsd__anyURI::__item), "xsd:anyURI");
}

void *xsd__anyURI::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__anyURI(soap, tag, this, type);
}

SOAP_FMAC3 xsd__anyURI * SOAP_FMAC4 soap_in_xsd__anyURI(struct soap *soap, const char *tag, xsd__anyURI *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__anyURI *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__anyURI, sizeof(xsd__anyURI), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__anyURI)
			return (xsd__anyURI *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_string(soap, tag, &(a->xsd__anyURI::__item), "xsd:anyURI"))
		return NULL;
	return a;
}

int xsd__anyURI::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__anyURI);
	if (this->soap_out(soap, tag?tag:"xsd:anyURI", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__anyURI::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__anyURI(soap, this, tag, type);
}

SOAP_FMAC3 xsd__anyURI * SOAP_FMAC4 soap_get_xsd__anyURI(struct soap *soap, xsd__anyURI *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__anyURI(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__anyURI * SOAP_FMAC2 soap_instantiate_xsd__anyURI(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__anyURI(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__anyURI, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__anyURI);
		if (size)
			*size = sizeof(xsd__anyURI);
		((xsd__anyURI*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(xsd__anyURI[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__anyURI);
		for (int i = 0; i < n; i++)
			((xsd__anyURI*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__anyURI*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__anyURI(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__anyURI %p -> %p\n", q, p));
	*(xsd__anyURI*)p = *(xsd__anyURI*)q;
}

void xsd__QName::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default__QName(soap, &this->xsd__QName::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__QName::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &this->xsd__QName::__item);
	/* transient soap skipped */
}

int xsd__QName::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__QName(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__QName(struct soap *soap, const char *tag, int id, const xsd__QName *a, const char *type)
{
	const char *soap_tmp___item = soap_QName2s(soap, a->__item);
	return soap_out__QName(soap, tag, id, (char*const*)&soap_tmp___item, "xsd:QName");
}

void *xsd__QName::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__QName(soap, tag, this, type);
}

SOAP_FMAC3 xsd__QName * SOAP_FMAC4 soap_in_xsd__QName(struct soap *soap, const char *tag, xsd__QName *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__QName *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__QName, sizeof(xsd__QName), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__QName)
			return (xsd__QName *)a->soap_in(soap, tag, type);
	}
	if (!soap_in__QName(soap, tag, &(a->xsd__QName::__item), "xsd:QName"))
		return NULL;
	return a;
}

int xsd__QName::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__QName);
	if (this->soap_out(soap, tag?tag:"xsd:QName", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__QName::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__QName(soap, this, tag, type);
}

SOAP_FMAC3 xsd__QName * SOAP_FMAC4 soap_get_xsd__QName(struct soap *soap, xsd__QName *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__QName * SOAP_FMAC2 soap_instantiate_xsd__QName(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__QName(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__QName, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__QName);
		if (size)
			*size = sizeof(xsd__QName);
		((xsd__QName*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(xsd__QName[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__QName);
		for (int i = 0; i < n; i++)
			((xsd__QName*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__QName*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__QName(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__QName %p -> %p\n", q, p));
	*(xsd__QName*)p = *(xsd__QName*)q;
}

void xsd__anyType::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__anyType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int xsd__anyType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__anyType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyType(struct soap *soap, const char *tag, int id, const xsd__anyType *a, const char *type)
{
	return soap_outliteral(soap, tag, &(a->xsd__anyType::__item), NULL);
}

void *xsd__anyType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__anyType(soap, tag, this, type);
}

SOAP_FMAC3 xsd__anyType * SOAP_FMAC4 soap_in_xsd__anyType(struct soap *soap, const char *tag, xsd__anyType *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__anyType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__anyType, sizeof(xsd__anyType), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__anyType)
			return (xsd__anyType *)a->soap_in(soap, tag, type);
	}
	if (!soap_inliteral(soap, tag, &(a->xsd__anyType::__item)))
		return NULL;
	return a;
}

int xsd__anyType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__anyType);
	if (this->soap_out(soap, tag?tag:"xsd:anyType", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__anyType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__anyType(soap, this, tag, type);
}

SOAP_FMAC3 xsd__anyType * SOAP_FMAC4 soap_get_xsd__anyType(struct soap *soap, xsd__anyType *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__anyType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__anyType * SOAP_FMAC2 soap_instantiate_xsd__anyType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__anyType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__anyType, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (type && !soap_match_tag(soap, type, "xsd:QName"))
	{	cp->type = SOAP_TYPE_xsd__QName;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(xsd__QName);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__QName);
			((xsd__QName*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(xsd__QName[n]);
			if (size)
				*size = n * sizeof(xsd__QName);
			for (int i = 0; i < n; i++)
				((xsd__QName*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__QName*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:anyURI"))
	{	cp->type = SOAP_TYPE_xsd__anyURI;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(xsd__anyURI);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__anyURI);
			((xsd__anyURI*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(xsd__anyURI[n]);
			if (size)
				*size = n * sizeof(xsd__anyURI);
			for (int i = 0; i < n; i++)
				((xsd__anyURI*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__anyURI*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:nonNegativeInteger"))
	{	cp->type = SOAP_TYPE_xsd__nonNegativeInteger;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(xsd__nonNegativeInteger);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__nonNegativeInteger);
			((xsd__nonNegativeInteger*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(xsd__nonNegativeInteger[n]);
			if (size)
				*size = n * sizeof(xsd__nonNegativeInteger);
			for (int i = 0; i < n; i++)
				((xsd__nonNegativeInteger*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__nonNegativeInteger*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:positiveInteger"))
	{	cp->type = SOAP_TYPE_xsd__positiveInteger_;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(xsd__positiveInteger_);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__positiveInteger_);
			((xsd__positiveInteger_*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(xsd__positiveInteger_[n]);
			if (size)
				*size = n * sizeof(xsd__positiveInteger_);
			for (int i = 0; i < n; i++)
				((xsd__positiveInteger_*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__positiveInteger_*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "ns1:DiscoveryReferenceType"))
	{	cp->type = SOAP_TYPE_ns1__DiscoveryReferenceType;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(ns1__DiscoveryReferenceType);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(ns1__DiscoveryReferenceType);
			((ns1__DiscoveryReferenceType*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(ns1__DiscoveryReferenceType[n]);
			if (size)
				*size = n * sizeof(ns1__DiscoveryReferenceType);
			for (int i = 0; i < n; i++)
				((ns1__DiscoveryReferenceType*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (ns1__DiscoveryReferenceType*)cp->ptr;
	}
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__anyType);
		if (size)
			*size = sizeof(xsd__anyType);
		((xsd__anyType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(xsd__anyType[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__anyType);
		for (int i = 0; i < n; i++)
			((xsd__anyType*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__anyType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__anyType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__anyType %p -> %p\n", q, p));
	*(xsd__anyType*)p = *(xsd__anyType*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__type = 0;
	a->fault = NULL;
	a->__any = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag_fault = 1;
	size_t soap_flag___any = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__wsa3__MessageID(soap, &a->wsa3__MessageID);
	a->wsa3__RelatesTo = NULL;
	a->wsa3__From = NULL;
	a->wsa3__ReplyTo = NULL;
	a->wsa3__FaultTo = NULL;
	soap_default__wsa3__To(soap, &a->wsa3__To);
	soap_default__wsa3__Action(soap, &a->wsa3__Action);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__wsa3__MessageID(soap, &a->wsa3__MessageID);
	soap_serialize_PointerTo_wsa3__RelatesTo(soap, &a->wsa3__RelatesTo);
	soap_serialize_PointerTo_wsa3__From(soap, &a->wsa3__From);
	soap_serialize_PointerTo_wsa3__ReplyTo(soap, &a->wsa3__ReplyTo);
	soap_serialize_PointerTo_wsa3__FaultTo(soap, &a->wsa3__FaultTo);
	soap_serialize__wsa3__To(soap, &a->wsa3__To);
	soap_serialize__wsa3__Action(soap, &a->wsa3__Action);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	if (soap_out__wsa3__MessageID(soap, "wsa3:MessageID", -1, &a->wsa3__MessageID, ""))
		return soap->error;
	if (soap_out_PointerTo_wsa3__RelatesTo(soap, "wsa3:RelatesTo", -1, &a->wsa3__RelatesTo, ""))
		return soap->error;
	if (soap_out_PointerTo_wsa3__From(soap, "wsa3:From", -1, &a->wsa3__From, ""))
		return soap->error;
	soap->mustUnderstand = 1;
	if (soap_out_PointerTo_wsa3__ReplyTo(soap, "wsa3:ReplyTo", -1, &a->wsa3__ReplyTo, ""))
		return soap->error;
	soap->mustUnderstand = 1;
	if (soap_out_PointerTo_wsa3__FaultTo(soap, "wsa3:FaultTo", -1, &a->wsa3__FaultTo, ""))
		return soap->error;
	soap->mustUnderstand = 1;
	if (soap_out__wsa3__To(soap, "wsa3:To", -1, &a->wsa3__To, ""))
		return soap->error;
	soap->mustUnderstand = 1;
	if (soap_out__wsa3__Action(soap, "wsa3:Action", -1, &a->wsa3__Action, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	size_t soap_flag_wsa3__MessageID = 1;
	size_t soap_flag_wsa3__RelatesTo = 1;
	size_t soap_flag_wsa3__From = 1;
	size_t soap_flag_wsa3__ReplyTo = 1;
	size_t soap_flag_wsa3__FaultTo = 1;
	size_t soap_flag_wsa3__To = 1;
	size_t soap_flag_wsa3__Action = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_wsa3__MessageID && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__wsa3__MessageID(soap, "wsa3:MessageID", &a->wsa3__MessageID, ""))
				{	soap_flag_wsa3__MessageID--;
					continue;
				}
			if (soap_flag_wsa3__RelatesTo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_wsa3__RelatesTo(soap, "wsa3:RelatesTo", &a->wsa3__RelatesTo, ""))
				{	soap_flag_wsa3__RelatesTo--;
					continue;
				}
			if (soap_flag_wsa3__From && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_wsa3__From(soap, "wsa3:From", &a->wsa3__From, ""))
				{	soap_flag_wsa3__From--;
					continue;
				}
			if (soap_flag_wsa3__ReplyTo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_wsa3__ReplyTo(soap, "wsa3:ReplyTo", &a->wsa3__ReplyTo, ""))
				{	soap_flag_wsa3__ReplyTo--;
					continue;
				}
			if (soap_flag_wsa3__FaultTo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_wsa3__FaultTo(soap, "wsa3:FaultTo", &a->wsa3__FaultTo, ""))
				{	soap_flag_wsa3__FaultTo--;
					continue;
				}
			if (soap_flag_wsa3__To && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__wsa3__To(soap, "wsa3:To", &a->wsa3__To, ""))
				{	soap_flag_wsa3__To--;
					continue;
				}
			if (soap_flag_wsa3__Action && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__wsa3__Action(soap, "wsa3:Action", &a->wsa3__Action, ""))
				{	soap_flag_wsa3__Action--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa3__Relationship(struct soap *soap, struct wsa3__Relationship *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->__item);
	soap_default__QName(soap, &a->RelationshipType);
	a->__anyAttribute = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa3__Relationship(struct soap *soap, const struct wsa3__Relationship *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->__item);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa3__Relationship(struct soap *soap, const char *tag, int id, const struct wsa3__Relationship *a, const char *type)
{
	if (a->RelationshipType)
		soap_set_attr(soap, "RelationshipType", soap_QName2s(soap, a->RelationshipType), 1);
	if (a->__anyAttribute)
		soap_set_attr(soap, "-anyAttribute", a->__anyAttribute, 1);
	return soap_out_string(soap, tag, id, &a->__item, "");
}

SOAP_FMAC3 struct wsa3__Relationship * SOAP_FMAC4 soap_in_wsa3__Relationship(struct soap *soap, const char *tag, struct wsa3__Relationship *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (struct wsa3__Relationship *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_wsa3__Relationship, sizeof(struct wsa3__Relationship), 0, NULL, NULL, NULL)))
		return NULL;
	soap_revert(soap);
	*soap->id = '\0';
	soap_default_wsa3__Relationship(soap, a);
	if (soap_s2QName(soap, soap_attr_value(soap, "RelationshipType", 0), &a->RelationshipType, -1, -1))
		return NULL;
	if (soap_s2string(soap, soap_attr_value(soap, "-anyAttribute", 0), &a->__anyAttribute, -1, -1))
		return NULL;
	if (!soap_in_string(soap, tag, &a->__item, "wsa3:Relationship"))
		return NULL;
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa3__Relationship(struct soap *soap, const struct wsa3__Relationship *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_wsa3__Relationship);
	if (soap_out_wsa3__Relationship(soap, tag?tag:"wsa3:Relationship", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct wsa3__Relationship * SOAP_FMAC4 soap_get_wsa3__Relationship(struct soap *soap, struct wsa3__Relationship *p, const char *tag, const char *type)
{
	if ((p = soap_in_wsa3__Relationship(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct wsa3__Relationship * SOAP_FMAC2 soap_instantiate_wsa3__Relationship(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_wsa3__Relationship(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_wsa3__Relationship, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct wsa3__Relationship);
		if (size)
			*size = sizeof(struct wsa3__Relationship);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct wsa3__Relationship[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct wsa3__Relationship);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct wsa3__Relationship*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsa3__Relationship(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct wsa3__Relationship %p -> %p\n", q, p));
	*(struct wsa3__Relationship*)p = *(struct wsa3__Relationship*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa3__ServiceNameType(struct soap *soap, struct wsa3__ServiceNameType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->__item);
	soap_default_string(soap, &a->PortName);
	a->__anyAttribute = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa3__ServiceNameType(struct soap *soap, const struct wsa3__ServiceNameType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->__item);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa3__ServiceNameType(struct soap *soap, const char *tag, int id, const struct wsa3__ServiceNameType *a, const char *type)
{
	const char *soap_tmp___item = soap_QName2s(soap, a->__item);
	if (a->PortName)
		soap_set_attr(soap, "PortName", a->PortName, 1);
	if (a->__anyAttribute)
		soap_set_attr(soap, "-anyAttribute", a->__anyAttribute, 1);
	return soap_out__QName(soap, tag, id, (char*const*)&soap_tmp___item, "");
}

SOAP_FMAC3 struct wsa3__ServiceNameType * SOAP_FMAC4 soap_in_wsa3__ServiceNameType(struct soap *soap, const char *tag, struct wsa3__ServiceNameType *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (struct wsa3__ServiceNameType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_wsa3__ServiceNameType, sizeof(struct wsa3__ServiceNameType), 0, NULL, NULL, NULL)))
		return NULL;
	soap_revert(soap);
	*soap->id = '\0';
	soap_default_wsa3__ServiceNameType(soap, a);
	if (soap_s2string(soap, soap_attr_value(soap, "PortName", 0), &a->PortName, -1, -1))
		return NULL;
	if (soap_s2string(soap, soap_attr_value(soap, "-anyAttribute", 0), &a->__anyAttribute, -1, -1))
		return NULL;
	if (!soap_in__QName(soap, tag, &a->__item, "wsa3:ServiceNameType"))
		return NULL;
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa3__ServiceNameType(struct soap *soap, const struct wsa3__ServiceNameType *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_wsa3__ServiceNameType);
	if (soap_out_wsa3__ServiceNameType(soap, tag?tag:"wsa3:ServiceNameType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct wsa3__ServiceNameType * SOAP_FMAC4 soap_get_wsa3__ServiceNameType(struct soap *soap, struct wsa3__ServiceNameType *p, const char *tag, const char *type)
{
	if ((p = soap_in_wsa3__ServiceNameType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct wsa3__ServiceNameType * SOAP_FMAC2 soap_instantiate_wsa3__ServiceNameType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_wsa3__ServiceNameType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_wsa3__ServiceNameType, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct wsa3__ServiceNameType);
		if (size)
			*size = sizeof(struct wsa3__ServiceNameType);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct wsa3__ServiceNameType[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct wsa3__ServiceNameType);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct wsa3__ServiceNameType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsa3__ServiceNameType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct wsa3__ServiceNameType %p -> %p\n", q, p));
	*(struct wsa3__ServiceNameType*)p = *(struct wsa3__ServiceNameType*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa3__ReferencePropertiesType(struct soap *soap, struct wsa3__ReferencePropertiesType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__size = 0;
	a->__any = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa3__ReferencePropertiesType(struct soap *soap, const struct wsa3__ReferencePropertiesType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa3__ReferencePropertiesType(struct soap *soap, const char *tag, int id, const struct wsa3__ReferencePropertiesType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_wsa3__ReferencePropertiesType), type))
		return soap->error;
	if (a->__any)
	{	int i;
		for (i = 0; i < a->__size; i++)
			soap_outliteral(soap, "-any", a->__any + i, NULL);
	}
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct wsa3__ReferencePropertiesType * SOAP_FMAC4 soap_in_wsa3__ReferencePropertiesType(struct soap *soap, const char *tag, struct wsa3__ReferencePropertiesType *a, const char *type)
{
	struct soap_blist *soap_blist___any = NULL;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct wsa3__ReferencePropertiesType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_wsa3__ReferencePropertiesType, sizeof(struct wsa3__ReferencePropertiesType), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_wsa3__ReferencePropertiesType(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_peek_element(soap))
			{	if (a->__any == NULL)
				{	if (soap_blist___any == NULL)
						soap_blist___any = soap_new_block(soap);
					a->__any = (char **)soap_push_block(soap, soap_blist___any, sizeof(char *));
					if (a->__any == NULL)
						return NULL;
					*a->__any = NULL;
				}
				if (soap_inliteral(soap, "-any", a->__any))
				{	a->__size++;
					a->__any = NULL;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->__any)
			soap_pop_block(soap, soap_blist___any);
		if (a->__size)
			a->__any = (char **)soap_save_block(soap, soap_blist___any, NULL, 1);
		else
		{	a->__any = NULL;
			if (soap_blist___any)
				soap_end_block(soap, soap_blist___any);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct wsa3__ReferencePropertiesType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_wsa3__ReferencePropertiesType, 0, sizeof(struct wsa3__ReferencePropertiesType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa3__ReferencePropertiesType(struct soap *soap, const struct wsa3__ReferencePropertiesType *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_wsa3__ReferencePropertiesType);
	if (soap_out_wsa3__ReferencePropertiesType(soap, tag?tag:"wsa3:ReferencePropertiesType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct wsa3__ReferencePropertiesType * SOAP_FMAC4 soap_get_wsa3__ReferencePropertiesType(struct soap *soap, struct wsa3__ReferencePropertiesType *p, const char *tag, const char *type)
{
	if ((p = soap_in_wsa3__ReferencePropertiesType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct wsa3__ReferencePropertiesType * SOAP_FMAC2 soap_instantiate_wsa3__ReferencePropertiesType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_wsa3__ReferencePropertiesType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_wsa3__ReferencePropertiesType, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct wsa3__ReferencePropertiesType);
		if (size)
			*size = sizeof(struct wsa3__ReferencePropertiesType);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct wsa3__ReferencePropertiesType[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct wsa3__ReferencePropertiesType);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct wsa3__ReferencePropertiesType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsa3__ReferencePropertiesType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct wsa3__ReferencePropertiesType %p -> %p\n", q, p));
	*(struct wsa3__ReferencePropertiesType*)p = *(struct wsa3__ReferencePropertiesType*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa3__EndpointReferenceType(struct soap *soap, struct wsa3__EndpointReferenceType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->Address);
	a->ReferenceProperties = NULL;
	a->PortType = NULL;
	a->ServiceName = NULL;
	a->__size = 0;
	a->__any = NULL;
	a->__anyAttribute = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa3__EndpointReferenceType(struct soap *soap, const struct wsa3__EndpointReferenceType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->Address);
	soap_serialize_PointerTowsa3__ReferencePropertiesType(soap, &a->ReferenceProperties);
	soap_serialize_PointerTo_QName(soap, &a->PortType);
	soap_serialize_PointerTowsa3__ServiceNameType(soap, &a->ServiceName);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa3__EndpointReferenceType(struct soap *soap, const char *tag, int id, const struct wsa3__EndpointReferenceType *a, const char *type)
{
	const char *soap_tmp_PortType = a->PortType ? soap_QName2s(soap, *a->PortType) : NULL;
	if (a->__anyAttribute)
		soap_set_attr(soap, "-anyAttribute", a->__anyAttribute, 1);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_wsa3__EndpointReferenceType), type))
		return soap->error;
	if (a->Address)
	{	if (soap_out_string(soap, "wsa3:Address", -1, &a->Address, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "wsa3:Address"))
		return soap->error;
	if (soap_out_PointerTowsa3__ReferencePropertiesType(soap, "wsa3:ReferenceProperties", -1, &a->ReferenceProperties, ""))
		return soap->error;
	if (soap_out__QName(soap, "wsa3:PortType", -1, (char*const*)&soap_tmp_PortType, ""))
		return soap->error;
	if (soap_out_PointerTowsa3__ServiceNameType(soap, "wsa3:ServiceName", -1, &a->ServiceName, ""))
		return soap->error;
	if (a->__any)
	{	int i;
		for (i = 0; i < a->__size; i++)
			soap_outliteral(soap, "-any", a->__any + i, NULL);
	}
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct wsa3__EndpointReferenceType * SOAP_FMAC4 soap_in_wsa3__EndpointReferenceType(struct soap *soap, const char *tag, struct wsa3__EndpointReferenceType *a, const char *type)
{
	size_t soap_flag_Address = 1;
	size_t soap_flag_ReferenceProperties = 1;
	size_t soap_flag_PortType = 1;
	size_t soap_flag_ServiceName = 1;
	struct soap_blist *soap_blist___any = NULL;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct wsa3__EndpointReferenceType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_wsa3__EndpointReferenceType, sizeof(struct wsa3__EndpointReferenceType), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_wsa3__EndpointReferenceType(soap, a);
	if (soap_s2string(soap, soap_attr_value(soap, "-anyAttribute", 0), &a->__anyAttribute, -1, -1))
		return NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Address && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "wsa3:Address", &a->Address, "xsd:string"))
				{	soap_flag_Address--;
					continue;
				}
			if (soap_flag_ReferenceProperties && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTowsa3__ReferencePropertiesType(soap, "wsa3:ReferenceProperties", &a->ReferenceProperties, "wsa3:ReferencePropertiesType"))
				{	soap_flag_ReferenceProperties--;
					continue;
				}
			if (soap_flag_PortType && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_QName(soap, "wsa3:PortType", &a->PortType, ""))
				{	soap_flag_PortType--;
					continue;
				}
			if (soap_flag_ServiceName && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTowsa3__ServiceNameType(soap, "wsa3:ServiceName", &a->ServiceName, "wsa3:ServiceNameType"))
				{	soap_flag_ServiceName--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH && !soap_peek_element(soap))
			{	if (a->__any == NULL)
				{	if (soap_blist___any == NULL)
						soap_blist___any = soap_new_block(soap);
					a->__any = (char **)soap_push_block(soap, soap_blist___any, sizeof(char *));
					if (a->__any == NULL)
						return NULL;
					*a->__any = NULL;
				}
				if (soap_inliteral(soap, "-any", a->__any))
				{	a->__size++;
					a->__any = NULL;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->__any)
			soap_pop_block(soap, soap_blist___any);
		if (a->__size)
			a->__any = (char **)soap_save_block(soap, soap_blist___any, NULL, 1);
		else
		{	a->__any = NULL;
			if (soap_blist___any)
				soap_end_block(soap, soap_blist___any);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct wsa3__EndpointReferenceType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_wsa3__EndpointReferenceType, 0, sizeof(struct wsa3__EndpointReferenceType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Address > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa3__EndpointReferenceType(struct soap *soap, const struct wsa3__EndpointReferenceType *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_wsa3__EndpointReferenceType);
	if (soap_out_wsa3__EndpointReferenceType(soap, tag?tag:"wsa3:EndpointReferenceType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct wsa3__EndpointReferenceType * SOAP_FMAC4 soap_get_wsa3__EndpointReferenceType(struct soap *soap, struct wsa3__EndpointReferenceType *p, const char *tag, const char *type)
{
	if ((p = soap_in_wsa3__EndpointReferenceType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct wsa3__EndpointReferenceType * SOAP_FMAC2 soap_instantiate_wsa3__EndpointReferenceType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_wsa3__EndpointReferenceType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_wsa3__EndpointReferenceType, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct wsa3__EndpointReferenceType);
		if (size)
			*size = sizeof(struct wsa3__EndpointReferenceType);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct wsa3__EndpointReferenceType[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct wsa3__EndpointReferenceType);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct wsa3__EndpointReferenceType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_wsa3__EndpointReferenceType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct wsa3__EndpointReferenceType %p -> %p\n", q, p));
	*(struct wsa3__EndpointReferenceType*)p = *(struct wsa3__EndpointReferenceType*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__Scope(struct soap *soap, _ns1__Scope *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__Scope))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__Scope(struct soap *soap, const char *tag, int id, _ns1__Scope *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__Scope);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__Scope ** SOAP_FMAC4 soap_in_PointerTo_ns1__Scope(struct soap *soap, const char *tag, _ns1__Scope **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__Scope **)soap_malloc(soap, sizeof(_ns1__Scope *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__Scope *)soap_instantiate__ns1__Scope(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__Scope ** p = (_ns1__Scope **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__Scope, sizeof(_ns1__Scope), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__Scope(struct soap *soap, _ns1__Scope *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__Scope);
	if (soap_out_PointerTo_ns1__Scope(soap, tag?tag:"ns1:Scope", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__Scope ** SOAP_FMAC4 soap_get_PointerTo_ns1__Scope(struct soap *soap, _ns1__Scope **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__Scope(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__Scopes(struct soap *soap, std::string *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__Scopes))
		soap_serialize__ns1__Scopes(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__Scopes(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__Scopes);
	if (id < 0)
		return soap->error;
	return soap_out__ns1__Scopes(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTo_ns1__Scopes(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in__ns1__Scopes(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__Scopes, sizeof(std::string), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__Scopes(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__Scopes);
	if (soap_out_PointerTo_ns1__Scopes(soap, tag?tag:"ns1:Scopes", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTo_ns1__Scopes(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__Scopes(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__Types(struct soap *soap, std::string *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__Types))
		soap_serialize__ns1__Types(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__Types(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__Types);
	if (id < 0)
		return soap->error;
	return soap_out__ns1__Types(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTo_ns1__Types(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in__ns1__Types(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__Types, sizeof(std::string), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__Types(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__Types);
	if (soap_out_PointerTo_ns1__Types(soap, tag?tag:"ns1:Types", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTo_ns1__Types(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__Types(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsa3__FaultTo(struct soap *soap, struct wsa3__EndpointReferenceType *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__wsa3__FaultTo))
		soap_serialize__wsa3__FaultTo(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsa3__FaultTo(struct soap *soap, const char *tag, int id, struct wsa3__EndpointReferenceType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__wsa3__FaultTo);
	if (id < 0)
		return soap->error;
	return soap_out__wsa3__FaultTo(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct wsa3__EndpointReferenceType ** SOAP_FMAC4 soap_in_PointerTo_wsa3__FaultTo(struct soap *soap, const char *tag, struct wsa3__EndpointReferenceType **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct wsa3__EndpointReferenceType **)soap_malloc(soap, sizeof(struct wsa3__EndpointReferenceType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in__wsa3__FaultTo(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct wsa3__EndpointReferenceType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__wsa3__FaultTo, sizeof(struct wsa3__EndpointReferenceType), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsa3__FaultTo(struct soap *soap, struct wsa3__EndpointReferenceType *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_wsa3__FaultTo);
	if (soap_out_PointerTo_wsa3__FaultTo(soap, tag?tag:"wsa3:FaultTo", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct wsa3__EndpointReferenceType ** SOAP_FMAC4 soap_get_PointerTo_wsa3__FaultTo(struct soap *soap, struct wsa3__EndpointReferenceType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_wsa3__FaultTo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsa3__ReplyTo(struct soap *soap, struct wsa3__EndpointReferenceType *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__wsa3__ReplyTo))
		soap_serialize__wsa3__ReplyTo(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsa3__ReplyTo(struct soap *soap, const char *tag, int id, struct wsa3__EndpointReferenceType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__wsa3__ReplyTo);
	if (id < 0)
		return soap->error;
	return soap_out__wsa3__ReplyTo(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct wsa3__EndpointReferenceType ** SOAP_FMAC4 soap_in_PointerTo_wsa3__ReplyTo(struct soap *soap, const char *tag, struct wsa3__EndpointReferenceType **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct wsa3__EndpointReferenceType **)soap_malloc(soap, sizeof(struct wsa3__EndpointReferenceType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in__wsa3__ReplyTo(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct wsa3__EndpointReferenceType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__wsa3__ReplyTo, sizeof(struct wsa3__EndpointReferenceType), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsa3__ReplyTo(struct soap *soap, struct wsa3__EndpointReferenceType *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_wsa3__ReplyTo);
	if (soap_out_PointerTo_wsa3__ReplyTo(soap, tag?tag:"wsa3:ReplyTo", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct wsa3__EndpointReferenceType ** SOAP_FMAC4 soap_get_PointerTo_wsa3__ReplyTo(struct soap *soap, struct wsa3__EndpointReferenceType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_wsa3__ReplyTo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsa3__From(struct soap *soap, struct wsa3__EndpointReferenceType *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__wsa3__From))
		soap_serialize__wsa3__From(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsa3__From(struct soap *soap, const char *tag, int id, struct wsa3__EndpointReferenceType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__wsa3__From);
	if (id < 0)
		return soap->error;
	return soap_out__wsa3__From(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct wsa3__EndpointReferenceType ** SOAP_FMAC4 soap_in_PointerTo_wsa3__From(struct soap *soap, const char *tag, struct wsa3__EndpointReferenceType **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct wsa3__EndpointReferenceType **)soap_malloc(soap, sizeof(struct wsa3__EndpointReferenceType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in__wsa3__From(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct wsa3__EndpointReferenceType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__wsa3__From, sizeof(struct wsa3__EndpointReferenceType), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsa3__From(struct soap *soap, struct wsa3__EndpointReferenceType *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_wsa3__From);
	if (soap_out_PointerTo_wsa3__From(soap, tag?tag:"wsa3:From", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct wsa3__EndpointReferenceType ** SOAP_FMAC4 soap_get_PointerTo_wsa3__From(struct soap *soap, struct wsa3__EndpointReferenceType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_wsa3__From(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsa3__RelatesTo(struct soap *soap, struct wsa3__Relationship *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__wsa3__RelatesTo))
		soap_serialize__wsa3__RelatesTo(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsa3__RelatesTo(struct soap *soap, const char *tag, int id, struct wsa3__Relationship *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__wsa3__RelatesTo);
	if (id < 0)
		return soap->error;
	return soap_out__wsa3__RelatesTo(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct wsa3__Relationship ** SOAP_FMAC4 soap_in_PointerTo_wsa3__RelatesTo(struct soap *soap, const char *tag, struct wsa3__Relationship **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct wsa3__Relationship **)soap_malloc(soap, sizeof(struct wsa3__Relationship *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in__wsa3__RelatesTo(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct wsa3__Relationship **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__wsa3__RelatesTo, sizeof(struct wsa3__Relationship), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsa3__RelatesTo(struct soap *soap, struct wsa3__Relationship *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_wsa3__RelatesTo);
	if (soap_out_PointerTo_wsa3__RelatesTo(soap, tag?tag:"wsa3:RelatesTo", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct wsa3__Relationship ** SOAP_FMAC4 soap_get_PointerTo_wsa3__RelatesTo(struct soap *soap, struct wsa3__Relationship **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_wsa3__RelatesTo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsa3__ServiceNameType(struct soap *soap, struct wsa3__ServiceNameType *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_wsa3__ServiceNameType))
		soap_serialize_wsa3__ServiceNameType(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsa3__ServiceNameType(struct soap *soap, const char *tag, int id, struct wsa3__ServiceNameType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_wsa3__ServiceNameType);
	if (id < 0)
		return soap->error;
	return soap_out_wsa3__ServiceNameType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct wsa3__ServiceNameType ** SOAP_FMAC4 soap_in_PointerTowsa3__ServiceNameType(struct soap *soap, const char *tag, struct wsa3__ServiceNameType **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct wsa3__ServiceNameType **)soap_malloc(soap, sizeof(struct wsa3__ServiceNameType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_wsa3__ServiceNameType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct wsa3__ServiceNameType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_wsa3__ServiceNameType, sizeof(struct wsa3__ServiceNameType), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsa3__ServiceNameType(struct soap *soap, struct wsa3__ServiceNameType *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTowsa3__ServiceNameType);
	if (soap_out_PointerTowsa3__ServiceNameType(soap, tag?tag:"wsa3:ServiceNameType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct wsa3__ServiceNameType ** SOAP_FMAC4 soap_get_PointerTowsa3__ServiceNameType(struct soap *soap, struct wsa3__ServiceNameType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowsa3__ServiceNameType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_QName(struct soap *soap, char **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__QName))
		soap_serialize__QName(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_QName(struct soap *soap, const char *tag, int id, char **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__QName);
	if (id < 0)
		return soap->error;
	return soap_out__QName(soap, tag, id, *a, type);
}

SOAP_FMAC3 char *** SOAP_FMAC4 soap_in_PointerTo_QName(struct soap *soap, const char *tag, char ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (char ***)soap_malloc(soap, sizeof(char **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in__QName(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (char ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__QName, sizeof(char *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_QName(struct soap *soap, char **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_QName);
	if (soap_out_PointerTo_QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char *** SOAP_FMAC4 soap_get_PointerTo_QName(struct soap *soap, char ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsa3__ReferencePropertiesType(struct soap *soap, struct wsa3__ReferencePropertiesType *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_wsa3__ReferencePropertiesType))
		soap_serialize_wsa3__ReferencePropertiesType(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsa3__ReferencePropertiesType(struct soap *soap, const char *tag, int id, struct wsa3__ReferencePropertiesType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_wsa3__ReferencePropertiesType);
	if (id < 0)
		return soap->error;
	return soap_out_wsa3__ReferencePropertiesType(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct wsa3__ReferencePropertiesType ** SOAP_FMAC4 soap_in_PointerTowsa3__ReferencePropertiesType(struct soap *soap, const char *tag, struct wsa3__ReferencePropertiesType **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct wsa3__ReferencePropertiesType **)soap_malloc(soap, sizeof(struct wsa3__ReferencePropertiesType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_wsa3__ReferencePropertiesType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct wsa3__ReferencePropertiesType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_wsa3__ReferencePropertiesType, sizeof(struct wsa3__ReferencePropertiesType), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsa3__ReferencePropertiesType(struct soap *soap, struct wsa3__ReferencePropertiesType *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTowsa3__ReferencePropertiesType);
	if (soap_out_PointerTowsa3__ReferencePropertiesType(soap, tag?tag:"wsa3:ReferencePropertiesType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct wsa3__ReferencePropertiesType ** SOAP_FMAC4 soap_get_PointerTowsa3__ReferencePropertiesType(struct soap *soap, struct wsa3__ReferencePropertiesType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTowsa3__ReferencePropertiesType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, -1, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, -1, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_XML(struct soap *soap, std::vector<char * >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_XML(struct soap *soap, const std::vector<char * >*a)
{
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_XML(struct soap *soap, const char *tag, int id, const std::vector<char * >*a, const char *type)
{
	for (std::vector<char * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_outliteral(soap, tag, &(*i), NULL))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<char * >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_XML(struct soap *soap, const char *tag, std::vector<char * >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOf_XML(soap, -1)))
		return NULL;
	char *n;
	short soap_flag = 0;
	do
	{	if (tag && *tag != '-')
			soap_revert(soap);
		n = NULL;
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE__XML, SOAP_TYPE_std__vectorTemplateOf_XML, sizeof(char *), 1))
				break;
			if (!soap_inliteral(soap, tag, NULL))
				break;
		}
		else
		{
			if (!soap_inliteral(soap, tag, &n))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (tag && *tag != '-' && !soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<char * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_XML(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOf_XML(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOf_XML, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<char * >);
		if (size)
			*size = sizeof(std::vector<char * >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::vector<char * >[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<char * >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<char * >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_XML(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<char * > %p -> %p\n", q, p));
	*(std::vector<char * >*)p = *(std::vector<char * >*)q;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
