/* WS-Discovery.h
   Generated by wsdl2h 2.8.0 from WS-Discovery.wsdl and WS-typemap.dat
   2010-11-06 09:07:14 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

   gSOAP XML Web services tools.
   Copyright (C) 2001-2010 Robert van Engelen, Genivia Inc. All Rights Reserved.
   Part of this software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/** @page page_notes Usage Notes

NOTE:

 - Run soapcpp2 on WS-Discovery.h to generate the SOAP/XML processing logic.
   Use soapcpp2 option -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
   Use soapcpp2 option -i to generate improved proxy and server classes.
 - Use wsdl2h options -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h options -nname and -Nname to globally rename the prefix 'ns'.
 - Use wsdl2h option -d to enable DOM support for xsd:anyType.
 - Use wsdl2h option -g to auto-generate readers and writers for root elements.
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

WARNING:

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS.
   USE THE SOURCE CODE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT BUILDS:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

LICENSE:

@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.

This software is released under one of the following two licenses:
1) GPL or 2) Genivia's license for commercial use.
--------------------------------------------------------------------------------
1) GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org
--------------------------------------------------------------------------------
2) A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://schemas.xmlsoap.org/ws/2004/02/discovery                          *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


// STL vector containers (use option -s to remove STL dependency)
#import "stlvector.h"
#import "wsa3.h"	// wsa3 = <http://schemas.xmlsoap.org/ws/2003/03/addressing>

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "http://schemas.xmlsoap.org/ws/2004/02/discovery"
ns2 = ""

*/

#define SOAP_NAMESPACE_OF_ns2	""
//gsoap ns2   schema namespace:	
//gsoap ns2   schema form:	unqualified

#define SOAP_NAMESPACE_OF_ns1	"http://schemas.xmlsoap.org/ws/2004/02/discovery"
//gsoap ns1   schema namespace:	http://schemas.xmlsoap.org/ws/2004/02/discovery
//gsoap ns1   schema elementForm:	qualified
//gsoap ns1   schema attributeForm:	unqualified
class xsd__anyType { _XML __item; struct soap *soap; };

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/


/// Class wrapper for built-in type "xs:QName" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__QName to check runtime type (see soapStub.h)
class xsd__QName : public xsd__anyType
{ public:
    _QName                               __item;                       
};

/// Class wrapper for built-in type "xs:anyURI" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__anyURI to check runtime type (see soapStub.h)
class xsd__anyURI : public xsd__anyType
{ public:
    char*                                __item;                       
};

/// Class wrapper for built-in type "xs:nonNegativeInteger" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__nonNegativeInteger to check runtime type (see soapStub.h)
class xsd__nonNegativeInteger : public xsd__anyType
{ public:
    unsigned int                         __item;                       
};

/// Primitive built-in type "xs:positiveInteger"
typedef std::string xsd__positiveInteger;

/// Class wrapper for built-in type "xs:positiveInteger" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__positiveInteger_ to check runtime type (see soapStub.h)
class xsd__positiveInteger_ : public xsd__anyType
{ public:
    xsd__positiveInteger                 __item;                       
};

// Imported element "http://schemas.xmlsoap.org/ws/2003/03/addressing":EndpointReference declared as _wsa3__EndpointReference

/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/



//  Forward declaration of class ns1__DiscoveryReferenceType.
class ns1__DiscoveryReferenceType;

//  Forward declaration of class _ns1__Bye.
class _ns1__Bye;

//  Forward declaration of class _ns1__Probe.
class _ns1__Probe;

//  Forward declaration of class _ns1__Scope.
class _ns1__Scope;

//  Forward declaration of class _ns1__AppSequence.
class _ns1__AppSequence;

//  Forward declaration of class _ns1__SoapHttpRequestReplyAddress.
class _ns1__SoapHttpRequestReplyAddress;

/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://schemas.xmlsoap.org/ws/2004/02/discovery                          *
 *                                                                            *
\******************************************************************************/


/// "http://schemas.xmlsoap.org/ws/2004/02/discovery":Types is a simpleType containing a whitespace separated list of xs:QName.
typedef std::string _ns1__Types;

/// "http://schemas.xmlsoap.org/ws/2004/02/discovery":Scopes is a simpleType containing a whitespace separated list of xs:anyURI.
typedef std::string _ns1__Scopes;

/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://schemas.xmlsoap.org/ws/2004/02/discovery                          *
 *                                                                            *
\******************************************************************************/


/// "http://schemas.xmlsoap.org/ws/2004/02/discovery":DiscoveryReferenceType is a complexType.
class ns1__DiscoveryReferenceType : public xsd__anyType
{ public:
/// Imported element reference "http://schemas.xmlsoap.org/ws/2003/03/addressing":EndpointReference.
    _wsa3__EndpointReference             wsa3__EndpointReference        1;	///< Required element.
/// Element reference "http://schemas.xmlsoap.org/ws/2004/02/discovery":Types.
    _ns1__Types*                         Types                          0;	///< Optional element.
/// Element reference "http://schemas.xmlsoap.org/ws/2004/02/discovery":Scopes.
    _ns1__Scopes*                        Scopes                         0;	///< Optional element.
/// Element reference "http://schemas.xmlsoap.org/ws/2004/02/discovery":MetadataVersion.
    unsigned int                         MetadataVersion                1;	///< Required element.
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##other">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};


/// Top-level root element "http://schemas.xmlsoap.org/ws/2004/02/discovery":Bye

/// "http://schemas.xmlsoap.org/ws/2004/02/discovery":Bye is a complexType.
class _ns1__Bye
{ public:
/// Imported element reference "http://schemas.xmlsoap.org/ws/2003/03/addressing":EndpointReference.
    _wsa3__EndpointReference             wsa3__EndpointReference        1;	///< Required element.
/// TODO: <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##other">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://schemas.xmlsoap.org/ws/2004/02/discovery":Probe

/// "http://schemas.xmlsoap.org/ws/2004/02/discovery":Probe is a complexType.
class _ns1__Probe
{ public:
/// Element reference "http://schemas.xmlsoap.org/ws/2004/02/discovery":Types.
    _ns1__Types*                         Types                          0;	///< Optional element.
/// Element reference "http://schemas.xmlsoap.org/ws/2004/02/discovery":Scope.
    _ns1__Scope*                         Scope                          0;	///< Optional element.
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
    std::vector<_XML                   > __any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##other">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://schemas.xmlsoap.org/ws/2004/02/discovery":Scope

/// "http://schemas.xmlsoap.org/ws/2004/02/discovery":Scope is a complexType with simpleContent.
class _ns1__Scope
{ public:
/// __item wraps 'xs:anyURI' simpleContent.
    char*                                __item                        ;
/// Attribute MatchBy of type xs:anyURI.
   @char*                                MatchBy                        0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://schemas.xmlsoap.org/ws/2004/02/discovery":AppSequence

/// "http://schemas.xmlsoap.org/ws/2004/02/discovery":AppSequence is a complexType with complexContent restriction of xs:anyType.
class _ns1__AppSequence
{ public:
/// Attribute InstanceId of type xs:positiveInteger.
   @xsd__positiveInteger                 InstanceId                     1;	///< Required attribute.
/// Attribute SequenceId of type xs:anyURI.
   @char*                                SequenceId                     0;	///< Optional attribute.
/// Attribute MessageNumber of type xs:positiveInteger.
   @xsd__positiveInteger                 MessageNumber                  1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://schemas.xmlsoap.org/ws/2004/02/discovery":SoapHttpRequestReplyAddress

/// "http://schemas.xmlsoap.org/ws/2004/02/discovery":SoapHttpRequestReplyAddress is a complexType with simpleContent.
class _ns1__SoapHttpRequestReplyAddress
{ public:
/// __item wraps 'xs:anyURI' simpleContent.
    char*                                __item                        ;
/// <anyAttribute namespace="##other">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://schemas.xmlsoap.org/ws/2004/02/discovery                          *
 *                                                                            *
\******************************************************************************/


/// Top-level root element "http://schemas.xmlsoap.org/ws/2004/02/discovery":Hello of type "http://schemas.xmlsoap.org/ws/2004/02/discovery":DiscoveryReferenceType.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.xmlsoap.org/ws/2004/02/discovery":ProbeMatch of type "http://schemas.xmlsoap.org/ws/2004/02/discovery":DiscoveryReferenceType.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.xmlsoap.org/ws/2004/02/discovery":ResolveMatch of type "http://schemas.xmlsoap.org/ws/2004/02/discovery":DiscoveryReferenceType.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.xmlsoap.org/ws/2004/02/discovery":MetadataVersion of type xs:nonNegativeInteger.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://schemas.xmlsoap.org/ws/2004/02/discovery                          *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

XML content can be retrieved from:
  - a file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->is = ...
  - a buffer, using the soap->frecv() callback

XML content can be stored to:
  - a file descriptor, using soap->sendfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->os = ...
  - a buffer, using the soap->fsend() callback


@section ns2 Top-level root elements of schema ""

@section ns1 Top-level root elements of schema "http://schemas.xmlsoap.org/ws/2004/02/discovery"

  - <ns1:Hello> (use wsdl2h option -g to auto-generate)

  - <ns1:Bye> @ref _ns1__Bye
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__Bye(struct soap*, _ns1__Bye*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__Bye(struct soap*, _ns1__Bye*);
    @endcode

  - <ns1:Probe> @ref _ns1__Probe
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__Probe(struct soap*, _ns1__Probe*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__Probe(struct soap*, _ns1__Probe*);
    @endcode

  - <ns1:ProbeMatch> (use wsdl2h option -g to auto-generate)

  - <ns1:ResolveMatch> (use wsdl2h option -g to auto-generate)

  - <ns1:Types> @ref _ns1__Types
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__Types(struct soap*, _ns1__Types*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__Types(struct soap*, _ns1__Types*);
    @endcode

  - <ns1:Scope> @ref _ns1__Scope
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__Scope(struct soap*, _ns1__Scope*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__Scope(struct soap*, _ns1__Scope*);
    @endcode

  - <ns1:Scopes> @ref _ns1__Scopes
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__Scopes(struct soap*, _ns1__Scopes*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__Scopes(struct soap*, _ns1__Scopes*);
    @endcode

  - <ns1:MetadataVersion> (use wsdl2h option -g to auto-generate)

  - <ns1:AppSequence> @ref _ns1__AppSequence
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__AppSequence(struct soap*, _ns1__AppSequence*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__AppSequence(struct soap*, _ns1__AppSequence*);
    @endcode

  - <ns1:SoapHttpRequestReplyAddress> @ref _ns1__SoapHttpRequestReplyAddress
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SoapHttpRequestReplyAddress(struct soap*, _ns1__SoapHttpRequestReplyAddress*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SoapHttpRequestReplyAddress(struct soap*, _ns1__SoapHttpRequestReplyAddress*);
    @endcode

*/

/* End of WS-Discovery.h */
