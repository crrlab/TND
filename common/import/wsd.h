/* /home/paperboy/synology/ws4d-gsoap/ws4d-gsoap-build/WS/wsd.h.tmp
   Generated by wsdl2h 2.8.0 from /home/paperboy/synology/ws4d-gsoap/ws4d-gsoap-build/WS/wsd.xsd and /home/paperboy/synology/ws4d-gsoap/ws4d-gsoap-build/WS/DPWS-typemap.dat
   2010-11-12 11:08:46 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

   gSOAP XML Web services tools.
   Copyright (C) 2001-2010 Robert van Engelen, Genivia Inc. All Rights Reserved.
   Part of this software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/** @page page_notes Usage Notes

NOTE:

 - Run soapcpp2 on /home/paperboy/synology/ws4d-gsoap/ws4d-gsoap-build/WS/wsd.h.tmp to generate the SOAP/XML processing logic.
   Use soapcpp2 option -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
   Use soapcpp2 option -i to generate improved proxy and server classes.
 - Use wsdl2h options -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h options -nname and -Nname to globally rename the prefix 'ns'.
 - Use wsdl2h option -d to enable DOM support for xsd:anyType.
 - Use wsdl2h option -g to auto-generate readers and writers for root elements.
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

WARNING:

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS.
   USE THE SOURCE CODE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT BUILDS:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

LICENSE:

@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.

This software is released under one of the following two licenses:
1) GPL or 2) Genivia's license for commercial use.
--------------------------------------------------------------------------------
1) GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org
--------------------------------------------------------------------------------
2) A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/



/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://schemas.xmlsoap.org/ws/2005/04/discovery                          *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/

#import "xsd.h"	// import primitive XSD types.
#import "wsa.h"	// wsa = <http://schemas.xmlsoap.org/ws/2004/08/addressing>

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

wsd = "http://schemas.xmlsoap.org/ws/2005/04/discovery"

*/

#define SOAP_NAMESPACE_OF_wsd	"http://schemas.xmlsoap.org/ws/2005/04/discovery"
//gsoap wsd   schema namespace:	http://schemas.xmlsoap.org/ws/2005/04/discovery
//gsoap wsd   schema elementForm:	qualified
//gsoap wsd   schema attributeForm:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/


//  xsd.h: typemap override of type xsd__ID with char* 

//  xsd.h: should define type xsd__IDREFS

//  xsd.h: typemap override of type xsd__QName with _QName

//  xsd.h: typemap override of type xsd__anyType with _XML

//  xsd.h: typemap override of type xsd__anyURI with char* 

//  xsd.h: typemap override of type xsd__base64Binary with char* 

//  xsd.h: typemap override of type xsd__unsignedInt with unsigned int

//  Imported element "http://schemas.xmlsoap.org/ws/2004/08/addressing":EndpointReference declared as _wsa__EndpointReference


/// Typedef synonym for struct wsd__HelloType.
typedef struct wsd__HelloType wsd__HelloType;

/// Typedef synonym for struct wsd__ByeType.
typedef struct wsd__ByeType wsd__ByeType;

/// Typedef synonym for struct wsd__ProbeType.
typedef struct wsd__ProbeType wsd__ProbeType;

/// Typedef synonym for struct wsd__ProbeMatchesType.
typedef struct wsd__ProbeMatchesType wsd__ProbeMatchesType;

/// Typedef synonym for struct wsd__ProbeMatchType.
typedef struct wsd__ProbeMatchType wsd__ProbeMatchType;

/// Typedef synonym for struct wsd__ResolveType.
typedef struct wsd__ResolveType wsd__ResolveType;

/// Typedef synonym for struct wsd__ResolveMatchesType.
typedef struct wsd__ResolveMatchesType wsd__ResolveMatchesType;

/// Typedef synonym for struct wsd__ResolveMatchType.
typedef struct wsd__ResolveMatchType wsd__ResolveMatchType;

/// Typedef synonym for struct wsd__ScopesType.
typedef struct wsd__ScopesType wsd__ScopesType;

/// Typedef synonym for struct wsd__SecurityType.
typedef struct wsd__SecurityType wsd__SecurityType;

/// Typedef synonym for struct wsd__SigType.
typedef struct wsd__SigType wsd__SigType;

/// Typedef synonym for struct wsd__AppSequenceType.
typedef struct wsd__AppSequenceType wsd__AppSequenceType;

/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://schemas.xmlsoap.org/ws/2005/04/discovery                          *
 *                                                                            *
\******************************************************************************/


/// union of values "tns:RelationshipType xs:QName"
typedef char* wsd__OpenRelationshipType;

/// Imported simpleType "http://schemas.xmlsoap.org/ws/2005/04/discovery":QNameListType from typemap /home/paperboy/synology/ws4d-gsoap/ws4d-gsoap-build/WS/DPWS-typemap.dat.
// simpleType definition intentionally left blank.

/// "http://schemas.xmlsoap.org/ws/2005/04/discovery":UriListType is a simpleType containing a whitespace separated list of xs:anyURI.
typedef char* wsd__UriListType;

/// union of values "tns:FaultCodeType xs:QName"
typedef char* wsd__FaultCodeOpenType;

/// "http://schemas.xmlsoap.org/ws/2005/04/discovery":RelationshipType is a simpleType restriction of xs:QName.
/// Note: enum values are prefixed with 'wsd__RelationshipType' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum wsd__RelationshipType
{
	wsd__RelationshipType__wsd__Suppression,	///< xs:QName value=""http://schemas.xmlsoap.org/ws/2005/04/discovery":Suppression"
};
/// Typedef synonym for enum wsd__RelationshipType.
typedef enum wsd__RelationshipType wsd__RelationshipType;

/// "http://schemas.xmlsoap.org/ws/2005/04/discovery":FaultCodeType is a simpleType restriction of xs:QName.
/// Note: enum values are prefixed with 'wsd__FaultCodeType' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum wsd__FaultCodeType
{
	wsd__FaultCodeType__wsd__MatchingRuleNotSupported,	///< xs:QName value=""http://schemas.xmlsoap.org/ws/2005/04/discovery":MatchingRuleNotSupported"
};
/// Typedef synonym for enum wsd__FaultCodeType.
typedef enum wsd__FaultCodeType wsd__FaultCodeType;

/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://schemas.xmlsoap.org/ws/2005/04/discovery                          *
 *                                                                            *
\******************************************************************************/


/// "http://schemas.xmlsoap.org/ws/2005/04/discovery":HelloType is a complexType.
struct wsd__HelloType
{
/// Imported element reference "http://schemas.xmlsoap.org/ws/2004/08/addressing":EndpointReference.
    _wsa__EndpointReference              wsa__EndpointReference         1;	///< Required element.
/// Element reference "http://schemas.xmlsoap.org/ws/2005/04/discovery":Types.
    _QName                               Types                          0;	///< Optional element.
/// Element reference "http://schemas.xmlsoap.org/ws/2005/04/discovery":Scopes.
    struct wsd__ScopesType*              Scopes                         0;	///< Optional element.
/// Element reference "http://schemas.xmlsoap.org/ws/2005/04/discovery":XAddrs.
    wsd__UriListType                     XAddrs                         0;	///< Optional element.
/// Element reference "http://schemas.xmlsoap.org/ws/2005/04/discovery":MetadataVersion.
    unsigned int                         MetadataVersion                1;	///< Required element.
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##other">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://schemas.xmlsoap.org/ws/2005/04/discovery":ByeType is a complexType.
struct wsd__ByeType
{
/// Imported element reference "http://schemas.xmlsoap.org/ws/2004/08/addressing":EndpointReference.
    _wsa__EndpointReference              wsa__EndpointReference         1;	///< Required element.
/// Element reference "http://schemas.xmlsoap.org/ws/2005/04/discovery":Types.
    _QName                               Types                          0;	///< Optional element.
/// Element reference "http://schemas.xmlsoap.org/ws/2005/04/discovery":Scopes.
    struct wsd__ScopesType*              Scopes                         0;	///< Optional element.
/// Element reference "http://schemas.xmlsoap.org/ws/2005/04/discovery":XAddrs.
    wsd__UriListType                     XAddrs                         0;	///< Optional element.
/// Element reference "http://schemas.xmlsoap.org/ws/2005/04/discovery":MetadataVersion.
    unsigned int*                        MetadataVersion                0;	///< Optional element.
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##other">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://schemas.xmlsoap.org/ws/2005/04/discovery":ProbeType is a complexType.
struct wsd__ProbeType
{
/// Element reference "http://schemas.xmlsoap.org/ws/2005/04/discovery":Types.
    _QName                               Types                          0;	///< Optional element.
/// Element reference "http://schemas.xmlsoap.org/ws/2005/04/discovery":Scopes.
    struct wsd__ScopesType*              Scopes                         0;	///< Optional element.
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##other">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://schemas.xmlsoap.org/ws/2005/04/discovery":ProbeMatchesType is a complexType.
struct wsd__ProbeMatchesType
{
/// Size of array of struct wsd__ProbeMatchType* is 0..unbounded
   $int                                  __sizeProbeMatch               0;
/// Array struct wsd__ProbeMatchType* of length 0..unbounded
    struct wsd__ProbeMatchType*          ProbeMatch                     0;
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##other">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://schemas.xmlsoap.org/ws/2005/04/discovery":ProbeMatchType is a complexType.
struct wsd__ProbeMatchType
{
/// Imported element reference "http://schemas.xmlsoap.org/ws/2004/08/addressing":EndpointReference.
    _wsa__EndpointReference              wsa__EndpointReference         1;	///< Required element.
/// Element reference "http://schemas.xmlsoap.org/ws/2005/04/discovery":Types.
    _QName                               Types                          0;	///< Optional element.
/// Element reference "http://schemas.xmlsoap.org/ws/2005/04/discovery":Scopes.
    struct wsd__ScopesType*              Scopes                         0;	///< Optional element.
/// Element reference "http://schemas.xmlsoap.org/ws/2005/04/discovery":XAddrs.
    wsd__UriListType                     XAddrs                         0;	///< Optional element.
/// Element reference "http://schemas.xmlsoap.org/ws/2005/04/discovery":MetadataVersion.
    unsigned int                         MetadataVersion                1;	///< Required element.
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##other">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://schemas.xmlsoap.org/ws/2005/04/discovery":ResolveType is a complexType.
struct wsd__ResolveType
{
/// Imported element reference "http://schemas.xmlsoap.org/ws/2004/08/addressing":EndpointReference.
    _wsa__EndpointReference              wsa__EndpointReference         1;	///< Required element.
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##other">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://schemas.xmlsoap.org/ws/2005/04/discovery":ResolveMatchesType is a complexType.
struct wsd__ResolveMatchesType
{
/// Element ResolveMatch of type "http://schemas.xmlsoap.org/ws/2005/04/discovery":ResolveMatchType.
    struct wsd__ResolveMatchType*        ResolveMatch                   0;	///< Optional element.
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##other">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://schemas.xmlsoap.org/ws/2005/04/discovery":ResolveMatchType is a complexType.
struct wsd__ResolveMatchType
{
/// Imported element reference "http://schemas.xmlsoap.org/ws/2004/08/addressing":EndpointReference.
    _wsa__EndpointReference              wsa__EndpointReference         1;	///< Required element.
/// Element reference "http://schemas.xmlsoap.org/ws/2005/04/discovery":Types.
    _QName                               Types                          0;	///< Optional element.
/// Element reference "http://schemas.xmlsoap.org/ws/2005/04/discovery":Scopes.
    struct wsd__ScopesType*              Scopes                         0;	///< Optional element.
/// Element reference "http://schemas.xmlsoap.org/ws/2005/04/discovery":XAddrs.
    wsd__UriListType                     XAddrs                         1;	///< Required element.
/// Element reference "http://schemas.xmlsoap.org/ws/2005/04/discovery":MetadataVersion.
    unsigned int                         MetadataVersion                1;	///< Required element.
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// <anyAttribute namespace="##other">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://schemas.xmlsoap.org/ws/2005/04/discovery":SecurityType is a complexType.
struct wsd__SecurityType
{
/// Element reference "http://schemas.xmlsoap.org/ws/2005/04/discovery":Sig.
    struct wsd__SigType*                 Sig                            0;	///< Optional element.
/// <anyAttribute namespace="##other">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://schemas.xmlsoap.org/ws/2005/04/discovery":SigType is a complexType.
struct wsd__SigType
{
/// TODO: <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
/// Size of the array of XML or DOM nodes is 0..unbounded
   $int                                  __size                        0;
    _XML                                *__any                         0;	///< Catch any element content in XML string.
/// Attribute Scheme of type xs:anyURI.
   @char*                                Scheme                         1;	///< Required attribute.
/// Attribute KeyId of type xs:base64Binary.
   @char*                                KeyId                          0;	///< Optional attribute.
/// Attribute Refs of type xs:IDREFS.
   @xsd__IDREFS                          Refs                           1;	///< Required attribute.
/// Attribute Sig of type xs:base64Binary.
   @char*                                Sig                            1;	///< Required attribute.
/// <anyAttribute namespace="##other">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://schemas.xmlsoap.org/ws/2005/04/discovery":ScopesType is a complexType with simpleContent.
struct wsd__ScopesType
{
/// __item wraps '"http://schemas.xmlsoap.org/ws/2005/04/discovery":UriListType' simpleContent.
    wsd__UriListType                     __item                        ;
/// Attribute MatchBy of type xs:anyURI.
   @char*                                MatchBy                        0;	///< Optional attribute.
/// <anyAttribute namespace="##other">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// "http://schemas.xmlsoap.org/ws/2005/04/discovery":AppSequenceType is a complexType with complexContent restriction of xs:anyType.
struct wsd__AppSequenceType
{
/// Attribute InstanceId of type xs:unsignedInt.
   @unsigned int                         InstanceId                     1;	///< Required attribute.
/// Attribute SequenceId of type xs:anyURI.
   @char*                                SequenceId                     0;	///< Optional attribute.
/// Attribute MessageNumber of type xs:unsignedInt.
   @unsigned int                         MessageNumber                  1;	///< Required attribute.
/// <anyAttribute namespace="##other">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://schemas.xmlsoap.org/ws/2005/04/discovery                          *
 *                                                                            *
\******************************************************************************/


/// Top-level root element "http://schemas.xmlsoap.org/ws/2005/04/discovery":Hello of type "http://schemas.xmlsoap.org/ws/2005/04/discovery":HelloType.
typedef struct wsd__HelloType _wsd__Hello;

/// Top-level root element "http://schemas.xmlsoap.org/ws/2005/04/discovery":Bye of type "http://schemas.xmlsoap.org/ws/2005/04/discovery":ByeType.
typedef struct wsd__ByeType _wsd__Bye;

/// Top-level root element "http://schemas.xmlsoap.org/ws/2005/04/discovery":Probe of type "http://schemas.xmlsoap.org/ws/2005/04/discovery":ProbeType.
typedef struct wsd__ProbeType _wsd__Probe;

/// Top-level root element "http://schemas.xmlsoap.org/ws/2005/04/discovery":ProbeMatches of type "http://schemas.xmlsoap.org/ws/2005/04/discovery":ProbeMatchesType.
typedef struct wsd__ProbeMatchesType _wsd__ProbeMatches;

/// Top-level root element "http://schemas.xmlsoap.org/ws/2005/04/discovery":Resolve of type "http://schemas.xmlsoap.org/ws/2005/04/discovery":ResolveType.
typedef struct wsd__ResolveType _wsd__Resolve;

/// Top-level root element "http://schemas.xmlsoap.org/ws/2005/04/discovery":ResolveMatches of type "http://schemas.xmlsoap.org/ws/2005/04/discovery":ResolveMatchesType.
typedef struct wsd__ResolveMatchesType _wsd__ResolveMatches;

/// Top-level root element "http://schemas.xmlsoap.org/ws/2005/04/discovery":Types of type "http://schemas.xmlsoap.org/ws/2005/04/discovery":QNameListType.
typedef _QName _wsd__Types;

/// Top-level root element "http://schemas.xmlsoap.org/ws/2005/04/discovery":Scopes of type "http://schemas.xmlsoap.org/ws/2005/04/discovery":ScopesType.
typedef struct wsd__ScopesType _wsd__Scopes;

/// Top-level root element "http://schemas.xmlsoap.org/ws/2005/04/discovery":XAddrs of type "http://schemas.xmlsoap.org/ws/2005/04/discovery":UriListType.
typedef wsd__UriListType _wsd__XAddrs;

/// Top-level root element "http://schemas.xmlsoap.org/ws/2005/04/discovery":MetadataVersion of type xs:unsignedInt.
typedef unsigned int _wsd__MetadataVersion;

/// Top-level root element "http://schemas.xmlsoap.org/ws/2005/04/discovery":SupportedMatchingRules of type "http://schemas.xmlsoap.org/ws/2005/04/discovery":UriListType.
typedef wsd__UriListType _wsd__SupportedMatchingRules;

/// Top-level root element "http://schemas.xmlsoap.org/ws/2005/04/discovery":Security of type "http://schemas.xmlsoap.org/ws/2005/04/discovery":SecurityType.
typedef struct wsd__SecurityType _wsd__Security;

/// Top-level root element "http://schemas.xmlsoap.org/ws/2005/04/discovery":Sig of type "http://schemas.xmlsoap.org/ws/2005/04/discovery":SigType.
typedef struct wsd__SigType _wsd__Sig;

/// Top-level root element "http://schemas.xmlsoap.org/ws/2005/04/discovery":AppSequence of type "http://schemas.xmlsoap.org/ws/2005/04/discovery":AppSequenceType.
typedef struct wsd__AppSequenceType _wsd__AppSequence;

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://schemas.xmlsoap.org/ws/2005/04/discovery                          *
 *                                                                            *
\******************************************************************************/


/// Top-level attribute "http://schemas.xmlsoap.org/ws/2005/04/discovery":Id of simpleType xs:ID.
typedef char*  _wsd__Id;

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

XML content can be retrieved from:
  - a file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->is = ...
  - a buffer, using the soap->frecv() callback

XML content can be stored to:
  - a file descriptor, using soap->sendfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->os = ...
  - a buffer, using the soap->fsend() callback


@section wsd Top-level root elements of schema "http://schemas.xmlsoap.org/ws/2005/04/discovery"

  - <wsd:Hello> @ref _wsd__Hello
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsd__Hello(struct soap*, _wsd__Hello*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsd__Hello(struct soap*, _wsd__Hello*);
    @endcode

  - <wsd:Bye> @ref _wsd__Bye
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsd__Bye(struct soap*, _wsd__Bye*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsd__Bye(struct soap*, _wsd__Bye*);
    @endcode

  - <wsd:Probe> @ref _wsd__Probe
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsd__Probe(struct soap*, _wsd__Probe*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsd__Probe(struct soap*, _wsd__Probe*);
    @endcode

  - <wsd:ProbeMatches> @ref _wsd__ProbeMatches
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsd__ProbeMatches(struct soap*, _wsd__ProbeMatches*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsd__ProbeMatches(struct soap*, _wsd__ProbeMatches*);
    @endcode

  - <wsd:Resolve> @ref _wsd__Resolve
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsd__Resolve(struct soap*, _wsd__Resolve*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsd__Resolve(struct soap*, _wsd__Resolve*);
    @endcode

  - <wsd:ResolveMatches> @ref _wsd__ResolveMatches
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsd__ResolveMatches(struct soap*, _wsd__ResolveMatches*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsd__ResolveMatches(struct soap*, _wsd__ResolveMatches*);
    @endcode

  - <wsd:Types> @ref _wsd__Types
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsd__Types(struct soap*, _wsd__Types*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsd__Types(struct soap*, _wsd__Types*);
    @endcode

  - <wsd:Scopes> @ref _wsd__Scopes
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsd__Scopes(struct soap*, _wsd__Scopes*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsd__Scopes(struct soap*, _wsd__Scopes*);
    @endcode

  - <wsd:XAddrs> @ref _wsd__XAddrs
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsd__XAddrs(struct soap*, _wsd__XAddrs*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsd__XAddrs(struct soap*, _wsd__XAddrs*);
    @endcode

  - <wsd:MetadataVersion> @ref _wsd__MetadataVersion
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsd__MetadataVersion(struct soap*, _wsd__MetadataVersion*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsd__MetadataVersion(struct soap*, _wsd__MetadataVersion*);
    @endcode

  - <wsd:SupportedMatchingRules> @ref _wsd__SupportedMatchingRules
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsd__SupportedMatchingRules(struct soap*, _wsd__SupportedMatchingRules*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsd__SupportedMatchingRules(struct soap*, _wsd__SupportedMatchingRules*);
    @endcode

  - <wsd:Security> @ref _wsd__Security
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsd__Security(struct soap*, _wsd__Security*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsd__Security(struct soap*, _wsd__Security*);
    @endcode

  - <wsd:Sig> @ref _wsd__Sig
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsd__Sig(struct soap*, _wsd__Sig*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsd__Sig(struct soap*, _wsd__Sig*);
    @endcode

  - <wsd:AppSequence> @ref _wsd__AppSequence
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsd__AppSequence(struct soap*, _wsd__AppSequence*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsd__AppSequence(struct soap*, _wsd__AppSequence*);
    @endcode

*/

/* End of /home/paperboy/synology/ws4d-gsoap/ws4d-gsoap-build/WS/wsd.h.tmp */
