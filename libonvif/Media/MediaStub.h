/* MediaStub.h
   Generated by gSOAP 2.8.0 from ./libonvif/media.h
   Copyright(C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.
   The generated code is released under one of the following licenses:
   GPL OR Genivia's license for commercial use.
*/

#ifndef MediaStub_H
#define MediaStub_H
#include <vector>
#define SOAP_WSA_2005
#define SOAP_NAMESPACE_OF_trt	"http://www.onvif.org/ver10/media/wsdl"
#define SOAP_NAMESPACE_OF_onv	"http://www.onvif.org/ver10/schema"
#define SOAP_NAMESPACE_OF_wsnb	"http://docs.oasis-open.org/wsn/b-2"
#define SOAP_NAMESPACE_OF_wsrfbf	"http://docs.oasis-open.org/wsrf/bf-2"
#define SOAP_NAMESPACE_OF_wstop	"http://docs.oasis-open.org/wsn/t-1"
#ifndef WITH_NONAMESPACES
#define WITH_NONAMESPACES
#endif
#ifndef WITH_NOGLOBAL
#define WITH_NOGLOBAL
#endif
#include "stdsoap2.h"

namespace Media {

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


#ifndef SOAP_TYPE_Media_wsa5__RelationshipType
#define SOAP_TYPE_Media_wsa5__RelationshipType (19)
/* wsa5:RelationshipType */
enum wsa5__RelationshipType {http_x003a_x002f_x002fwww_x002ew3_x002eorg_x002f2005_x002f08_x002faddressing_x002freply = 0};
typedef enum wsa5__RelationshipType wsa5__RelationshipType;
#endif

#ifndef SOAP_TYPE_Media_wsa5__FaultCodesType
#define SOAP_TYPE_Media_wsa5__FaultCodesType (20)
/* wsa5:FaultCodesType */
enum wsa5__FaultCodesType {wsa5__InvalidAddressingHeader = 0, wsa5__InvalidAddress = 1, wsa5__InvalidEPR = 2, wsa5__InvalidCardinality = 3, wsa5__MissingAddressInEPR = 4, wsa5__DuplicateMessageID = 5, wsa5__ActionMismatch = 6, wsa5__MessageAddressingHeaderRequired = 7, wsa5__DestinationUnreachable = 8, wsa5__ActionNotSupported = 9, wsa5__EndpointUnavailable = 10};
typedef enum wsa5__FaultCodesType wsa5__FaultCodesType;
#endif

#ifndef SOAP_TYPE_Media__wsa5__IsReferenceParameter
#define SOAP_TYPE_Media__wsa5__IsReferenceParameter (39)
/* wsa5:IsReferenceParameter */
enum _wsa5__IsReferenceParameter {wsa5__false = 0, wsa5__true = 1};
typedef enum _wsa5__IsReferenceParameter _wsa5__IsReferenceParameter;
#endif

#ifndef SOAP_TYPE_Media_wsu__tTimestampFault
#define SOAP_TYPE_Media_wsu__tTimestampFault (40)
/* wsu:tTimestampFault */
enum wsu__tTimestampFault {wsu__MessageExpired = 0};
typedef enum wsu__tTimestampFault wsu__tTimestampFault;
#endif

#ifndef SOAP_TYPE_Media_wsse__FaultcodeEnum
#define SOAP_TYPE_Media_wsse__FaultcodeEnum (42)
/* wsse:FaultcodeEnum */
enum wsse__FaultcodeEnum {wsse__UnsupportedSecurityToken = 0, wsse__UnsupportedAlgorithm = 1, wsse__InvalidSecurity = 2, wsse__InvalidSecurityToken = 3, wsse__FailedAuthentication = 4, wsse__FailedCheck = 5, wsse__SecurityTokenUnavailable = 6};
typedef enum wsse__FaultcodeEnum wsse__FaultcodeEnum;
#endif

#ifndef SOAP_TYPE_Media_onv__VideoEncoding
#define SOAP_TYPE_Media_onv__VideoEncoding (540)
/* onv:VideoEncoding */
enum onv__VideoEncoding {onv__VideoEncoding__JPEG = 0, onv__VideoEncoding__MPEG4 = 1, onv__VideoEncoding__H264 = 2};
#endif

#ifndef SOAP_TYPE_Media_onv__Mpeg4Profile
#define SOAP_TYPE_Media_onv__Mpeg4Profile (542)
/* onv:Mpeg4Profile */
enum onv__Mpeg4Profile {onv__Mpeg4Profile__SP = 0, onv__Mpeg4Profile__ASP = 1};
#endif

#ifndef SOAP_TYPE_Media_onv__H264Profile
#define SOAP_TYPE_Media_onv__H264Profile (544)
/* onv:H264Profile */
enum onv__H264Profile {onv__H264Profile__Baseline = 0, onv__H264Profile__Main = 1, onv__H264Profile__Extended = 2, onv__H264Profile__High = 3};
#endif

#ifndef SOAP_TYPE_Media_onv__AudioEncoding
#define SOAP_TYPE_Media_onv__AudioEncoding (546)
/* onv:AudioEncoding */
enum onv__AudioEncoding {onv__AudioEncoding__G711 = 0, onv__AudioEncoding__G726 = 1, onv__AudioEncoding__AAC = 2};
#endif

#ifndef SOAP_TYPE_Media_onv__StreamType
#define SOAP_TYPE_Media_onv__StreamType (548)
/* onv:StreamType */
enum onv__StreamType {onv__StreamType__RTP_Unicast = 0, onv__StreamType__RTP_Multicast = 1};
#endif

#ifndef SOAP_TYPE_Media_onv__TransportProtocol
#define SOAP_TYPE_Media_onv__TransportProtocol (550)
/* onv:TransportProtocol */
enum onv__TransportProtocol {onv__TransportProtocol__UDP = 0, onv__TransportProtocol__TCP = 1, onv__TransportProtocol__RTSP = 2, onv__TransportProtocol__HTTP = 3};
#endif

#ifndef SOAP_TYPE_Media_onv__ScopeDefinition
#define SOAP_TYPE_Media_onv__ScopeDefinition (552)
/* onv:ScopeDefinition */
enum onv__ScopeDefinition {onv__ScopeDefinition__Fixed = 0, onv__ScopeDefinition__Configurable = 1};
#endif

#ifndef SOAP_TYPE_Media_onv__DiscoveryMode
#define SOAP_TYPE_Media_onv__DiscoveryMode (554)
/* onv:DiscoveryMode */
enum onv__DiscoveryMode {onv__DiscoveryMode__Discoverable = 0, onv__DiscoveryMode__NonDiscoverable = 1};
#endif

#ifndef SOAP_TYPE_Media_onv__Duplex
#define SOAP_TYPE_Media_onv__Duplex (556)
/* onv:Duplex */
enum onv__Duplex {onv__Duplex__Full = 0, onv__Duplex__Half = 1};
#endif

#ifndef SOAP_TYPE_Media_onv__IPv6DHCPConfiguration
#define SOAP_TYPE_Media_onv__IPv6DHCPConfiguration (560)
/* onv:IPv6DHCPConfiguration */
enum onv__IPv6DHCPConfiguration {onv__IPv6DHCPConfiguration__Auto = 0, onv__IPv6DHCPConfiguration__Stateful = 1, onv__IPv6DHCPConfiguration__Stateless = 2, onv__IPv6DHCPConfiguration__Off = 3};
#endif

#ifndef SOAP_TYPE_Media_onv__NetworkProtocolType
#define SOAP_TYPE_Media_onv__NetworkProtocolType (562)
/* onv:NetworkProtocolType */
enum onv__NetworkProtocolType {onv__NetworkProtocolType__HTTP = 0, onv__NetworkProtocolType__HTTPS = 1, onv__NetworkProtocolType__RTSP = 2};
#endif

#ifndef SOAP_TYPE_Media_onv__NetworkHostType
#define SOAP_TYPE_Media_onv__NetworkHostType (564)
/* onv:NetworkHostType */
enum onv__NetworkHostType {onv__NetworkHostType__IPv4 = 0, onv__NetworkHostType__IPv6 = 1, onv__NetworkHostType__DNS = 2};
#endif

#ifndef SOAP_TYPE_Media_onv__IPType
#define SOAP_TYPE_Media_onv__IPType (572)
/* onv:IPType */
enum onv__IPType {onv__IPType__IPv4 = 0, onv__IPType__IPv6 = 1};
#endif

#ifndef SOAP_TYPE_Media_onv__IPAddressFilterType
#define SOAP_TYPE_Media_onv__IPAddressFilterType (578)
/* onv:IPAddressFilterType */
enum onv__IPAddressFilterType {onv__IPAddressFilterType__Allow = 0, onv__IPAddressFilterType__Deny = 1};
#endif

#ifndef SOAP_TYPE_Media_onv__DynamicDNSType
#define SOAP_TYPE_Media_onv__DynamicDNSType (580)
/* onv:DynamicDNSType */
enum onv__DynamicDNSType {onv__DynamicDNSType__NoUpdate = 0, onv__DynamicDNSType__ClientUpdates = 1, onv__DynamicDNSType__ServerUpdates = 2};
#endif

#ifndef SOAP_TYPE_Media_onv__CapabilityCategory
#define SOAP_TYPE_Media_onv__CapabilityCategory (582)
/* onv:CapabilityCategory */
enum onv__CapabilityCategory {onv__CapabilityCategory__All = 0, onv__CapabilityCategory__Analytics = 1, onv__CapabilityCategory__Device = 2, onv__CapabilityCategory__Events = 3, onv__CapabilityCategory__Imaging = 4, onv__CapabilityCategory__Media = 5, onv__CapabilityCategory__PTZ = 6};
#endif

#ifndef SOAP_TYPE_Media_onv__SystemLogType
#define SOAP_TYPE_Media_onv__SystemLogType (584)
/* onv:SystemLogType */
enum onv__SystemLogType {onv__SystemLogType__System = 0, onv__SystemLogType__Access = 1};
#endif

#ifndef SOAP_TYPE_Media_onv__FactoryDefaultType
#define SOAP_TYPE_Media_onv__FactoryDefaultType (586)
/* onv:FactoryDefaultType */
enum onv__FactoryDefaultType {onv__FactoryDefaultType__Hard = 0, onv__FactoryDefaultType__Soft = 1};
#endif

#ifndef SOAP_TYPE_Media_onv__SetDateTimeType
#define SOAP_TYPE_Media_onv__SetDateTimeType (588)
/* onv:SetDateTimeType */
enum onv__SetDateTimeType {onv__SetDateTimeType__Manual = 0, onv__SetDateTimeType__NTP = 1};
#endif

#ifndef SOAP_TYPE_Media_onv__UserLevel
#define SOAP_TYPE_Media_onv__UserLevel (590)
/* onv:UserLevel */
enum onv__UserLevel {onv__UserLevel__Administrator = 0, onv__UserLevel__Operator = 1, onv__UserLevel__User = 2, onv__UserLevel__Anonymous = 3, onv__UserLevel__Extended = 4};
#endif

#ifndef SOAP_TYPE_Media_onv__RelayLogicalState
#define SOAP_TYPE_Media_onv__RelayLogicalState (592)
/* onv:RelayLogicalState */
enum onv__RelayLogicalState {onv__RelayLogicalState__active = 0, onv__RelayLogicalState__inactive = 1};
#endif

#ifndef SOAP_TYPE_Media_onv__RelayIdleState
#define SOAP_TYPE_Media_onv__RelayIdleState (594)
/* onv:RelayIdleState */
enum onv__RelayIdleState {onv__RelayIdleState__closed = 0, onv__RelayIdleState__open = 1};
#endif

#ifndef SOAP_TYPE_Media_onv__RelayMode
#define SOAP_TYPE_Media_onv__RelayMode (596)
/* onv:RelayMode */
enum onv__RelayMode {onv__RelayMode__Monostable = 0, onv__RelayMode__Bistable = 1};
#endif

#ifndef SOAP_TYPE_Media_onv__MoveStatus
#define SOAP_TYPE_Media_onv__MoveStatus (600)
/* onv:MoveStatus */
enum onv__MoveStatus {onv__MoveStatus__IDLE = 0, onv__MoveStatus__MOVING = 1, onv__MoveStatus__UNKNOWN = 2};
#endif

#ifndef SOAP_TYPE_Media_onv__AutoFocusMode
#define SOAP_TYPE_Media_onv__AutoFocusMode (602)
/* onv:AutoFocusMode */
enum onv__AutoFocusMode {onv__AutoFocusMode__AUTO = 0, onv__AutoFocusMode__MANUAL = 1};
#endif

#ifndef SOAP_TYPE_Media_onv__WideDynamicMode
#define SOAP_TYPE_Media_onv__WideDynamicMode (604)
/* onv:WideDynamicMode */
enum onv__WideDynamicMode {onv__WideDynamicMode__OFF = 0, onv__WideDynamicMode__ON = 1};
#endif

#ifndef SOAP_TYPE_Media_onv__BacklightCompensationMode
#define SOAP_TYPE_Media_onv__BacklightCompensationMode (606)
/* onv:BacklightCompensationMode */
enum onv__BacklightCompensationMode {onv__BacklightCompensationMode__OFF = 0, onv__BacklightCompensationMode__ON = 1};
#endif

#ifndef SOAP_TYPE_Media_onv__ExposurePriority
#define SOAP_TYPE_Media_onv__ExposurePriority (608)
/* onv:ExposurePriority */
enum onv__ExposurePriority {onv__ExposurePriority__LowNoise = 0, onv__ExposurePriority__FrameRate = 1};
#endif

#ifndef SOAP_TYPE_Media_onv__ExposureMode
#define SOAP_TYPE_Media_onv__ExposureMode (610)
/* onv:ExposureMode */
enum onv__ExposureMode {onv__ExposureMode__AUTO = 0, onv__ExposureMode__MANUAL = 1};
#endif

#ifndef SOAP_TYPE_Media_onv__Enabled
#define SOAP_TYPE_Media_onv__Enabled (612)
/* onv:Enabled */
enum onv__Enabled {onv__Enabled__ENABLED = 0, onv__Enabled__DISABLED = 1};
#endif

#ifndef SOAP_TYPE_Media_onv__WhiteBalanceMode
#define SOAP_TYPE_Media_onv__WhiteBalanceMode (614)
/* onv:WhiteBalanceMode */
enum onv__WhiteBalanceMode {onv__WhiteBalanceMode__AUTO = 0, onv__WhiteBalanceMode__MANUAL = 1};
#endif

#ifndef SOAP_TYPE_Media_onv__IrCutFilterMode
#define SOAP_TYPE_Media_onv__IrCutFilterMode (616)
/* onv:IrCutFilterMode */
enum onv__IrCutFilterMode {onv__IrCutFilterMode__ON = 0, onv__IrCutFilterMode__OFF = 1, onv__IrCutFilterMode__AUTO = 2};
#endif

#ifndef SOAP_TYPE_Media_onv__PropertyOperation
#define SOAP_TYPE_Media_onv__PropertyOperation (620)
/* onv:PropertyOperation */
enum onv__PropertyOperation {onv__PropertyOperation__Initialized = 0, onv__PropertyOperation__Deleted = 1, onv__PropertyOperation__Changed = 2};
#endif

#ifndef SOAP_TYPE_Media_onv__Direction
#define SOAP_TYPE_Media_onv__Direction (622)
/* onv:Direction */
enum onv__Direction {onv__Direction__Left = 0, onv__Direction__Right = 1, onv__Direction__Any = 2};
#endif

#ifndef SOAP_TYPE_Media_onv__ClassType
#define SOAP_TYPE_Media_onv__ClassType (624)
/* onv:ClassType */
enum onv__ClassType {onv__ClassType__Animal = 0, onv__ClassType__Face = 1, onv__ClassType__Human = 2, onv__ClassType__Vehical = 3, onv__ClassType__Other = 4};
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE_Media_xsd__duration
#define SOAP_TYPE_Media_xsd__duration (119)
typedef LONG64 xsd__duration;
#endif
#ifndef SOAP_TYPE_Media_xsd__QName
#define SOAP_TYPE_Media_xsd__QName (104)
typedef std::string xsd__QName;
#endif


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_Media__xop__Include
#define SOAP_TYPE_Media__xop__Include (8)
/* Base64 schema type: */
struct _xop__Include
{
public:
	unsigned char *__ptr;
	int __size;
	char *id;	/* optional element of type xsd:string */
	char *type;	/* optional element of type xsd:string */
	char *options;	/* optional element of type xsd:string */
};
typedef struct _xop__Include _xop__Include;
#endif

#ifndef SOAP_TYPE_Media_wsa5__EndpointReferenceType
#define SOAP_TYPE_Media_wsa5__EndpointReferenceType (12)
/* wsa5:EndpointReferenceType */
struct wsa5__EndpointReferenceType
{
public:
	char *Address;	/* required element of type xsd:string */
	struct wsa5__ReferenceParametersType *ReferenceParameters;	/* optional element of type wsa5:ReferenceParametersType */
	struct wsa5__MetadataType *Metadata;	/* optional element of type wsa5:MetadataType */
	int __size;	/* sequence of elements <-any> */
	char **__any;
	char *__anyAttribute;	/* optional attribute of type xsd:anyType */
};
typedef struct wsa5__EndpointReferenceType wsa5__EndpointReferenceType;
#endif

#ifndef SOAP_TYPE_Media_wsa5__ReferenceParametersType
#define SOAP_TYPE_Media_wsa5__ReferenceParametersType (13)
/* wsa5:ReferenceParametersType */
struct wsa5__ReferenceParametersType
{
public:
	int __size;	/* sequence of elements <-any> */
	char **__any;
	char *__anyAttribute;	/* optional attribute of type xsd:anyType */
};
typedef struct wsa5__ReferenceParametersType wsa5__ReferenceParametersType;
#endif

#ifndef SOAP_TYPE_Media_wsa5__MetadataType
#define SOAP_TYPE_Media_wsa5__MetadataType (14)
/* wsa5:MetadataType */
struct wsa5__MetadataType
{
public:
	int __size;	/* sequence of elements <-any> */
	char **__any;
	char *__anyAttribute;	/* optional attribute of type xsd:anyType */
};
typedef struct wsa5__MetadataType wsa5__MetadataType;
#endif

#ifndef SOAP_TYPE_Media_wsa5__ProblemActionType
#define SOAP_TYPE_Media_wsa5__ProblemActionType (16)
/* wsa5:ProblemActionType */
struct wsa5__ProblemActionType
{
public:
	char *Action;	/* optional element of type xsd:string */
	char *SoapAction;	/* optional element of type xsd:string */
	char *__anyAttribute;	/* optional attribute of type xsd:anyType */
};
typedef struct wsa5__ProblemActionType wsa5__ProblemActionType;
#endif

#ifndef SOAP_TYPE_Media_wsa5__RelatesToType
#define SOAP_TYPE_Media_wsa5__RelatesToType (15)
/* Primitive wsa5:RelatesToType schema type: */
struct wsa5__RelatesToType
{
public:
	char *__item;
	char *RelationshipType;	/* optional attribute of type wsa5:RelationshipTypeOpenEnum */
	char *__anyAttribute;	/* optional attribute of type xsd:anyType */
};
typedef struct wsa5__RelatesToType wsa5__RelatesToType;
#endif

#ifndef SOAP_TYPE_Media__wsu__Timestamp
#define SOAP_TYPE_Media__wsu__Timestamp (41)
/* wsu:Timestamp */
struct _wsu__Timestamp
{
public:
	char *wsu__Id;	/* optional attribute of type xsd:string */
	char *Created;	/* optional element of type xsd:string */
	char *Expires;	/* optional element of type xsd:string */
};
typedef struct _wsu__Timestamp _wsu__Timestamp;
#endif

#ifndef SOAP_TYPE_Media__wsse__UsernameToken
#define SOAP_TYPE_Media__wsse__UsernameToken (43)
/* wsse:UsernameToken */
struct _wsse__UsernameToken
{
public:
	char *Username;	/* optional element of type xsd:string */
	struct _wsse__Password *Password;	/* optional element of type wsse:Password */
	char *Nonce;	/* optional element of type xsd:string */
	char *wsu__Created;	/* optional element of type xsd:string */
	char *wsu__Id;	/* optional attribute of type xsd:string */
};
typedef struct _wsse__UsernameToken _wsse__UsernameToken;
#endif

#ifndef SOAP_TYPE_Media__wsse__BinarySecurityToken
#define SOAP_TYPE_Media__wsse__BinarySecurityToken (46)
/* Primitive wsse:BinarySecurityToken schema type: */
struct _wsse__BinarySecurityToken
{
public:
	char *__item;
	char *wsu__Id;	/* optional attribute of type xsd:string */
	char *ValueType;	/* optional attribute of type xsd:string */
	char *EncodingType;	/* optional attribute of type xsd:string */
};
typedef struct _wsse__BinarySecurityToken _wsse__BinarySecurityToken;
#endif

#ifndef SOAP_TYPE_Media__wsse__Reference
#define SOAP_TYPE_Media__wsse__Reference (47)
/* wsse:Reference */
struct _wsse__Reference
{
public:
	char *URI;	/* optional attribute of type xsd:string */
	char *ValueType;	/* optional attribute of type xsd:string */
};
typedef struct _wsse__Reference _wsse__Reference;
#endif

#ifndef SOAP_TYPE_Media__wsse__Embedded
#define SOAP_TYPE_Media__wsse__Embedded (48)
/* wsse:Embedded */
struct _wsse__Embedded
{
public:
	char *wsu__Id;	/* optional attribute of type xsd:string */
	char *ValueType;	/* optional attribute of type xsd:string */
};
typedef struct _wsse__Embedded _wsse__Embedded;
#endif

#ifndef SOAP_TYPE_Media__wsse__KeyIdentifier
#define SOAP_TYPE_Media__wsse__KeyIdentifier (49)
/* Primitive wsse:KeyIdentifier schema type: */
struct _wsse__KeyIdentifier
{
public:
	char *__item;
	char *wsu__Id;	/* optional attribute of type xsd:string */
	char *ValueType;	/* optional attribute of type xsd:string */
	char *EncodingType;	/* optional attribute of type xsd:string */
};
typedef struct _wsse__KeyIdentifier _wsse__KeyIdentifier;
#endif

#ifndef SOAP_TYPE_Media__wsse__SecurityTokenReference
#define SOAP_TYPE_Media__wsse__SecurityTokenReference (50)
/* wsse:SecurityTokenReference */
struct _wsse__SecurityTokenReference
{
public:
	struct _wsse__Reference *Reference;	/* optional element of type wsse:Reference */
	struct _wsse__KeyIdentifier *KeyIdentifier;	/* optional element of type wsse:KeyIdentifier */
	struct _wsse__Embedded *Embedded;	/* optional element of type wsse:Embedded */
	char *wsu__Id;	/* optional attribute of type xsd:string */
	char *Usage;	/* optional attribute of type xsd:string */
};
typedef struct _wsse__SecurityTokenReference _wsse__SecurityTokenReference;
#endif

#ifndef SOAP_TYPE_Media_ds__SignatureType
#define SOAP_TYPE_Media_ds__SignatureType (54)
/* ds:SignatureType */
struct ds__SignatureType
{
public:
	struct ds__SignedInfoType *SignedInfo;	/* optional element of type ds:SignedInfoType */
	char *SignatureValue;	/* optional element of type xsd:string */
	struct ds__KeyInfoType *KeyInfo;	/* optional element of type ds:KeyInfoType */
	char *Id;	/* optional attribute of type xsd:string */
};
typedef struct ds__SignatureType ds__SignatureType;
#endif

#ifndef SOAP_TYPE_Media__c14n__InclusiveNamespaces
#define SOAP_TYPE_Media__c14n__InclusiveNamespaces (63)
/* c14n:InclusiveNamespaces */
struct _c14n__InclusiveNamespaces
{
public:
	char *PrefixList;	/* optional attribute of type xsd:string */
};
typedef struct _c14n__InclusiveNamespaces _c14n__InclusiveNamespaces;
#endif

#ifndef SOAP_TYPE_Media_ds__TransformType
#define SOAP_TYPE_Media_ds__TransformType (64)
/* ds:TransformType */
struct ds__TransformType
{
public:
	struct _c14n__InclusiveNamespaces *c14n__InclusiveNamespaces;	/* optional element of type c14n:InclusiveNamespaces */
	char *__any;
	char *Algorithm;	/* optional attribute of type xsd:string */
};
typedef struct ds__TransformType ds__TransformType;
#endif

#ifndef SOAP_TYPE_Media_ds__KeyInfoType
#define SOAP_TYPE_Media_ds__KeyInfoType (57)
/* ds:KeyInfoType */
struct ds__KeyInfoType
{
public:
	char *KeyName;	/* optional element of type xsd:string */
	struct ds__KeyValueType *KeyValue;	/* optional element of type ds:KeyValueType */
	struct ds__RetrievalMethodType *RetrievalMethod;	/* optional element of type ds:RetrievalMethodType */
	struct ds__X509DataType *X509Data;	/* optional element of type ds:X509DataType */
	struct _wsse__SecurityTokenReference *wsse__SecurityTokenReference;	/* optional element of type wsse:SecurityTokenReference */
	char *Id;	/* optional attribute of type xsd:string */
};
typedef struct ds__KeyInfoType ds__KeyInfoType;
#endif

#ifndef SOAP_TYPE_Media_ds__SignedInfoType
#define SOAP_TYPE_Media_ds__SignedInfoType (55)
/* ds:SignedInfoType */
struct ds__SignedInfoType
{
public:
	struct ds__CanonicalizationMethodType *CanonicalizationMethod;	/* required element of type ds:CanonicalizationMethodType */
	struct ds__SignatureMethodType *SignatureMethod;	/* required element of type ds:SignatureMethodType */
	int __sizeReference;	/* sequence of elements <Reference> */
	struct ds__ReferenceType **Reference;	/* required element of type ds:ReferenceType */
	char *Id;	/* optional attribute of type xsd:string */
};
typedef struct ds__SignedInfoType ds__SignedInfoType;
#endif

#ifndef SOAP_TYPE_Media_ds__CanonicalizationMethodType
#define SOAP_TYPE_Media_ds__CanonicalizationMethodType (59)
/* ds:CanonicalizationMethodType */
struct ds__CanonicalizationMethodType
{
public:
	char *Algorithm;	/* required attribute of type xsd:string */
	struct _c14n__InclusiveNamespaces *c14n__InclusiveNamespaces;	/* optional element of type c14n:InclusiveNamespaces */
};
typedef struct ds__CanonicalizationMethodType ds__CanonicalizationMethodType;
#endif

#ifndef SOAP_TYPE_Media_ds__SignatureMethodType
#define SOAP_TYPE_Media_ds__SignatureMethodType (60)
/* ds:SignatureMethodType */
struct ds__SignatureMethodType
{
public:
	int *HMACOutputLength;	/* optional element of type xsd:int */
	char *Algorithm;	/* required attribute of type xsd:string */
};
typedef struct ds__SignatureMethodType ds__SignatureMethodType;
#endif

#ifndef SOAP_TYPE_Media_ds__ReferenceType
#define SOAP_TYPE_Media_ds__ReferenceType (61)
/* ds:ReferenceType */
struct ds__ReferenceType
{
public:
	struct ds__TransformsType *Transforms;	/* optional element of type ds:TransformsType */
	struct ds__DigestMethodType *DigestMethod;	/* required element of type ds:DigestMethodType */
	char *DigestValue;	/* required element of type xsd:string */
	char *Id;	/* optional attribute of type xsd:string */
	char *URI;	/* optional attribute of type xsd:string */
	char *Type;	/* optional attribute of type xsd:string */
};
typedef struct ds__ReferenceType ds__ReferenceType;
#endif

#ifndef SOAP_TYPE_Media_ds__TransformsType
#define SOAP_TYPE_Media_ds__TransformsType (62)
/* ds:TransformsType */
struct ds__TransformsType
{
public:
	int __sizeTransform;	/* sequence of elements <Transform> */
	struct ds__TransformType *Transform;	/* required element of type ds:TransformType */
};
typedef struct ds__TransformsType ds__TransformsType;
#endif

#ifndef SOAP_TYPE_Media_ds__DigestMethodType
#define SOAP_TYPE_Media_ds__DigestMethodType (66)
/* ds:DigestMethodType */
struct ds__DigestMethodType
{
public:
	char *Algorithm;	/* required attribute of type xsd:string */
};
typedef struct ds__DigestMethodType ds__DigestMethodType;
#endif

#ifndef SOAP_TYPE_Media_ds__KeyValueType
#define SOAP_TYPE_Media_ds__KeyValueType (67)
/* ds:KeyValueType */
struct ds__KeyValueType
{
public:
	struct ds__DSAKeyValueType *DSAKeyValue;	/* required element of type ds:DSAKeyValueType */
	struct ds__RSAKeyValueType *RSAKeyValue;	/* required element of type ds:RSAKeyValueType */
};
typedef struct ds__KeyValueType ds__KeyValueType;
#endif

#ifndef SOAP_TYPE_Media_ds__RetrievalMethodType
#define SOAP_TYPE_Media_ds__RetrievalMethodType (69)
/* ds:RetrievalMethodType */
struct ds__RetrievalMethodType
{
public:
	struct ds__TransformsType *Transforms;	/* optional element of type ds:TransformsType */
	char *URI;	/* optional attribute of type xsd:string */
	char *Type;	/* optional attribute of type xsd:string */
};
typedef struct ds__RetrievalMethodType ds__RetrievalMethodType;
#endif

#ifndef SOAP_TYPE_Media_ds__X509DataType
#define SOAP_TYPE_Media_ds__X509DataType (71)
/* ds:X509DataType */
struct ds__X509DataType
{
public:
	struct ds__X509IssuerSerialType *X509IssuerSerial;	/* required element of type ds:X509IssuerSerialType */
	char *X509SKI;	/* required element of type xsd:string */
	char *X509SubjectName;	/* required element of type xsd:string */
	char *X509Certificate;	/* required element of type xsd:string */
	char *X509CRL;	/* required element of type xsd:string */
};
typedef struct ds__X509DataType ds__X509DataType;
#endif

#ifndef SOAP_TYPE_Media_ds__X509IssuerSerialType
#define SOAP_TYPE_Media_ds__X509IssuerSerialType (74)
/* ds:X509IssuerSerialType */
struct ds__X509IssuerSerialType
{
public:
	char *X509IssuerName;	/* required element of type xsd:string */
	int X509SerialNumber;	/* required element of type xsd:int */
};
typedef struct ds__X509IssuerSerialType ds__X509IssuerSerialType;
#endif

#ifndef SOAP_TYPE_Media_ds__DSAKeyValueType
#define SOAP_TYPE_Media_ds__DSAKeyValueType (75)
/* ds:DSAKeyValueType */
struct ds__DSAKeyValueType
{
public:
	char *G;	/* optional element of type xsd:string */
	char *Y;	/* required element of type xsd:string */
	char *J;	/* optional element of type xsd:string */
	char *P;	/* required element of type xsd:string */
	char *Q;	/* required element of type xsd:string */
	char *Seed;	/* required element of type xsd:string */
	char *PgenCounter;	/* required element of type xsd:string */
};
typedef struct ds__DSAKeyValueType ds__DSAKeyValueType;
#endif

#ifndef SOAP_TYPE_Media_ds__RSAKeyValueType
#define SOAP_TYPE_Media_ds__RSAKeyValueType (76)
/* ds:RSAKeyValueType */
struct ds__RSAKeyValueType
{
public:
	char *Modulus;	/* required element of type xsd:string */
	char *Exponent;	/* required element of type xsd:string */
};
typedef struct ds__RSAKeyValueType ds__RSAKeyValueType;
#endif

#ifndef SOAP_TYPE_Media__wsse__Security
#define SOAP_TYPE_Media__wsse__Security (88)
/* wsse:Security */
struct _wsse__Security
{
public:
	struct _wsu__Timestamp *wsu__Timestamp;	/* optional element of type wsu:Timestamp */
	struct _wsse__UsernameToken *UsernameToken;	/* optional element of type wsse:UsernameToken */
	struct _wsse__BinarySecurityToken *BinarySecurityToken;	/* optional element of type wsse:BinarySecurityToken */
	struct ds__SignatureType *ds__Signature;	/* optional element of type ds:SignatureType */
	char *SOAP_ENV__actor;	/* optional attribute of type xsd:string */
	char *SOAP_ENV__role;	/* optional attribute of type xsd:string */
};
typedef struct _wsse__Security _wsse__Security;
#endif

#ifndef SOAP_TYPE_Media__wsse__Password
#define SOAP_TYPE_Media__wsse__Password (44)
/* Primitive wsse:Password schema type: */
struct _wsse__Password
{
public:
	char *__item;
	char *Type;	/* optional attribute of type xsd:string */
};
typedef struct _wsse__Password _wsse__Password;
#endif

#ifndef SOAP_TYPE_Media_SOAP_ENV__Header
#define SOAP_TYPE_Media_SOAP_ENV__Header (93)
/* SOAP Header: */
struct SOAP_ENV__Header
{
public:
	struct _wsse__Security *wsse__Security;	/* mustUnderstand */
	char *wsa5__MessageID;	/* optional element of type wsa5:MessageID */
	struct wsa5__RelatesToType *wsa5__RelatesTo;	/* optional element of type wsa5:RelatesTo */
	struct wsa5__EndpointReferenceType *wsa5__From;	/* optional element of type wsa5:From */
	struct wsa5__EndpointReferenceType *wsa5__ReplyTo;	/* mustUnderstand */
	struct wsa5__EndpointReferenceType *wsa5__FaultTo;	/* mustUnderstand */
	char *wsa5__To;	/* mustUnderstand */
	char *wsa5__Action;	/* mustUnderstand */
};
#endif

#ifndef SOAP_TYPE_Media_xsd__anyType
#define SOAP_TYPE_Media_xsd__anyType (99)
/* Primitive xsd:anyType schema type: */
class SOAP_CMAC xsd__anyType
{
public:
	char *__item;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 99; } /* = unique id SOAP_TYPE_Media_xsd__anyType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__anyType(): __item(NULL), soap(NULL) { xsd__anyType::soap_default(NULL); }
	virtual ~xsd__anyType() { }
};
#endif

#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_Media_xsd__NCName_
#define SOAP_TYPE_Media_xsd__NCName_ (103)
/* Primitive xsd:NCName schema type: */
class SOAP_CMAC xsd__NCName_ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 103; } /* = unique id SOAP_TYPE_Media_xsd__NCName_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__NCName_() { xsd__NCName_::soap_default(NULL); }
	virtual ~xsd__NCName_() { }
};
#endif

#ifndef SOAP_TYPE_Media_xsd__QName_
#define SOAP_TYPE_Media_xsd__QName_ (105)
/* Primitive xsd:QName schema type: */
class SOAP_CMAC xsd__QName_ : public xsd__anyType
{
public:
	xsd__QName __item;
public:
	virtual int soap_type() const { return 105; } /* = unique id SOAP_TYPE_Media_xsd__QName_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__QName_() { xsd__QName_::soap_default(NULL); }
	virtual ~xsd__QName_() { }
};
#endif

#ifndef SOAP_TYPE_Media_xsd__anySimpleType_
#define SOAP_TYPE_Media_xsd__anySimpleType_ (107)
/* Primitive xsd:anySimpleType schema type: */
class SOAP_CMAC xsd__anySimpleType_ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 107; } /* = unique id SOAP_TYPE_Media_xsd__anySimpleType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__anySimpleType_() { xsd__anySimpleType_::soap_default(NULL); }
	virtual ~xsd__anySimpleType_() { }
};
#endif

#ifndef SOAP_TYPE_Media_xsd__anyURI_
#define SOAP_TYPE_Media_xsd__anyURI_ (109)
/* Primitive xsd:anyURI schema type: */
class SOAP_CMAC xsd__anyURI_ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 109; } /* = unique id SOAP_TYPE_Media_xsd__anyURI_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__anyURI_() { xsd__anyURI_::soap_default(NULL); }
	virtual ~xsd__anyURI_() { }
};
#endif

#ifndef SOAP_TYPE_Media_xsd__base64Binary
#define SOAP_TYPE_Media_xsd__base64Binary (110)
/* Base64 schema type: */
class SOAP_CMAC xsd__base64Binary
{
public:
	unsigned char *__ptr;
	int __size;
	char *id;	/* optional element of type xsd:string */
	char *type;	/* optional element of type xsd:string */
	char *options;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 110; } /* = unique id SOAP_TYPE_Media_xsd__base64Binary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__base64Binary(): __ptr(NULL), id(NULL), type(NULL), options(NULL), soap(NULL) { xsd__base64Binary::soap_default(NULL); }
	virtual ~xsd__base64Binary() { }
};
#endif

#ifndef SOAP_TYPE_Media_xsd__base64Binary_
#define SOAP_TYPE_Media_xsd__base64Binary_ (111)
/* Primitive xsd:base64Binary schema type: */
class SOAP_CMAC xsd__base64Binary_ : public xsd__anyType
{
public:
	xsd__base64Binary __item;
public:
	virtual int soap_type() const { return 111; } /* = unique id SOAP_TYPE_Media_xsd__base64Binary_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__base64Binary_() { xsd__base64Binary_::soap_default(NULL); }
	virtual ~xsd__base64Binary_() { }
};
#endif

#ifndef SOAP_TYPE_Media_xsd__boolean
#define SOAP_TYPE_Media_xsd__boolean (112)
/* Primitive xsd:boolean schema type: */
class SOAP_CMAC xsd__boolean : public xsd__anyType
{
public:
	bool __item;
public:
	virtual int soap_type() const { return 112; } /* = unique id SOAP_TYPE_Media_xsd__boolean */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__boolean() { xsd__boolean::soap_default(NULL); }
	virtual ~xsd__boolean() { }
};
#endif

#ifndef SOAP_TYPE_Media_xsd__dateTime
#define SOAP_TYPE_Media_xsd__dateTime (114)
/* Primitive xsd:dateTime schema type: */
class SOAP_CMAC xsd__dateTime : public xsd__anyType
{
public:
	time_t __item;
public:
	virtual int soap_type() const { return 114; } /* = unique id SOAP_TYPE_Media_xsd__dateTime */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__dateTime() { xsd__dateTime::soap_default(NULL); }
	virtual ~xsd__dateTime() { }
};
#endif

#ifndef SOAP_TYPE_Media_xsd__duration_
#define SOAP_TYPE_Media_xsd__duration_ (120)
/* Primitive xsd:duration schema type: */
class SOAP_CMAC xsd__duration_ : public xsd__anyType
{
public:
	LONG64 __item;	/* external */
public:
	virtual int soap_type() const { return 120; } /* = unique id SOAP_TYPE_Media_xsd__duration_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__duration_() { xsd__duration_::soap_default(NULL); }
	virtual ~xsd__duration_() { }
};
#endif

#ifndef SOAP_TYPE_Media_xsd__float
#define SOAP_TYPE_Media_xsd__float (121)
/* Primitive xsd:float schema type: */
class SOAP_CMAC xsd__float : public xsd__anyType
{
public:
	float __item;
public:
	virtual int soap_type() const { return 121; } /* = unique id SOAP_TYPE_Media_xsd__float */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__float() { xsd__float::soap_default(NULL); }
	virtual ~xsd__float() { }
};
#endif

#ifndef SOAP_TYPE_Media_xsd__int
#define SOAP_TYPE_Media_xsd__int (123)
/* Primitive xsd:int schema type: */
class SOAP_CMAC xsd__int : public xsd__anyType
{
public:
	int __item;
public:
	virtual int soap_type() const { return 123; } /* = unique id SOAP_TYPE_Media_xsd__int */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__int() { xsd__int::soap_default(NULL); }
	virtual ~xsd__int() { }
};
#endif

#ifndef SOAP_TYPE_Media_xsd__integer_
#define SOAP_TYPE_Media_xsd__integer_ (125)
/* Primitive xsd:integer schema type: */
class SOAP_CMAC xsd__integer_ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 125; } /* = unique id SOAP_TYPE_Media_xsd__integer_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__integer_() { xsd__integer_::soap_default(NULL); }
	virtual ~xsd__integer_() { }
};
#endif

#ifndef SOAP_TYPE_Media_xsd__nonNegativeInteger_
#define SOAP_TYPE_Media_xsd__nonNegativeInteger_ (127)
/* Primitive xsd:nonNegativeInteger schema type: */
class SOAP_CMAC xsd__nonNegativeInteger_ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 127; } /* = unique id SOAP_TYPE_Media_xsd__nonNegativeInteger_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__nonNegativeInteger_() { xsd__nonNegativeInteger_::soap_default(NULL); }
	virtual ~xsd__nonNegativeInteger_() { }
};
#endif

#ifndef SOAP_TYPE_Media_xsd__string
#define SOAP_TYPE_Media_xsd__string (128)
/* Primitive xsd:string schema type: */
class SOAP_CMAC xsd__string : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 128; } /* = unique id SOAP_TYPE_Media_xsd__string */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__string() { xsd__string::soap_default(NULL); }
	virtual ~xsd__string() { }
};
#endif

#ifndef SOAP_TYPE_Media_xsd__token_
#define SOAP_TYPE_Media_xsd__token_ (130)
/* Primitive xsd:token schema type: */
class SOAP_CMAC xsd__token_ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 130; } /* = unique id SOAP_TYPE_Media_xsd__token_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__token_() { xsd__token_::soap_default(NULL); }
	virtual ~xsd__token_() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__ReferenceToken__
#define SOAP_TYPE_Media_onv__ReferenceToken__ (537)
/* Primitive onv:ReferenceToken schema type: */
class SOAP_CMAC onv__ReferenceToken__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 537; } /* = unique id SOAP_TYPE_Media_onv__ReferenceToken__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__ReferenceToken__() { onv__ReferenceToken__::soap_default(NULL); }
	virtual ~onv__ReferenceToken__() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__Name__
#define SOAP_TYPE_Media_onv__Name__ (539)
/* Primitive onv:Name schema type: */
class SOAP_CMAC onv__Name__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 539; } /* = unique id SOAP_TYPE_Media_onv__Name__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__Name__() { onv__Name__::soap_default(NULL); }
	virtual ~onv__Name__() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__VideoEncoding_
#define SOAP_TYPE_Media_onv__VideoEncoding_ (541)
/* Primitive onv:VideoEncoding schema type: */
class SOAP_CMAC onv__VideoEncoding_ : public xsd__anyType
{
public:
	enum onv__VideoEncoding __item;
public:
	virtual int soap_type() const { return 541; } /* = unique id SOAP_TYPE_Media_onv__VideoEncoding_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__VideoEncoding_() { onv__VideoEncoding_::soap_default(NULL); }
	virtual ~onv__VideoEncoding_() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__Mpeg4Profile_
#define SOAP_TYPE_Media_onv__Mpeg4Profile_ (543)
/* Primitive onv:Mpeg4Profile schema type: */
class SOAP_CMAC onv__Mpeg4Profile_ : public xsd__anyType
{
public:
	enum onv__Mpeg4Profile __item;
public:
	virtual int soap_type() const { return 543; } /* = unique id SOAP_TYPE_Media_onv__Mpeg4Profile_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__Mpeg4Profile_() { onv__Mpeg4Profile_::soap_default(NULL); }
	virtual ~onv__Mpeg4Profile_() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__H264Profile_
#define SOAP_TYPE_Media_onv__H264Profile_ (545)
/* Primitive onv:H264Profile schema type: */
class SOAP_CMAC onv__H264Profile_ : public xsd__anyType
{
public:
	enum onv__H264Profile __item;
public:
	virtual int soap_type() const { return 545; } /* = unique id SOAP_TYPE_Media_onv__H264Profile_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__H264Profile_() { onv__H264Profile_::soap_default(NULL); }
	virtual ~onv__H264Profile_() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__AudioEncoding_
#define SOAP_TYPE_Media_onv__AudioEncoding_ (547)
/* Primitive onv:AudioEncoding schema type: */
class SOAP_CMAC onv__AudioEncoding_ : public xsd__anyType
{
public:
	enum onv__AudioEncoding __item;
public:
	virtual int soap_type() const { return 547; } /* = unique id SOAP_TYPE_Media_onv__AudioEncoding_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__AudioEncoding_() { onv__AudioEncoding_::soap_default(NULL); }
	virtual ~onv__AudioEncoding_() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__StreamType_
#define SOAP_TYPE_Media_onv__StreamType_ (549)
/* Primitive onv:StreamType schema type: */
class SOAP_CMAC onv__StreamType_ : public xsd__anyType
{
public:
	enum onv__StreamType __item;
public:
	virtual int soap_type() const { return 549; } /* = unique id SOAP_TYPE_Media_onv__StreamType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__StreamType_() { onv__StreamType_::soap_default(NULL); }
	virtual ~onv__StreamType_() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__TransportProtocol_
#define SOAP_TYPE_Media_onv__TransportProtocol_ (551)
/* Primitive onv:TransportProtocol schema type: */
class SOAP_CMAC onv__TransportProtocol_ : public xsd__anyType
{
public:
	enum onv__TransportProtocol __item;
public:
	virtual int soap_type() const { return 551; } /* = unique id SOAP_TYPE_Media_onv__TransportProtocol_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__TransportProtocol_() { onv__TransportProtocol_::soap_default(NULL); }
	virtual ~onv__TransportProtocol_() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__ScopeDefinition_
#define SOAP_TYPE_Media_onv__ScopeDefinition_ (553)
/* Primitive onv:ScopeDefinition schema type: */
class SOAP_CMAC onv__ScopeDefinition_ : public xsd__anyType
{
public:
	enum onv__ScopeDefinition __item;
public:
	virtual int soap_type() const { return 553; } /* = unique id SOAP_TYPE_Media_onv__ScopeDefinition_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__ScopeDefinition_() { onv__ScopeDefinition_::soap_default(NULL); }
	virtual ~onv__ScopeDefinition_() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__DiscoveryMode_
#define SOAP_TYPE_Media_onv__DiscoveryMode_ (555)
/* Primitive onv:DiscoveryMode schema type: */
class SOAP_CMAC onv__DiscoveryMode_ : public xsd__anyType
{
public:
	enum onv__DiscoveryMode __item;
public:
	virtual int soap_type() const { return 555; } /* = unique id SOAP_TYPE_Media_onv__DiscoveryMode_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__DiscoveryMode_() { onv__DiscoveryMode_::soap_default(NULL); }
	virtual ~onv__DiscoveryMode_() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__Duplex_
#define SOAP_TYPE_Media_onv__Duplex_ (557)
/* Primitive onv:Duplex schema type: */
class SOAP_CMAC onv__Duplex_ : public xsd__anyType
{
public:
	enum onv__Duplex __item;
public:
	virtual int soap_type() const { return 557; } /* = unique id SOAP_TYPE_Media_onv__Duplex_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__Duplex_() { onv__Duplex_::soap_default(NULL); }
	virtual ~onv__Duplex_() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__IANA_IfTypes__
#define SOAP_TYPE_Media_onv__IANA_IfTypes__ (559)
/* Primitive onv:IANA-IfTypes schema type: */
class SOAP_CMAC onv__IANA_IfTypes__ : public xsd__anyType
{
public:
	int __item;
public:
	virtual int soap_type() const { return 559; } /* = unique id SOAP_TYPE_Media_onv__IANA_IfTypes__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__IANA_IfTypes__() { onv__IANA_IfTypes__::soap_default(NULL); }
	virtual ~onv__IANA_IfTypes__() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__IPv6DHCPConfiguration_
#define SOAP_TYPE_Media_onv__IPv6DHCPConfiguration_ (561)
/* Primitive onv:IPv6DHCPConfiguration schema type: */
class SOAP_CMAC onv__IPv6DHCPConfiguration_ : public xsd__anyType
{
public:
	enum onv__IPv6DHCPConfiguration __item;
public:
	virtual int soap_type() const { return 561; } /* = unique id SOAP_TYPE_Media_onv__IPv6DHCPConfiguration_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__IPv6DHCPConfiguration_() { onv__IPv6DHCPConfiguration_::soap_default(NULL); }
	virtual ~onv__IPv6DHCPConfiguration_() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__NetworkProtocolType_
#define SOAP_TYPE_Media_onv__NetworkProtocolType_ (563)
/* Primitive onv:NetworkProtocolType schema type: */
class SOAP_CMAC onv__NetworkProtocolType_ : public xsd__anyType
{
public:
	enum onv__NetworkProtocolType __item;
public:
	virtual int soap_type() const { return 563; } /* = unique id SOAP_TYPE_Media_onv__NetworkProtocolType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__NetworkProtocolType_() { onv__NetworkProtocolType_::soap_default(NULL); }
	virtual ~onv__NetworkProtocolType_() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__NetworkHostType_
#define SOAP_TYPE_Media_onv__NetworkHostType_ (565)
/* Primitive onv:NetworkHostType schema type: */
class SOAP_CMAC onv__NetworkHostType_ : public xsd__anyType
{
public:
	enum onv__NetworkHostType __item;
public:
	virtual int soap_type() const { return 565; } /* = unique id SOAP_TYPE_Media_onv__NetworkHostType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__NetworkHostType_() { onv__NetworkHostType_::soap_default(NULL); }
	virtual ~onv__NetworkHostType_() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__IPv4Address__
#define SOAP_TYPE_Media_onv__IPv4Address__ (567)
/* Primitive onv:IPv4Address schema type: */
class SOAP_CMAC onv__IPv4Address__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 567; } /* = unique id SOAP_TYPE_Media_onv__IPv4Address__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__IPv4Address__() { onv__IPv4Address__::soap_default(NULL); }
	virtual ~onv__IPv4Address__() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__IPv6Address__
#define SOAP_TYPE_Media_onv__IPv6Address__ (569)
/* Primitive onv:IPv6Address schema type: */
class SOAP_CMAC onv__IPv6Address__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 569; } /* = unique id SOAP_TYPE_Media_onv__IPv6Address__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__IPv6Address__() { onv__IPv6Address__::soap_default(NULL); }
	virtual ~onv__IPv6Address__() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__HwAddress__
#define SOAP_TYPE_Media_onv__HwAddress__ (571)
/* Primitive onv:HwAddress schema type: */
class SOAP_CMAC onv__HwAddress__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 571; } /* = unique id SOAP_TYPE_Media_onv__HwAddress__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__HwAddress__() { onv__HwAddress__::soap_default(NULL); }
	virtual ~onv__HwAddress__() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__IPType_
#define SOAP_TYPE_Media_onv__IPType_ (573)
/* Primitive onv:IPType schema type: */
class SOAP_CMAC onv__IPType_ : public xsd__anyType
{
public:
	enum onv__IPType __item;
public:
	virtual int soap_type() const { return 573; } /* = unique id SOAP_TYPE_Media_onv__IPType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__IPType_() { onv__IPType_::soap_default(NULL); }
	virtual ~onv__IPType_() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__DNSName__
#define SOAP_TYPE_Media_onv__DNSName__ (575)
/* Primitive onv:DNSName schema type: */
class SOAP_CMAC onv__DNSName__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 575; } /* = unique id SOAP_TYPE_Media_onv__DNSName__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__DNSName__() { onv__DNSName__::soap_default(NULL); }
	virtual ~onv__DNSName__() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__Domain__
#define SOAP_TYPE_Media_onv__Domain__ (577)
/* Primitive onv:Domain schema type: */
class SOAP_CMAC onv__Domain__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 577; } /* = unique id SOAP_TYPE_Media_onv__Domain__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__Domain__() { onv__Domain__::soap_default(NULL); }
	virtual ~onv__Domain__() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__IPAddressFilterType_
#define SOAP_TYPE_Media_onv__IPAddressFilterType_ (579)
/* Primitive onv:IPAddressFilterType schema type: */
class SOAP_CMAC onv__IPAddressFilterType_ : public xsd__anyType
{
public:
	enum onv__IPAddressFilterType __item;
public:
	virtual int soap_type() const { return 579; } /* = unique id SOAP_TYPE_Media_onv__IPAddressFilterType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__IPAddressFilterType_() { onv__IPAddressFilterType_::soap_default(NULL); }
	virtual ~onv__IPAddressFilterType_() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__DynamicDNSType_
#define SOAP_TYPE_Media_onv__DynamicDNSType_ (581)
/* Primitive onv:DynamicDNSType schema type: */
class SOAP_CMAC onv__DynamicDNSType_ : public xsd__anyType
{
public:
	enum onv__DynamicDNSType __item;
public:
	virtual int soap_type() const { return 581; } /* = unique id SOAP_TYPE_Media_onv__DynamicDNSType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__DynamicDNSType_() { onv__DynamicDNSType_::soap_default(NULL); }
	virtual ~onv__DynamicDNSType_() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__CapabilityCategory_
#define SOAP_TYPE_Media_onv__CapabilityCategory_ (583)
/* Primitive onv:CapabilityCategory schema type: */
class SOAP_CMAC onv__CapabilityCategory_ : public xsd__anyType
{
public:
	enum onv__CapabilityCategory __item;
public:
	virtual int soap_type() const { return 583; } /* = unique id SOAP_TYPE_Media_onv__CapabilityCategory_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__CapabilityCategory_() { onv__CapabilityCategory_::soap_default(NULL); }
	virtual ~onv__CapabilityCategory_() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__SystemLogType_
#define SOAP_TYPE_Media_onv__SystemLogType_ (585)
/* Primitive onv:SystemLogType schema type: */
class SOAP_CMAC onv__SystemLogType_ : public xsd__anyType
{
public:
	enum onv__SystemLogType __item;
public:
	virtual int soap_type() const { return 585; } /* = unique id SOAP_TYPE_Media_onv__SystemLogType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__SystemLogType_() { onv__SystemLogType_::soap_default(NULL); }
	virtual ~onv__SystemLogType_() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__FactoryDefaultType_
#define SOAP_TYPE_Media_onv__FactoryDefaultType_ (587)
/* Primitive onv:FactoryDefaultType schema type: */
class SOAP_CMAC onv__FactoryDefaultType_ : public xsd__anyType
{
public:
	enum onv__FactoryDefaultType __item;
public:
	virtual int soap_type() const { return 587; } /* = unique id SOAP_TYPE_Media_onv__FactoryDefaultType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__FactoryDefaultType_() { onv__FactoryDefaultType_::soap_default(NULL); }
	virtual ~onv__FactoryDefaultType_() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__SetDateTimeType_
#define SOAP_TYPE_Media_onv__SetDateTimeType_ (589)
/* Primitive onv:SetDateTimeType schema type: */
class SOAP_CMAC onv__SetDateTimeType_ : public xsd__anyType
{
public:
	enum onv__SetDateTimeType __item;
public:
	virtual int soap_type() const { return 589; } /* = unique id SOAP_TYPE_Media_onv__SetDateTimeType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__SetDateTimeType_() { onv__SetDateTimeType_::soap_default(NULL); }
	virtual ~onv__SetDateTimeType_() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__UserLevel_
#define SOAP_TYPE_Media_onv__UserLevel_ (591)
/* Primitive onv:UserLevel schema type: */
class SOAP_CMAC onv__UserLevel_ : public xsd__anyType
{
public:
	enum onv__UserLevel __item;
public:
	virtual int soap_type() const { return 591; } /* = unique id SOAP_TYPE_Media_onv__UserLevel_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__UserLevel_() { onv__UserLevel_::soap_default(NULL); }
	virtual ~onv__UserLevel_() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__RelayLogicalState_
#define SOAP_TYPE_Media_onv__RelayLogicalState_ (593)
/* Primitive onv:RelayLogicalState schema type: */
class SOAP_CMAC onv__RelayLogicalState_ : public xsd__anyType
{
public:
	enum onv__RelayLogicalState __item;
public:
	virtual int soap_type() const { return 593; } /* = unique id SOAP_TYPE_Media_onv__RelayLogicalState_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__RelayLogicalState_() { onv__RelayLogicalState_::soap_default(NULL); }
	virtual ~onv__RelayLogicalState_() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__RelayIdleState_
#define SOAP_TYPE_Media_onv__RelayIdleState_ (595)
/* Primitive onv:RelayIdleState schema type: */
class SOAP_CMAC onv__RelayIdleState_ : public xsd__anyType
{
public:
	enum onv__RelayIdleState __item;
public:
	virtual int soap_type() const { return 595; } /* = unique id SOAP_TYPE_Media_onv__RelayIdleState_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__RelayIdleState_() { onv__RelayIdleState_::soap_default(NULL); }
	virtual ~onv__RelayIdleState_() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__RelayMode_
#define SOAP_TYPE_Media_onv__RelayMode_ (597)
/* Primitive onv:RelayMode schema type: */
class SOAP_CMAC onv__RelayMode_ : public xsd__anyType
{
public:
	enum onv__RelayMode __item;
public:
	virtual int soap_type() const { return 597; } /* = unique id SOAP_TYPE_Media_onv__RelayMode_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__RelayMode_() { onv__RelayMode_::soap_default(NULL); }
	virtual ~onv__RelayMode_() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__AuxiliaryData__
#define SOAP_TYPE_Media_onv__AuxiliaryData__ (599)
/* Primitive onv:AuxiliaryData schema type: */
class SOAP_CMAC onv__AuxiliaryData__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 599; } /* = unique id SOAP_TYPE_Media_onv__AuxiliaryData__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__AuxiliaryData__() { onv__AuxiliaryData__::soap_default(NULL); }
	virtual ~onv__AuxiliaryData__() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__MoveStatus_
#define SOAP_TYPE_Media_onv__MoveStatus_ (601)
/* Primitive onv:MoveStatus schema type: */
class SOAP_CMAC onv__MoveStatus_ : public xsd__anyType
{
public:
	enum onv__MoveStatus __item;
public:
	virtual int soap_type() const { return 601; } /* = unique id SOAP_TYPE_Media_onv__MoveStatus_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__MoveStatus_() { onv__MoveStatus_::soap_default(NULL); }
	virtual ~onv__MoveStatus_() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__AutoFocusMode_
#define SOAP_TYPE_Media_onv__AutoFocusMode_ (603)
/* Primitive onv:AutoFocusMode schema type: */
class SOAP_CMAC onv__AutoFocusMode_ : public xsd__anyType
{
public:
	enum onv__AutoFocusMode __item;
public:
	virtual int soap_type() const { return 603; } /* = unique id SOAP_TYPE_Media_onv__AutoFocusMode_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__AutoFocusMode_() { onv__AutoFocusMode_::soap_default(NULL); }
	virtual ~onv__AutoFocusMode_() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__WideDynamicMode_
#define SOAP_TYPE_Media_onv__WideDynamicMode_ (605)
/* Primitive onv:WideDynamicMode schema type: */
class SOAP_CMAC onv__WideDynamicMode_ : public xsd__anyType
{
public:
	enum onv__WideDynamicMode __item;
public:
	virtual int soap_type() const { return 605; } /* = unique id SOAP_TYPE_Media_onv__WideDynamicMode_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__WideDynamicMode_() { onv__WideDynamicMode_::soap_default(NULL); }
	virtual ~onv__WideDynamicMode_() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__BacklightCompensationMode_
#define SOAP_TYPE_Media_onv__BacklightCompensationMode_ (607)
/* Primitive onv:BacklightCompensationMode schema type: */
class SOAP_CMAC onv__BacklightCompensationMode_ : public xsd__anyType
{
public:
	enum onv__BacklightCompensationMode __item;
public:
	virtual int soap_type() const { return 607; } /* = unique id SOAP_TYPE_Media_onv__BacklightCompensationMode_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__BacklightCompensationMode_() { onv__BacklightCompensationMode_::soap_default(NULL); }
	virtual ~onv__BacklightCompensationMode_() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__ExposurePriority_
#define SOAP_TYPE_Media_onv__ExposurePriority_ (609)
/* Primitive onv:ExposurePriority schema type: */
class SOAP_CMAC onv__ExposurePriority_ : public xsd__anyType
{
public:
	enum onv__ExposurePriority __item;
public:
	virtual int soap_type() const { return 609; } /* = unique id SOAP_TYPE_Media_onv__ExposurePriority_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__ExposurePriority_() { onv__ExposurePriority_::soap_default(NULL); }
	virtual ~onv__ExposurePriority_() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__ExposureMode_
#define SOAP_TYPE_Media_onv__ExposureMode_ (611)
/* Primitive onv:ExposureMode schema type: */
class SOAP_CMAC onv__ExposureMode_ : public xsd__anyType
{
public:
	enum onv__ExposureMode __item;
public:
	virtual int soap_type() const { return 611; } /* = unique id SOAP_TYPE_Media_onv__ExposureMode_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__ExposureMode_() { onv__ExposureMode_::soap_default(NULL); }
	virtual ~onv__ExposureMode_() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__Enabled_
#define SOAP_TYPE_Media_onv__Enabled_ (613)
/* Primitive onv:Enabled schema type: */
class SOAP_CMAC onv__Enabled_ : public xsd__anyType
{
public:
	enum onv__Enabled __item;
public:
	virtual int soap_type() const { return 613; } /* = unique id SOAP_TYPE_Media_onv__Enabled_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__Enabled_() { onv__Enabled_::soap_default(NULL); }
	virtual ~onv__Enabled_() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__WhiteBalanceMode_
#define SOAP_TYPE_Media_onv__WhiteBalanceMode_ (615)
/* Primitive onv:WhiteBalanceMode schema type: */
class SOAP_CMAC onv__WhiteBalanceMode_ : public xsd__anyType
{
public:
	enum onv__WhiteBalanceMode __item;
public:
	virtual int soap_type() const { return 615; } /* = unique id SOAP_TYPE_Media_onv__WhiteBalanceMode_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__WhiteBalanceMode_() { onv__WhiteBalanceMode_::soap_default(NULL); }
	virtual ~onv__WhiteBalanceMode_() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__IrCutFilterMode_
#define SOAP_TYPE_Media_onv__IrCutFilterMode_ (617)
/* Primitive onv:IrCutFilterMode schema type: */
class SOAP_CMAC onv__IrCutFilterMode_ : public xsd__anyType
{
public:
	enum onv__IrCutFilterMode __item;
public:
	virtual int soap_type() const { return 617; } /* = unique id SOAP_TYPE_Media_onv__IrCutFilterMode_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__IrCutFilterMode_() { onv__IrCutFilterMode_::soap_default(NULL); }
	virtual ~onv__IrCutFilterMode_() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__TopicNamespaceLocation__
#define SOAP_TYPE_Media_onv__TopicNamespaceLocation__ (619)
/* Primitive onv:TopicNamespaceLocation schema type: */
class SOAP_CMAC onv__TopicNamespaceLocation__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 619; } /* = unique id SOAP_TYPE_Media_onv__TopicNamespaceLocation__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__TopicNamespaceLocation__() { onv__TopicNamespaceLocation__::soap_default(NULL); }
	virtual ~onv__TopicNamespaceLocation__() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__PropertyOperation_
#define SOAP_TYPE_Media_onv__PropertyOperation_ (621)
/* Primitive onv:PropertyOperation schema type: */
class SOAP_CMAC onv__PropertyOperation_ : public xsd__anyType
{
public:
	enum onv__PropertyOperation __item;
public:
	virtual int soap_type() const { return 621; } /* = unique id SOAP_TYPE_Media_onv__PropertyOperation_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__PropertyOperation_() { onv__PropertyOperation_::soap_default(NULL); }
	virtual ~onv__PropertyOperation_() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__Direction_
#define SOAP_TYPE_Media_onv__Direction_ (623)
/* Primitive onv:Direction schema type: */
class SOAP_CMAC onv__Direction_ : public xsd__anyType
{
public:
	enum onv__Direction __item;
public:
	virtual int soap_type() const { return 623; } /* = unique id SOAP_TYPE_Media_onv__Direction_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__Direction_() { onv__Direction_::soap_default(NULL); }
	virtual ~onv__Direction_() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__ClassType_
#define SOAP_TYPE_Media_onv__ClassType_ (625)
/* Primitive onv:ClassType schema type: */
class SOAP_CMAC onv__ClassType_ : public xsd__anyType
{
public:
	enum onv__ClassType __item;
public:
	virtual int soap_type() const { return 625; } /* = unique id SOAP_TYPE_Media_onv__ClassType_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__ClassType_() { onv__ClassType_::soap_default(NULL); }
	virtual ~onv__ClassType_() { }
};
#endif

#ifndef SOAP_TYPE_Media_wstop__FullTopicExpression__
#define SOAP_TYPE_Media_wstop__FullTopicExpression__ (627)
/* Primitive wstop:FullTopicExpression schema type: */
class SOAP_CMAC wstop__FullTopicExpression__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 627; } /* = unique id SOAP_TYPE_Media_wstop__FullTopicExpression__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wstop__FullTopicExpression__() { wstop__FullTopicExpression__::soap_default(NULL); }
	virtual ~wstop__FullTopicExpression__() { }
};
#endif

#ifndef SOAP_TYPE_Media_wstop__ConcreteTopicExpression__
#define SOAP_TYPE_Media_wstop__ConcreteTopicExpression__ (629)
/* Primitive wstop:ConcreteTopicExpression schema type: */
class SOAP_CMAC wstop__ConcreteTopicExpression__ : public xsd__anyType
{
public:
	std::string __item;
public:
	virtual int soap_type() const { return 629; } /* = unique id SOAP_TYPE_Media_wstop__ConcreteTopicExpression__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wstop__ConcreteTopicExpression__() { wstop__ConcreteTopicExpression__::soap_default(NULL); }
	virtual ~wstop__ConcreteTopicExpression__() { }
};
#endif

#ifndef SOAP_TYPE_Media_wstop__SimpleTopicExpression__
#define SOAP_TYPE_Media_wstop__SimpleTopicExpression__ (631)
/* Primitive wstop:SimpleTopicExpression schema type: */
class SOAP_CMAC wstop__SimpleTopicExpression__ : public xsd__anyType
{
public:
	xsd__QName __item;
public:
	virtual int soap_type() const { return 631; } /* = unique id SOAP_TYPE_Media_wstop__SimpleTopicExpression__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wstop__SimpleTopicExpression__() { wstop__SimpleTopicExpression__::soap_default(NULL); }
	virtual ~wstop__SimpleTopicExpression__() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__GetVideoSources
#define SOAP_TYPE_Media__trt__GetVideoSources (132)
/* trt:GetVideoSources */
class SOAP_CMAC _trt__GetVideoSources
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 132; } /* = unique id SOAP_TYPE_Media__trt__GetVideoSources */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoSources(): soap(NULL) { _trt__GetVideoSources::soap_default(NULL); }
	virtual ~_trt__GetVideoSources() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__GetVideoSourcesResponse
#define SOAP_TYPE_Media__trt__GetVideoSourcesResponse (133)
/* trt:GetVideoSourcesResponse */
class SOAP_CMAC _trt__GetVideoSourcesResponse
{
public:
	std::vector<class onv__VideoSource * >VideoSources;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type onv:VideoSource */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 133; } /* = unique id SOAP_TYPE_Media__trt__GetVideoSourcesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoSourcesResponse(): soap(NULL) { _trt__GetVideoSourcesResponse::soap_default(NULL); }
	virtual ~_trt__GetVideoSourcesResponse() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__GetAudioSources
#define SOAP_TYPE_Media__trt__GetAudioSources (134)
/* trt:GetAudioSources */
class SOAP_CMAC _trt__GetAudioSources
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 134; } /* = unique id SOAP_TYPE_Media__trt__GetAudioSources */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioSources(): soap(NULL) { _trt__GetAudioSources::soap_default(NULL); }
	virtual ~_trt__GetAudioSources() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__GetAudioSourcesResponse
#define SOAP_TYPE_Media__trt__GetAudioSourcesResponse (135)
/* trt:GetAudioSourcesResponse */
class SOAP_CMAC _trt__GetAudioSourcesResponse
{
public:
	std::vector<class onv__AudioSource * >AudioSources;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type onv:AudioSource */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 135; } /* = unique id SOAP_TYPE_Media__trt__GetAudioSourcesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioSourcesResponse(): soap(NULL) { _trt__GetAudioSourcesResponse::soap_default(NULL); }
	virtual ~_trt__GetAudioSourcesResponse() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__CreateProfile
#define SOAP_TYPE_Media__trt__CreateProfile (136)
/* trt:CreateProfile */
class SOAP_CMAC _trt__CreateProfile
{
public:
	std::string Name;	/* required element of type onv:Name */
	std::string *Token;	/* optional element of type onv:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 136; } /* = unique id SOAP_TYPE_Media__trt__CreateProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__CreateProfile(): Token(NULL), soap(NULL) { _trt__CreateProfile::soap_default(NULL); }
	virtual ~_trt__CreateProfile() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__CreateProfileResponse
#define SOAP_TYPE_Media__trt__CreateProfileResponse (137)
/* trt:CreateProfileResponse */
class SOAP_CMAC _trt__CreateProfileResponse
{
public:
	class onv__Profile *Profile;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onv:Profile */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 137; } /* = unique id SOAP_TYPE_Media__trt__CreateProfileResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__CreateProfileResponse(): Profile(NULL), soap(NULL) { _trt__CreateProfileResponse::soap_default(NULL); }
	virtual ~_trt__CreateProfileResponse() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__GetProfile
#define SOAP_TYPE_Media__trt__GetProfile (138)
/* trt:GetProfile */
class SOAP_CMAC _trt__GetProfile
{
public:
	std::string ProfileToken;	/* required element of type onv:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 138; } /* = unique id SOAP_TYPE_Media__trt__GetProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetProfile(): soap(NULL) { _trt__GetProfile::soap_default(NULL); }
	virtual ~_trt__GetProfile() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__GetProfileResponse
#define SOAP_TYPE_Media__trt__GetProfileResponse (139)
/* trt:GetProfileResponse */
class SOAP_CMAC _trt__GetProfileResponse
{
public:
	onv__Profile *Profile;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onv:Profile */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 139; } /* = unique id SOAP_TYPE_Media__trt__GetProfileResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetProfileResponse(): Profile(NULL), soap(NULL) { _trt__GetProfileResponse::soap_default(NULL); }
	virtual ~_trt__GetProfileResponse() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__GetProfiles
#define SOAP_TYPE_Media__trt__GetProfiles (140)
/* trt:GetProfiles */
class SOAP_CMAC _trt__GetProfiles
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 140; } /* = unique id SOAP_TYPE_Media__trt__GetProfiles */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetProfiles(): soap(NULL) { _trt__GetProfiles::soap_default(NULL); }
	virtual ~_trt__GetProfiles() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__GetProfilesResponse
#define SOAP_TYPE_Media__trt__GetProfilesResponse (141)
/* trt:GetProfilesResponse */
class SOAP_CMAC _trt__GetProfilesResponse
{
public:
	std::vector<onv__Profile * >Profiles;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type onv:Profile */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 141; } /* = unique id SOAP_TYPE_Media__trt__GetProfilesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetProfilesResponse(): soap(NULL) { _trt__GetProfilesResponse::soap_default(NULL); }
	virtual ~_trt__GetProfilesResponse() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__AddVideoEncoderConfiguration
#define SOAP_TYPE_Media__trt__AddVideoEncoderConfiguration (142)
/* trt:AddVideoEncoderConfiguration */
class SOAP_CMAC _trt__AddVideoEncoderConfiguration
{
public:
	std::string ProfileToken;	/* required element of type onv:ReferenceToken */
	std::string ConfigurationToken;	/* required element of type onv:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 142; } /* = unique id SOAP_TYPE_Media__trt__AddVideoEncoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddVideoEncoderConfiguration(): soap(NULL) { _trt__AddVideoEncoderConfiguration::soap_default(NULL); }
	virtual ~_trt__AddVideoEncoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__AddVideoEncoderConfigurationResponse
#define SOAP_TYPE_Media__trt__AddVideoEncoderConfigurationResponse (143)
/* trt:AddVideoEncoderConfigurationResponse */
class SOAP_CMAC _trt__AddVideoEncoderConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 143; } /* = unique id SOAP_TYPE_Media__trt__AddVideoEncoderConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddVideoEncoderConfigurationResponse(): soap(NULL) { _trt__AddVideoEncoderConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__AddVideoEncoderConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__RemoveVideoEncoderConfiguration
#define SOAP_TYPE_Media__trt__RemoveVideoEncoderConfiguration (144)
/* trt:RemoveVideoEncoderConfiguration */
class SOAP_CMAC _trt__RemoveVideoEncoderConfiguration
{
public:
	std::string ProfileToken;	/* required element of type onv:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 144; } /* = unique id SOAP_TYPE_Media__trt__RemoveVideoEncoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemoveVideoEncoderConfiguration(): soap(NULL) { _trt__RemoveVideoEncoderConfiguration::soap_default(NULL); }
	virtual ~_trt__RemoveVideoEncoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__RemoveVideoEncoderConfigurationResponse
#define SOAP_TYPE_Media__trt__RemoveVideoEncoderConfigurationResponse (145)
/* trt:RemoveVideoEncoderConfigurationResponse */
class SOAP_CMAC _trt__RemoveVideoEncoderConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 145; } /* = unique id SOAP_TYPE_Media__trt__RemoveVideoEncoderConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemoveVideoEncoderConfigurationResponse(): soap(NULL) { _trt__RemoveVideoEncoderConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__RemoveVideoEncoderConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__AddVideoSourceConfiguration
#define SOAP_TYPE_Media__trt__AddVideoSourceConfiguration (146)
/* trt:AddVideoSourceConfiguration */
class SOAP_CMAC _trt__AddVideoSourceConfiguration
{
public:
	std::string ProfileToken;	/* required element of type onv:ReferenceToken */
	std::string ConfigurationToken;	/* required element of type onv:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 146; } /* = unique id SOAP_TYPE_Media__trt__AddVideoSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddVideoSourceConfiguration(): soap(NULL) { _trt__AddVideoSourceConfiguration::soap_default(NULL); }
	virtual ~_trt__AddVideoSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__AddVideoSourceConfigurationResponse
#define SOAP_TYPE_Media__trt__AddVideoSourceConfigurationResponse (147)
/* trt:AddVideoSourceConfigurationResponse */
class SOAP_CMAC _trt__AddVideoSourceConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 147; } /* = unique id SOAP_TYPE_Media__trt__AddVideoSourceConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddVideoSourceConfigurationResponse(): soap(NULL) { _trt__AddVideoSourceConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__AddVideoSourceConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__RemoveVideoSourceConfiguration
#define SOAP_TYPE_Media__trt__RemoveVideoSourceConfiguration (148)
/* trt:RemoveVideoSourceConfiguration */
class SOAP_CMAC _trt__RemoveVideoSourceConfiguration
{
public:
	std::string ProfileToken;	/* required element of type onv:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 148; } /* = unique id SOAP_TYPE_Media__trt__RemoveVideoSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemoveVideoSourceConfiguration(): soap(NULL) { _trt__RemoveVideoSourceConfiguration::soap_default(NULL); }
	virtual ~_trt__RemoveVideoSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__RemoveVideoSourceConfigurationResponse
#define SOAP_TYPE_Media__trt__RemoveVideoSourceConfigurationResponse (149)
/* trt:RemoveVideoSourceConfigurationResponse */
class SOAP_CMAC _trt__RemoveVideoSourceConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 149; } /* = unique id SOAP_TYPE_Media__trt__RemoveVideoSourceConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemoveVideoSourceConfigurationResponse(): soap(NULL) { _trt__RemoveVideoSourceConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__RemoveVideoSourceConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__AddAudioEncoderConfiguration
#define SOAP_TYPE_Media__trt__AddAudioEncoderConfiguration (150)
/* trt:AddAudioEncoderConfiguration */
class SOAP_CMAC _trt__AddAudioEncoderConfiguration
{
public:
	std::string ProfileToken;	/* required element of type onv:ReferenceToken */
	std::string ConfigurationToken;	/* required element of type onv:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 150; } /* = unique id SOAP_TYPE_Media__trt__AddAudioEncoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddAudioEncoderConfiguration(): soap(NULL) { _trt__AddAudioEncoderConfiguration::soap_default(NULL); }
	virtual ~_trt__AddAudioEncoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__AddAudioEncoderConfigurationResponse
#define SOAP_TYPE_Media__trt__AddAudioEncoderConfigurationResponse (151)
/* trt:AddAudioEncoderConfigurationResponse */
class SOAP_CMAC _trt__AddAudioEncoderConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 151; } /* = unique id SOAP_TYPE_Media__trt__AddAudioEncoderConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddAudioEncoderConfigurationResponse(): soap(NULL) { _trt__AddAudioEncoderConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__AddAudioEncoderConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__RemoveAudioEncoderConfiguration
#define SOAP_TYPE_Media__trt__RemoveAudioEncoderConfiguration (152)
/* trt:RemoveAudioEncoderConfiguration */
class SOAP_CMAC _trt__RemoveAudioEncoderConfiguration
{
public:
	std::string ProfileToken;	/* required element of type onv:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 152; } /* = unique id SOAP_TYPE_Media__trt__RemoveAudioEncoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemoveAudioEncoderConfiguration(): soap(NULL) { _trt__RemoveAudioEncoderConfiguration::soap_default(NULL); }
	virtual ~_trt__RemoveAudioEncoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__RemoveAudioEncoderConfigurationResponse
#define SOAP_TYPE_Media__trt__RemoveAudioEncoderConfigurationResponse (153)
/* trt:RemoveAudioEncoderConfigurationResponse */
class SOAP_CMAC _trt__RemoveAudioEncoderConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 153; } /* = unique id SOAP_TYPE_Media__trt__RemoveAudioEncoderConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemoveAudioEncoderConfigurationResponse(): soap(NULL) { _trt__RemoveAudioEncoderConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__RemoveAudioEncoderConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__AddAudioSourceConfiguration
#define SOAP_TYPE_Media__trt__AddAudioSourceConfiguration (154)
/* trt:AddAudioSourceConfiguration */
class SOAP_CMAC _trt__AddAudioSourceConfiguration
{
public:
	std::string ProfileToken;	/* required element of type onv:ReferenceToken */
	std::string ConfigurationToken;	/* required element of type onv:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 154; } /* = unique id SOAP_TYPE_Media__trt__AddAudioSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddAudioSourceConfiguration(): soap(NULL) { _trt__AddAudioSourceConfiguration::soap_default(NULL); }
	virtual ~_trt__AddAudioSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__AddAudioSourceConfigurationResponse
#define SOAP_TYPE_Media__trt__AddAudioSourceConfigurationResponse (155)
/* trt:AddAudioSourceConfigurationResponse */
class SOAP_CMAC _trt__AddAudioSourceConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 155; } /* = unique id SOAP_TYPE_Media__trt__AddAudioSourceConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddAudioSourceConfigurationResponse(): soap(NULL) { _trt__AddAudioSourceConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__AddAudioSourceConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__RemoveAudioSourceConfiguration
#define SOAP_TYPE_Media__trt__RemoveAudioSourceConfiguration (156)
/* trt:RemoveAudioSourceConfiguration */
class SOAP_CMAC _trt__RemoveAudioSourceConfiguration
{
public:
	std::string ProfileToken;	/* required element of type onv:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 156; } /* = unique id SOAP_TYPE_Media__trt__RemoveAudioSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemoveAudioSourceConfiguration(): soap(NULL) { _trt__RemoveAudioSourceConfiguration::soap_default(NULL); }
	virtual ~_trt__RemoveAudioSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__RemoveAudioSourceConfigurationResponse
#define SOAP_TYPE_Media__trt__RemoveAudioSourceConfigurationResponse (157)
/* trt:RemoveAudioSourceConfigurationResponse */
class SOAP_CMAC _trt__RemoveAudioSourceConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 157; } /* = unique id SOAP_TYPE_Media__trt__RemoveAudioSourceConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemoveAudioSourceConfigurationResponse(): soap(NULL) { _trt__RemoveAudioSourceConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__RemoveAudioSourceConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__AddPTZConfiguration
#define SOAP_TYPE_Media__trt__AddPTZConfiguration (158)
/* trt:AddPTZConfiguration */
class SOAP_CMAC _trt__AddPTZConfiguration
{
public:
	std::string ProfileToken;	/* required element of type onv:ReferenceToken */
	std::string ConfigurationToken;	/* required element of type onv:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 158; } /* = unique id SOAP_TYPE_Media__trt__AddPTZConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddPTZConfiguration(): soap(NULL) { _trt__AddPTZConfiguration::soap_default(NULL); }
	virtual ~_trt__AddPTZConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__AddPTZConfigurationResponse
#define SOAP_TYPE_Media__trt__AddPTZConfigurationResponse (159)
/* trt:AddPTZConfigurationResponse */
class SOAP_CMAC _trt__AddPTZConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 159; } /* = unique id SOAP_TYPE_Media__trt__AddPTZConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddPTZConfigurationResponse(): soap(NULL) { _trt__AddPTZConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__AddPTZConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__RemovePTZConfiguration
#define SOAP_TYPE_Media__trt__RemovePTZConfiguration (160)
/* trt:RemovePTZConfiguration */
class SOAP_CMAC _trt__RemovePTZConfiguration
{
public:
	std::string ProfileToken;	/* required element of type onv:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 160; } /* = unique id SOAP_TYPE_Media__trt__RemovePTZConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemovePTZConfiguration(): soap(NULL) { _trt__RemovePTZConfiguration::soap_default(NULL); }
	virtual ~_trt__RemovePTZConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__RemovePTZConfigurationResponse
#define SOAP_TYPE_Media__trt__RemovePTZConfigurationResponse (161)
/* trt:RemovePTZConfigurationResponse */
class SOAP_CMAC _trt__RemovePTZConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 161; } /* = unique id SOAP_TYPE_Media__trt__RemovePTZConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemovePTZConfigurationResponse(): soap(NULL) { _trt__RemovePTZConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__RemovePTZConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__AddVideoAnalyticsConfiguration
#define SOAP_TYPE_Media__trt__AddVideoAnalyticsConfiguration (162)
/* trt:AddVideoAnalyticsConfiguration */
class SOAP_CMAC _trt__AddVideoAnalyticsConfiguration
{
public:
	std::string ProfileToken;	/* required element of type onv:ReferenceToken */
	std::string ConfigurationToken;	/* required element of type onv:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 162; } /* = unique id SOAP_TYPE_Media__trt__AddVideoAnalyticsConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddVideoAnalyticsConfiguration(): soap(NULL) { _trt__AddVideoAnalyticsConfiguration::soap_default(NULL); }
	virtual ~_trt__AddVideoAnalyticsConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__AddVideoAnalyticsConfigurationResponse
#define SOAP_TYPE_Media__trt__AddVideoAnalyticsConfigurationResponse (163)
/* trt:AddVideoAnalyticsConfigurationResponse */
class SOAP_CMAC _trt__AddVideoAnalyticsConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 163; } /* = unique id SOAP_TYPE_Media__trt__AddVideoAnalyticsConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddVideoAnalyticsConfigurationResponse(): soap(NULL) { _trt__AddVideoAnalyticsConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__AddVideoAnalyticsConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__RemoveVideoAnalyticsConfiguration
#define SOAP_TYPE_Media__trt__RemoveVideoAnalyticsConfiguration (164)
/* trt:RemoveVideoAnalyticsConfiguration */
class SOAP_CMAC _trt__RemoveVideoAnalyticsConfiguration
{
public:
	std::string ProfileToken;	/* required element of type onv:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 164; } /* = unique id SOAP_TYPE_Media__trt__RemoveVideoAnalyticsConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemoveVideoAnalyticsConfiguration(): soap(NULL) { _trt__RemoveVideoAnalyticsConfiguration::soap_default(NULL); }
	virtual ~_trt__RemoveVideoAnalyticsConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__RemoveVideoAnalyticsConfigurationResponse
#define SOAP_TYPE_Media__trt__RemoveVideoAnalyticsConfigurationResponse (165)
/* trt:RemoveVideoAnalyticsConfigurationResponse */
class SOAP_CMAC _trt__RemoveVideoAnalyticsConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 165; } /* = unique id SOAP_TYPE_Media__trt__RemoveVideoAnalyticsConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemoveVideoAnalyticsConfigurationResponse(): soap(NULL) { _trt__RemoveVideoAnalyticsConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__RemoveVideoAnalyticsConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__AddMetadataConfiguration
#define SOAP_TYPE_Media__trt__AddMetadataConfiguration (166)
/* trt:AddMetadataConfiguration */
class SOAP_CMAC _trt__AddMetadataConfiguration
{
public:
	std::string ProfileToken;	/* required element of type onv:ReferenceToken */
	std::string ConfigurationToken;	/* required element of type onv:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 166; } /* = unique id SOAP_TYPE_Media__trt__AddMetadataConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddMetadataConfiguration(): soap(NULL) { _trt__AddMetadataConfiguration::soap_default(NULL); }
	virtual ~_trt__AddMetadataConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__AddMetadataConfigurationResponse
#define SOAP_TYPE_Media__trt__AddMetadataConfigurationResponse (167)
/* trt:AddMetadataConfigurationResponse */
class SOAP_CMAC _trt__AddMetadataConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 167; } /* = unique id SOAP_TYPE_Media__trt__AddMetadataConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddMetadataConfigurationResponse(): soap(NULL) { _trt__AddMetadataConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__AddMetadataConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__RemoveMetadataConfiguration
#define SOAP_TYPE_Media__trt__RemoveMetadataConfiguration (168)
/* trt:RemoveMetadataConfiguration */
class SOAP_CMAC _trt__RemoveMetadataConfiguration
{
public:
	std::string ProfileToken;	/* required element of type onv:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 168; } /* = unique id SOAP_TYPE_Media__trt__RemoveMetadataConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemoveMetadataConfiguration(): soap(NULL) { _trt__RemoveMetadataConfiguration::soap_default(NULL); }
	virtual ~_trt__RemoveMetadataConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__RemoveMetadataConfigurationResponse
#define SOAP_TYPE_Media__trt__RemoveMetadataConfigurationResponse (169)
/* trt:RemoveMetadataConfigurationResponse */
class SOAP_CMAC _trt__RemoveMetadataConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 169; } /* = unique id SOAP_TYPE_Media__trt__RemoveMetadataConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemoveMetadataConfigurationResponse(): soap(NULL) { _trt__RemoveMetadataConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__RemoveMetadataConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__DeleteProfile
#define SOAP_TYPE_Media__trt__DeleteProfile (170)
/* trt:DeleteProfile */
class SOAP_CMAC _trt__DeleteProfile
{
public:
	std::string ProfileToken;	/* required element of type onv:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 170; } /* = unique id SOAP_TYPE_Media__trt__DeleteProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__DeleteProfile(): soap(NULL) { _trt__DeleteProfile::soap_default(NULL); }
	virtual ~_trt__DeleteProfile() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__DeleteProfileResponse
#define SOAP_TYPE_Media__trt__DeleteProfileResponse (171)
/* trt:DeleteProfileResponse */
class SOAP_CMAC _trt__DeleteProfileResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 171; } /* = unique id SOAP_TYPE_Media__trt__DeleteProfileResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__DeleteProfileResponse(): soap(NULL) { _trt__DeleteProfileResponse::soap_default(NULL); }
	virtual ~_trt__DeleteProfileResponse() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__GetVideoEncoderConfigurations
#define SOAP_TYPE_Media__trt__GetVideoEncoderConfigurations (172)
/* trt:GetVideoEncoderConfigurations */
class SOAP_CMAC _trt__GetVideoEncoderConfigurations
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 172; } /* = unique id SOAP_TYPE_Media__trt__GetVideoEncoderConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoEncoderConfigurations(): soap(NULL) { _trt__GetVideoEncoderConfigurations::soap_default(NULL); }
	virtual ~_trt__GetVideoEncoderConfigurations() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__GetVideoEncoderConfigurationsResponse
#define SOAP_TYPE_Media__trt__GetVideoEncoderConfigurationsResponse (173)
/* trt:GetVideoEncoderConfigurationsResponse */
class SOAP_CMAC _trt__GetVideoEncoderConfigurationsResponse
{
public:
	std::vector<class onv__VideoEncoderConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type onv:VideoEncoderConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 173; } /* = unique id SOAP_TYPE_Media__trt__GetVideoEncoderConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoEncoderConfigurationsResponse(): soap(NULL) { _trt__GetVideoEncoderConfigurationsResponse::soap_default(NULL); }
	virtual ~_trt__GetVideoEncoderConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__GetVideoSourceConfigurations
#define SOAP_TYPE_Media__trt__GetVideoSourceConfigurations (174)
/* trt:GetVideoSourceConfigurations */
class SOAP_CMAC _trt__GetVideoSourceConfigurations
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 174; } /* = unique id SOAP_TYPE_Media__trt__GetVideoSourceConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoSourceConfigurations(): soap(NULL) { _trt__GetVideoSourceConfigurations::soap_default(NULL); }
	virtual ~_trt__GetVideoSourceConfigurations() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__GetVideoSourceConfigurationsResponse
#define SOAP_TYPE_Media__trt__GetVideoSourceConfigurationsResponse (175)
/* trt:GetVideoSourceConfigurationsResponse */
class SOAP_CMAC _trt__GetVideoSourceConfigurationsResponse
{
public:
	std::vector<class onv__VideoSourceConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type onv:VideoSourceConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 175; } /* = unique id SOAP_TYPE_Media__trt__GetVideoSourceConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoSourceConfigurationsResponse(): soap(NULL) { _trt__GetVideoSourceConfigurationsResponse::soap_default(NULL); }
	virtual ~_trt__GetVideoSourceConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__GetAudioEncoderConfigurations
#define SOAP_TYPE_Media__trt__GetAudioEncoderConfigurations (176)
/* trt:GetAudioEncoderConfigurations */
class SOAP_CMAC _trt__GetAudioEncoderConfigurations
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 176; } /* = unique id SOAP_TYPE_Media__trt__GetAudioEncoderConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioEncoderConfigurations(): soap(NULL) { _trt__GetAudioEncoderConfigurations::soap_default(NULL); }
	virtual ~_trt__GetAudioEncoderConfigurations() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__GetAudioEncoderConfigurationsResponse
#define SOAP_TYPE_Media__trt__GetAudioEncoderConfigurationsResponse (177)
/* trt:GetAudioEncoderConfigurationsResponse */
class SOAP_CMAC _trt__GetAudioEncoderConfigurationsResponse
{
public:
	std::vector<class onv__AudioEncoderConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type onv:AudioEncoderConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 177; } /* = unique id SOAP_TYPE_Media__trt__GetAudioEncoderConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioEncoderConfigurationsResponse(): soap(NULL) { _trt__GetAudioEncoderConfigurationsResponse::soap_default(NULL); }
	virtual ~_trt__GetAudioEncoderConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__GetAudioSourceConfigurations
#define SOAP_TYPE_Media__trt__GetAudioSourceConfigurations (178)
/* trt:GetAudioSourceConfigurations */
class SOAP_CMAC _trt__GetAudioSourceConfigurations
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 178; } /* = unique id SOAP_TYPE_Media__trt__GetAudioSourceConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioSourceConfigurations(): soap(NULL) { _trt__GetAudioSourceConfigurations::soap_default(NULL); }
	virtual ~_trt__GetAudioSourceConfigurations() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__GetAudioSourceConfigurationsResponse
#define SOAP_TYPE_Media__trt__GetAudioSourceConfigurationsResponse (179)
/* trt:GetAudioSourceConfigurationsResponse */
class SOAP_CMAC _trt__GetAudioSourceConfigurationsResponse
{
public:
	std::vector<class onv__AudioSourceConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type onv:AudioSourceConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 179; } /* = unique id SOAP_TYPE_Media__trt__GetAudioSourceConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioSourceConfigurationsResponse(): soap(NULL) { _trt__GetAudioSourceConfigurationsResponse::soap_default(NULL); }
	virtual ~_trt__GetAudioSourceConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__GetVideoAnalyticsConfigurations
#define SOAP_TYPE_Media__trt__GetVideoAnalyticsConfigurations (180)
/* trt:GetVideoAnalyticsConfigurations */
class SOAP_CMAC _trt__GetVideoAnalyticsConfigurations
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 180; } /* = unique id SOAP_TYPE_Media__trt__GetVideoAnalyticsConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoAnalyticsConfigurations(): soap(NULL) { _trt__GetVideoAnalyticsConfigurations::soap_default(NULL); }
	virtual ~_trt__GetVideoAnalyticsConfigurations() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__GetVideoAnalyticsConfigurationsResponse
#define SOAP_TYPE_Media__trt__GetVideoAnalyticsConfigurationsResponse (181)
/* trt:GetVideoAnalyticsConfigurationsResponse */
class SOAP_CMAC _trt__GetVideoAnalyticsConfigurationsResponse
{
public:
	std::vector<class onv__VideoAnalyticsConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type onv:VideoAnalyticsConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 181; } /* = unique id SOAP_TYPE_Media__trt__GetVideoAnalyticsConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoAnalyticsConfigurationsResponse(): soap(NULL) { _trt__GetVideoAnalyticsConfigurationsResponse::soap_default(NULL); }
	virtual ~_trt__GetVideoAnalyticsConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__GetMetadataConfigurations
#define SOAP_TYPE_Media__trt__GetMetadataConfigurations (182)
/* trt:GetMetadataConfigurations */
class SOAP_CMAC _trt__GetMetadataConfigurations
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 182; } /* = unique id SOAP_TYPE_Media__trt__GetMetadataConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetMetadataConfigurations(): soap(NULL) { _trt__GetMetadataConfigurations::soap_default(NULL); }
	virtual ~_trt__GetMetadataConfigurations() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__GetMetadataConfigurationsResponse
#define SOAP_TYPE_Media__trt__GetMetadataConfigurationsResponse (183)
/* trt:GetMetadataConfigurationsResponse */
class SOAP_CMAC _trt__GetMetadataConfigurationsResponse
{
public:
	std::vector<class onv__MetadataConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type onv:MetadataConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 183; } /* = unique id SOAP_TYPE_Media__trt__GetMetadataConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetMetadataConfigurationsResponse(): soap(NULL) { _trt__GetMetadataConfigurationsResponse::soap_default(NULL); }
	virtual ~_trt__GetMetadataConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__GetVideoSourceConfiguration
#define SOAP_TYPE_Media__trt__GetVideoSourceConfiguration (184)
/* trt:GetVideoSourceConfiguration */
class SOAP_CMAC _trt__GetVideoSourceConfiguration
{
public:
	std::string ConfigurationToken;	/* required element of type onv:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 184; } /* = unique id SOAP_TYPE_Media__trt__GetVideoSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoSourceConfiguration(): soap(NULL) { _trt__GetVideoSourceConfiguration::soap_default(NULL); }
	virtual ~_trt__GetVideoSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__GetVideoSourceConfigurationResponse
#define SOAP_TYPE_Media__trt__GetVideoSourceConfigurationResponse (185)
/* trt:GetVideoSourceConfigurationResponse */
class SOAP_CMAC _trt__GetVideoSourceConfigurationResponse
{
public:
	onv__VideoSourceConfiguration *Configuration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onv:VideoSourceConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 185; } /* = unique id SOAP_TYPE_Media__trt__GetVideoSourceConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoSourceConfigurationResponse(): Configuration(NULL), soap(NULL) { _trt__GetVideoSourceConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__GetVideoSourceConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__GetVideoEncoderConfiguration
#define SOAP_TYPE_Media__trt__GetVideoEncoderConfiguration (186)
/* trt:GetVideoEncoderConfiguration */
class SOAP_CMAC _trt__GetVideoEncoderConfiguration
{
public:
	std::string ConfigurationToken;	/* required element of type onv:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 186; } /* = unique id SOAP_TYPE_Media__trt__GetVideoEncoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoEncoderConfiguration(): soap(NULL) { _trt__GetVideoEncoderConfiguration::soap_default(NULL); }
	virtual ~_trt__GetVideoEncoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__GetVideoEncoderConfigurationResponse
#define SOAP_TYPE_Media__trt__GetVideoEncoderConfigurationResponse (187)
/* trt:GetVideoEncoderConfigurationResponse */
class SOAP_CMAC _trt__GetVideoEncoderConfigurationResponse
{
public:
	onv__VideoEncoderConfiguration *Configuration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onv:VideoEncoderConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 187; } /* = unique id SOAP_TYPE_Media__trt__GetVideoEncoderConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoEncoderConfigurationResponse(): Configuration(NULL), soap(NULL) { _trt__GetVideoEncoderConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__GetVideoEncoderConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__GetAudioSourceConfiguration
#define SOAP_TYPE_Media__trt__GetAudioSourceConfiguration (188)
/* trt:GetAudioSourceConfiguration */
class SOAP_CMAC _trt__GetAudioSourceConfiguration
{
public:
	std::string ConfigurationToken;	/* required element of type onv:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 188; } /* = unique id SOAP_TYPE_Media__trt__GetAudioSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioSourceConfiguration(): soap(NULL) { _trt__GetAudioSourceConfiguration::soap_default(NULL); }
	virtual ~_trt__GetAudioSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__GetAudioSourceConfigurationResponse
#define SOAP_TYPE_Media__trt__GetAudioSourceConfigurationResponse (189)
/* trt:GetAudioSourceConfigurationResponse */
class SOAP_CMAC _trt__GetAudioSourceConfigurationResponse
{
public:
	onv__AudioSourceConfiguration *Configuration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onv:AudioSourceConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 189; } /* = unique id SOAP_TYPE_Media__trt__GetAudioSourceConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioSourceConfigurationResponse(): Configuration(NULL), soap(NULL) { _trt__GetAudioSourceConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__GetAudioSourceConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__GetAudioEncoderConfiguration
#define SOAP_TYPE_Media__trt__GetAudioEncoderConfiguration (190)
/* trt:GetAudioEncoderConfiguration */
class SOAP_CMAC _trt__GetAudioEncoderConfiguration
{
public:
	std::string ConfigurationToken;	/* required element of type onv:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 190; } /* = unique id SOAP_TYPE_Media__trt__GetAudioEncoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioEncoderConfiguration(): soap(NULL) { _trt__GetAudioEncoderConfiguration::soap_default(NULL); }
	virtual ~_trt__GetAudioEncoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__GetAudioEncoderConfigurationResponse
#define SOAP_TYPE_Media__trt__GetAudioEncoderConfigurationResponse (191)
/* trt:GetAudioEncoderConfigurationResponse */
class SOAP_CMAC _trt__GetAudioEncoderConfigurationResponse
{
public:
	onv__AudioEncoderConfiguration *Configuration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onv:AudioEncoderConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 191; } /* = unique id SOAP_TYPE_Media__trt__GetAudioEncoderConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioEncoderConfigurationResponse(): Configuration(NULL), soap(NULL) { _trt__GetAudioEncoderConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__GetAudioEncoderConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__GetVideoAnalyticsConfiguration
#define SOAP_TYPE_Media__trt__GetVideoAnalyticsConfiguration (192)
/* trt:GetVideoAnalyticsConfiguration */
class SOAP_CMAC _trt__GetVideoAnalyticsConfiguration
{
public:
	std::string ConfigurationToken;	/* required element of type onv:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 192; } /* = unique id SOAP_TYPE_Media__trt__GetVideoAnalyticsConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoAnalyticsConfiguration(): soap(NULL) { _trt__GetVideoAnalyticsConfiguration::soap_default(NULL); }
	virtual ~_trt__GetVideoAnalyticsConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__GetVideoAnalyticsConfigurationResponse
#define SOAP_TYPE_Media__trt__GetVideoAnalyticsConfigurationResponse (193)
/* trt:GetVideoAnalyticsConfigurationResponse */
class SOAP_CMAC _trt__GetVideoAnalyticsConfigurationResponse
{
public:
	onv__VideoAnalyticsConfiguration *Configuration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onv:VideoAnalyticsConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 193; } /* = unique id SOAP_TYPE_Media__trt__GetVideoAnalyticsConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoAnalyticsConfigurationResponse(): Configuration(NULL), soap(NULL) { _trt__GetVideoAnalyticsConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__GetVideoAnalyticsConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__GetMetadataConfiguration
#define SOAP_TYPE_Media__trt__GetMetadataConfiguration (194)
/* trt:GetMetadataConfiguration */
class SOAP_CMAC _trt__GetMetadataConfiguration
{
public:
	std::string ConfigurationToken;	/* required element of type onv:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 194; } /* = unique id SOAP_TYPE_Media__trt__GetMetadataConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetMetadataConfiguration(): soap(NULL) { _trt__GetMetadataConfiguration::soap_default(NULL); }
	virtual ~_trt__GetMetadataConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__GetMetadataConfigurationResponse
#define SOAP_TYPE_Media__trt__GetMetadataConfigurationResponse (195)
/* trt:GetMetadataConfigurationResponse */
class SOAP_CMAC _trt__GetMetadataConfigurationResponse
{
public:
	onv__MetadataConfiguration *Configuration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onv:MetadataConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 195; } /* = unique id SOAP_TYPE_Media__trt__GetMetadataConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetMetadataConfigurationResponse(): Configuration(NULL), soap(NULL) { _trt__GetMetadataConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__GetMetadataConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__GetCompatibleVideoEncoderConfigurations
#define SOAP_TYPE_Media__trt__GetCompatibleVideoEncoderConfigurations (196)
/* trt:GetCompatibleVideoEncoderConfigurations */
class SOAP_CMAC _trt__GetCompatibleVideoEncoderConfigurations
{
public:
	std::string ProfileToken;	/* required element of type onv:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 196; } /* = unique id SOAP_TYPE_Media__trt__GetCompatibleVideoEncoderConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetCompatibleVideoEncoderConfigurations(): soap(NULL) { _trt__GetCompatibleVideoEncoderConfigurations::soap_default(NULL); }
	virtual ~_trt__GetCompatibleVideoEncoderConfigurations() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__GetCompatibleVideoEncoderConfigurationsResponse
#define SOAP_TYPE_Media__trt__GetCompatibleVideoEncoderConfigurationsResponse (197)
/* trt:GetCompatibleVideoEncoderConfigurationsResponse */
class SOAP_CMAC _trt__GetCompatibleVideoEncoderConfigurationsResponse
{
public:
	std::vector<onv__VideoEncoderConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type onv:VideoEncoderConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 197; } /* = unique id SOAP_TYPE_Media__trt__GetCompatibleVideoEncoderConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetCompatibleVideoEncoderConfigurationsResponse(): soap(NULL) { _trt__GetCompatibleVideoEncoderConfigurationsResponse::soap_default(NULL); }
	virtual ~_trt__GetCompatibleVideoEncoderConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__GetCompatibleVideoSourceConfigurations
#define SOAP_TYPE_Media__trt__GetCompatibleVideoSourceConfigurations (198)
/* trt:GetCompatibleVideoSourceConfigurations */
class SOAP_CMAC _trt__GetCompatibleVideoSourceConfigurations
{
public:
	std::string ProfileToken;	/* required element of type onv:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 198; } /* = unique id SOAP_TYPE_Media__trt__GetCompatibleVideoSourceConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetCompatibleVideoSourceConfigurations(): soap(NULL) { _trt__GetCompatibleVideoSourceConfigurations::soap_default(NULL); }
	virtual ~_trt__GetCompatibleVideoSourceConfigurations() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__GetCompatibleVideoSourceConfigurationsResponse
#define SOAP_TYPE_Media__trt__GetCompatibleVideoSourceConfigurationsResponse (199)
/* trt:GetCompatibleVideoSourceConfigurationsResponse */
class SOAP_CMAC _trt__GetCompatibleVideoSourceConfigurationsResponse
{
public:
	std::vector<onv__VideoSourceConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type onv:VideoSourceConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 199; } /* = unique id SOAP_TYPE_Media__trt__GetCompatibleVideoSourceConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetCompatibleVideoSourceConfigurationsResponse(): soap(NULL) { _trt__GetCompatibleVideoSourceConfigurationsResponse::soap_default(NULL); }
	virtual ~_trt__GetCompatibleVideoSourceConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__GetCompatibleAudioEncoderConfigurations
#define SOAP_TYPE_Media__trt__GetCompatibleAudioEncoderConfigurations (200)
/* trt:GetCompatibleAudioEncoderConfigurations */
class SOAP_CMAC _trt__GetCompatibleAudioEncoderConfigurations
{
public:
	std::string ProfileToken;	/* required element of type onv:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 200; } /* = unique id SOAP_TYPE_Media__trt__GetCompatibleAudioEncoderConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetCompatibleAudioEncoderConfigurations(): soap(NULL) { _trt__GetCompatibleAudioEncoderConfigurations::soap_default(NULL); }
	virtual ~_trt__GetCompatibleAudioEncoderConfigurations() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__GetCompatibleAudioEncoderConfigurationsResponse
#define SOAP_TYPE_Media__trt__GetCompatibleAudioEncoderConfigurationsResponse (201)
/* trt:GetCompatibleAudioEncoderConfigurationsResponse */
class SOAP_CMAC _trt__GetCompatibleAudioEncoderConfigurationsResponse
{
public:
	std::vector<onv__AudioEncoderConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type onv:AudioEncoderConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 201; } /* = unique id SOAP_TYPE_Media__trt__GetCompatibleAudioEncoderConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetCompatibleAudioEncoderConfigurationsResponse(): soap(NULL) { _trt__GetCompatibleAudioEncoderConfigurationsResponse::soap_default(NULL); }
	virtual ~_trt__GetCompatibleAudioEncoderConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__GetCompatibleAudioSourceConfigurations
#define SOAP_TYPE_Media__trt__GetCompatibleAudioSourceConfigurations (202)
/* trt:GetCompatibleAudioSourceConfigurations */
class SOAP_CMAC _trt__GetCompatibleAudioSourceConfigurations
{
public:
	std::string ProfileToken;	/* required element of type onv:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 202; } /* = unique id SOAP_TYPE_Media__trt__GetCompatibleAudioSourceConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetCompatibleAudioSourceConfigurations(): soap(NULL) { _trt__GetCompatibleAudioSourceConfigurations::soap_default(NULL); }
	virtual ~_trt__GetCompatibleAudioSourceConfigurations() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__GetCompatibleAudioSourceConfigurationsResponse
#define SOAP_TYPE_Media__trt__GetCompatibleAudioSourceConfigurationsResponse (203)
/* trt:GetCompatibleAudioSourceConfigurationsResponse */
class SOAP_CMAC _trt__GetCompatibleAudioSourceConfigurationsResponse
{
public:
	std::vector<onv__AudioSourceConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type onv:AudioSourceConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 203; } /* = unique id SOAP_TYPE_Media__trt__GetCompatibleAudioSourceConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetCompatibleAudioSourceConfigurationsResponse(): soap(NULL) { _trt__GetCompatibleAudioSourceConfigurationsResponse::soap_default(NULL); }
	virtual ~_trt__GetCompatibleAudioSourceConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__GetCompatibleVideoAnalyticsConfigurations
#define SOAP_TYPE_Media__trt__GetCompatibleVideoAnalyticsConfigurations (204)
/* trt:GetCompatibleVideoAnalyticsConfigurations */
class SOAP_CMAC _trt__GetCompatibleVideoAnalyticsConfigurations
{
public:
	std::string ProfileToken;	/* required element of type onv:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 204; } /* = unique id SOAP_TYPE_Media__trt__GetCompatibleVideoAnalyticsConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetCompatibleVideoAnalyticsConfigurations(): soap(NULL) { _trt__GetCompatibleVideoAnalyticsConfigurations::soap_default(NULL); }
	virtual ~_trt__GetCompatibleVideoAnalyticsConfigurations() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__GetCompatibleVideoAnalyticsConfigurationsResponse
#define SOAP_TYPE_Media__trt__GetCompatibleVideoAnalyticsConfigurationsResponse (205)
/* trt:GetCompatibleVideoAnalyticsConfigurationsResponse */
class SOAP_CMAC _trt__GetCompatibleVideoAnalyticsConfigurationsResponse
{
public:
	std::vector<onv__VideoAnalyticsConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type onv:VideoAnalyticsConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 205; } /* = unique id SOAP_TYPE_Media__trt__GetCompatibleVideoAnalyticsConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetCompatibleVideoAnalyticsConfigurationsResponse(): soap(NULL) { _trt__GetCompatibleVideoAnalyticsConfigurationsResponse::soap_default(NULL); }
	virtual ~_trt__GetCompatibleVideoAnalyticsConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__GetCompatibleMetadataConfigurations
#define SOAP_TYPE_Media__trt__GetCompatibleMetadataConfigurations (206)
/* trt:GetCompatibleMetadataConfigurations */
class SOAP_CMAC _trt__GetCompatibleMetadataConfigurations
{
public:
	std::string ProfileToken;	/* required element of type onv:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 206; } /* = unique id SOAP_TYPE_Media__trt__GetCompatibleMetadataConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetCompatibleMetadataConfigurations(): soap(NULL) { _trt__GetCompatibleMetadataConfigurations::soap_default(NULL); }
	virtual ~_trt__GetCompatibleMetadataConfigurations() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__GetCompatibleMetadataConfigurationsResponse
#define SOAP_TYPE_Media__trt__GetCompatibleMetadataConfigurationsResponse (207)
/* trt:GetCompatibleMetadataConfigurationsResponse */
class SOAP_CMAC _trt__GetCompatibleMetadataConfigurationsResponse
{
public:
	std::vector<onv__MetadataConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type onv:MetadataConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 207; } /* = unique id SOAP_TYPE_Media__trt__GetCompatibleMetadataConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetCompatibleMetadataConfigurationsResponse(): soap(NULL) { _trt__GetCompatibleMetadataConfigurationsResponse::soap_default(NULL); }
	virtual ~_trt__GetCompatibleMetadataConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__SetVideoEncoderConfiguration
#define SOAP_TYPE_Media__trt__SetVideoEncoderConfiguration (208)
/* trt:SetVideoEncoderConfiguration */
class SOAP_CMAC _trt__SetVideoEncoderConfiguration
{
public:
	onv__VideoEncoderConfiguration *Configuration;	/* required element of type onv:VideoEncoderConfiguration */
	bool ForcePersistence;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 208; } /* = unique id SOAP_TYPE_Media__trt__SetVideoEncoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetVideoEncoderConfiguration(): Configuration(NULL), soap(NULL) { _trt__SetVideoEncoderConfiguration::soap_default(NULL); }
	virtual ~_trt__SetVideoEncoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__SetVideoEncoderConfigurationResponse
#define SOAP_TYPE_Media__trt__SetVideoEncoderConfigurationResponse (209)
/* trt:SetVideoEncoderConfigurationResponse */
class SOAP_CMAC _trt__SetVideoEncoderConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 209; } /* = unique id SOAP_TYPE_Media__trt__SetVideoEncoderConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetVideoEncoderConfigurationResponse(): soap(NULL) { _trt__SetVideoEncoderConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__SetVideoEncoderConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__SetVideoSourceConfiguration
#define SOAP_TYPE_Media__trt__SetVideoSourceConfiguration (210)
/* trt:SetVideoSourceConfiguration */
class SOAP_CMAC _trt__SetVideoSourceConfiguration
{
public:
	onv__VideoSourceConfiguration *Configuration;	/* required element of type onv:VideoSourceConfiguration */
	bool ForcePersistence;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 210; } /* = unique id SOAP_TYPE_Media__trt__SetVideoSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetVideoSourceConfiguration(): Configuration(NULL), soap(NULL) { _trt__SetVideoSourceConfiguration::soap_default(NULL); }
	virtual ~_trt__SetVideoSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__SetVideoSourceConfigurationResponse
#define SOAP_TYPE_Media__trt__SetVideoSourceConfigurationResponse (211)
/* trt:SetVideoSourceConfigurationResponse */
class SOAP_CMAC _trt__SetVideoSourceConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 211; } /* = unique id SOAP_TYPE_Media__trt__SetVideoSourceConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetVideoSourceConfigurationResponse(): soap(NULL) { _trt__SetVideoSourceConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__SetVideoSourceConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__SetAudioEncoderConfiguration
#define SOAP_TYPE_Media__trt__SetAudioEncoderConfiguration (212)
/* trt:SetAudioEncoderConfiguration */
class SOAP_CMAC _trt__SetAudioEncoderConfiguration
{
public:
	onv__AudioEncoderConfiguration *Configuration;	/* required element of type onv:AudioEncoderConfiguration */
	bool ForcePersistence;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 212; } /* = unique id SOAP_TYPE_Media__trt__SetAudioEncoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetAudioEncoderConfiguration(): Configuration(NULL), soap(NULL) { _trt__SetAudioEncoderConfiguration::soap_default(NULL); }
	virtual ~_trt__SetAudioEncoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__SetAudioEncoderConfigurationResponse
#define SOAP_TYPE_Media__trt__SetAudioEncoderConfigurationResponse (213)
/* trt:SetAudioEncoderConfigurationResponse */
class SOAP_CMAC _trt__SetAudioEncoderConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 213; } /* = unique id SOAP_TYPE_Media__trt__SetAudioEncoderConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetAudioEncoderConfigurationResponse(): soap(NULL) { _trt__SetAudioEncoderConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__SetAudioEncoderConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__SetAudioSourceConfiguration
#define SOAP_TYPE_Media__trt__SetAudioSourceConfiguration (214)
/* trt:SetAudioSourceConfiguration */
class SOAP_CMAC _trt__SetAudioSourceConfiguration
{
public:
	onv__AudioSourceConfiguration *Configuration;	/* required element of type onv:AudioSourceConfiguration */
	bool ForcePersistence;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 214; } /* = unique id SOAP_TYPE_Media__trt__SetAudioSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetAudioSourceConfiguration(): Configuration(NULL), soap(NULL) { _trt__SetAudioSourceConfiguration::soap_default(NULL); }
	virtual ~_trt__SetAudioSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__SetAudioSourceConfigurationResponse
#define SOAP_TYPE_Media__trt__SetAudioSourceConfigurationResponse (215)
/* trt:SetAudioSourceConfigurationResponse */
class SOAP_CMAC _trt__SetAudioSourceConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 215; } /* = unique id SOAP_TYPE_Media__trt__SetAudioSourceConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetAudioSourceConfigurationResponse(): soap(NULL) { _trt__SetAudioSourceConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__SetAudioSourceConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__SetVideoAnalyticsConfiguration
#define SOAP_TYPE_Media__trt__SetVideoAnalyticsConfiguration (216)
/* trt:SetVideoAnalyticsConfiguration */
class SOAP_CMAC _trt__SetVideoAnalyticsConfiguration
{
public:
	onv__VideoAnalyticsConfiguration *Configuration;	/* required element of type onv:VideoAnalyticsConfiguration */
	bool ForcePersistence;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 216; } /* = unique id SOAP_TYPE_Media__trt__SetVideoAnalyticsConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetVideoAnalyticsConfiguration(): Configuration(NULL), soap(NULL) { _trt__SetVideoAnalyticsConfiguration::soap_default(NULL); }
	virtual ~_trt__SetVideoAnalyticsConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__SetVideoAnalyticsConfigurationResponse
#define SOAP_TYPE_Media__trt__SetVideoAnalyticsConfigurationResponse (217)
/* trt:SetVideoAnalyticsConfigurationResponse */
class SOAP_CMAC _trt__SetVideoAnalyticsConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 217; } /* = unique id SOAP_TYPE_Media__trt__SetVideoAnalyticsConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetVideoAnalyticsConfigurationResponse(): soap(NULL) { _trt__SetVideoAnalyticsConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__SetVideoAnalyticsConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__SetMetadataConfiguration
#define SOAP_TYPE_Media__trt__SetMetadataConfiguration (218)
/* trt:SetMetadataConfiguration */
class SOAP_CMAC _trt__SetMetadataConfiguration
{
public:
	onv__MetadataConfiguration *Configuration;	/* required element of type onv:MetadataConfiguration */
	bool ForcePersistence;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 218; } /* = unique id SOAP_TYPE_Media__trt__SetMetadataConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetMetadataConfiguration(): Configuration(NULL), soap(NULL) { _trt__SetMetadataConfiguration::soap_default(NULL); }
	virtual ~_trt__SetMetadataConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__SetMetadataConfigurationResponse
#define SOAP_TYPE_Media__trt__SetMetadataConfigurationResponse (219)
/* trt:SetMetadataConfigurationResponse */
class SOAP_CMAC _trt__SetMetadataConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 219; } /* = unique id SOAP_TYPE_Media__trt__SetMetadataConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetMetadataConfigurationResponse(): soap(NULL) { _trt__SetMetadataConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__SetMetadataConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__GetVideoSourceConfigurationOptions
#define SOAP_TYPE_Media__trt__GetVideoSourceConfigurationOptions (220)
/* trt:GetVideoSourceConfigurationOptions */
class SOAP_CMAC _trt__GetVideoSourceConfigurationOptions
{
public:
	std::string *ConfigurationToken;	/* optional element of type onv:ReferenceToken */
	std::string *ProfileToken;	/* optional element of type onv:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 220; } /* = unique id SOAP_TYPE_Media__trt__GetVideoSourceConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoSourceConfigurationOptions(): ConfigurationToken(NULL), ProfileToken(NULL), soap(NULL) { _trt__GetVideoSourceConfigurationOptions::soap_default(NULL); }
	virtual ~_trt__GetVideoSourceConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__GetVideoSourceConfigurationOptionsResponse
#define SOAP_TYPE_Media__trt__GetVideoSourceConfigurationOptionsResponse (221)
/* trt:GetVideoSourceConfigurationOptionsResponse */
class SOAP_CMAC _trt__GetVideoSourceConfigurationOptionsResponse
{
public:
	class onv__VideoSourceConfigurationOptions *Options;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onv:VideoSourceConfigurationOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 221; } /* = unique id SOAP_TYPE_Media__trt__GetVideoSourceConfigurationOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoSourceConfigurationOptionsResponse(): Options(NULL), soap(NULL) { _trt__GetVideoSourceConfigurationOptionsResponse::soap_default(NULL); }
	virtual ~_trt__GetVideoSourceConfigurationOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__GetVideoEncoderConfigurationOptions
#define SOAP_TYPE_Media__trt__GetVideoEncoderConfigurationOptions (222)
/* trt:GetVideoEncoderConfigurationOptions */
class SOAP_CMAC _trt__GetVideoEncoderConfigurationOptions
{
public:
	std::string *ConfigurationToken;	/* optional element of type onv:ReferenceToken */
	std::string *ProfileToken;	/* optional element of type onv:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 222; } /* = unique id SOAP_TYPE_Media__trt__GetVideoEncoderConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoEncoderConfigurationOptions(): ConfigurationToken(NULL), ProfileToken(NULL), soap(NULL) { _trt__GetVideoEncoderConfigurationOptions::soap_default(NULL); }
	virtual ~_trt__GetVideoEncoderConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__GetVideoEncoderConfigurationOptionsResponse
#define SOAP_TYPE_Media__trt__GetVideoEncoderConfigurationOptionsResponse (223)
/* trt:GetVideoEncoderConfigurationOptionsResponse */
class SOAP_CMAC _trt__GetVideoEncoderConfigurationOptionsResponse
{
public:
	class onv__VideoEncoderConfigurationOptions *Options;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onv:VideoEncoderConfigurationOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 223; } /* = unique id SOAP_TYPE_Media__trt__GetVideoEncoderConfigurationOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoEncoderConfigurationOptionsResponse(): Options(NULL), soap(NULL) { _trt__GetVideoEncoderConfigurationOptionsResponse::soap_default(NULL); }
	virtual ~_trt__GetVideoEncoderConfigurationOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__GetAudioSourceConfigurationOptions
#define SOAP_TYPE_Media__trt__GetAudioSourceConfigurationOptions (224)
/* trt:GetAudioSourceConfigurationOptions */
class SOAP_CMAC _trt__GetAudioSourceConfigurationOptions
{
public:
	std::string *ConfigurationToken;	/* optional element of type onv:ReferenceToken */
	std::string *ProfileToken;	/* optional element of type onv:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 224; } /* = unique id SOAP_TYPE_Media__trt__GetAudioSourceConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioSourceConfigurationOptions(): ConfigurationToken(NULL), ProfileToken(NULL), soap(NULL) { _trt__GetAudioSourceConfigurationOptions::soap_default(NULL); }
	virtual ~_trt__GetAudioSourceConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__GetAudioSourceConfigurationOptionsResponse
#define SOAP_TYPE_Media__trt__GetAudioSourceConfigurationOptionsResponse (225)
/* trt:GetAudioSourceConfigurationOptionsResponse */
class SOAP_CMAC _trt__GetAudioSourceConfigurationOptionsResponse
{
public:
	class onv__AudioSourceConfigurationOptions *Options;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onv:AudioSourceConfigurationOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 225; } /* = unique id SOAP_TYPE_Media__trt__GetAudioSourceConfigurationOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioSourceConfigurationOptionsResponse(): Options(NULL), soap(NULL) { _trt__GetAudioSourceConfigurationOptionsResponse::soap_default(NULL); }
	virtual ~_trt__GetAudioSourceConfigurationOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__GetAudioEncoderConfigurationOptions
#define SOAP_TYPE_Media__trt__GetAudioEncoderConfigurationOptions (226)
/* trt:GetAudioEncoderConfigurationOptions */
class SOAP_CMAC _trt__GetAudioEncoderConfigurationOptions
{
public:
	std::string *ConfigurationToken;	/* optional element of type onv:ReferenceToken */
	std::string *ProfileToken;	/* optional element of type onv:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 226; } /* = unique id SOAP_TYPE_Media__trt__GetAudioEncoderConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioEncoderConfigurationOptions(): ConfigurationToken(NULL), ProfileToken(NULL), soap(NULL) { _trt__GetAudioEncoderConfigurationOptions::soap_default(NULL); }
	virtual ~_trt__GetAudioEncoderConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__GetAudioEncoderConfigurationOptionsResponse
#define SOAP_TYPE_Media__trt__GetAudioEncoderConfigurationOptionsResponse (227)
/* trt:GetAudioEncoderConfigurationOptionsResponse */
class SOAP_CMAC _trt__GetAudioEncoderConfigurationOptionsResponse
{
public:
	class onv__AudioEncoderConfigurationOptions *Options;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onv:AudioEncoderConfigurationOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 227; } /* = unique id SOAP_TYPE_Media__trt__GetAudioEncoderConfigurationOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioEncoderConfigurationOptionsResponse(): Options(NULL), soap(NULL) { _trt__GetAudioEncoderConfigurationOptionsResponse::soap_default(NULL); }
	virtual ~_trt__GetAudioEncoderConfigurationOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__GetMetadataConfigurationOptions
#define SOAP_TYPE_Media__trt__GetMetadataConfigurationOptions (228)
/* trt:GetMetadataConfigurationOptions */
class SOAP_CMAC _trt__GetMetadataConfigurationOptions
{
public:
	std::string *ConfigurationToken;	/* optional element of type onv:ReferenceToken */
	std::string *ProfileToken;	/* optional element of type onv:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 228; } /* = unique id SOAP_TYPE_Media__trt__GetMetadataConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetMetadataConfigurationOptions(): ConfigurationToken(NULL), ProfileToken(NULL), soap(NULL) { _trt__GetMetadataConfigurationOptions::soap_default(NULL); }
	virtual ~_trt__GetMetadataConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__GetMetadataConfigurationOptionsResponse
#define SOAP_TYPE_Media__trt__GetMetadataConfigurationOptionsResponse (229)
/* trt:GetMetadataConfigurationOptionsResponse */
class SOAP_CMAC _trt__GetMetadataConfigurationOptionsResponse
{
public:
	class onv__MetadataConfigurationOptions *Options;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onv:MetadataConfigurationOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 229; } /* = unique id SOAP_TYPE_Media__trt__GetMetadataConfigurationOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetMetadataConfigurationOptionsResponse(): Options(NULL), soap(NULL) { _trt__GetMetadataConfigurationOptionsResponse::soap_default(NULL); }
	virtual ~_trt__GetMetadataConfigurationOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__GetGuaranteedNumberOfVideoEncoderInstances
#define SOAP_TYPE_Media__trt__GetGuaranteedNumberOfVideoEncoderInstances (230)
/* trt:GetGuaranteedNumberOfVideoEncoderInstances */
class SOAP_CMAC _trt__GetGuaranteedNumberOfVideoEncoderInstances
{
public:
	std::string ConfigurationToken;	/* required element of type onv:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 230; } /* = unique id SOAP_TYPE_Media__trt__GetGuaranteedNumberOfVideoEncoderInstances */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetGuaranteedNumberOfVideoEncoderInstances(): soap(NULL) { _trt__GetGuaranteedNumberOfVideoEncoderInstances::soap_default(NULL); }
	virtual ~_trt__GetGuaranteedNumberOfVideoEncoderInstances() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse
#define SOAP_TYPE_Media__trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse (231)
/* trt:GetGuaranteedNumberOfVideoEncoderInstancesResponse */
class SOAP_CMAC _trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse
{
public:
	int TotalNumber;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	int *JPEG;	/* optional element of type xsd:int */
	int *H264;	/* optional element of type xsd:int */
	int *MPEG4;	/* optional element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 231; } /* = unique id SOAP_TYPE_Media__trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse(): JPEG(NULL), H264(NULL), MPEG4(NULL), soap(NULL) { _trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse::soap_default(NULL); }
	virtual ~_trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__GetStreamUri
#define SOAP_TYPE_Media__trt__GetStreamUri (232)
/* trt:GetStreamUri */
class SOAP_CMAC _trt__GetStreamUri
{
public:
	class onv__StreamSetup *StreamSetup;	/* required element of type onv:StreamSetup */
	std::string ProfileToken;	/* required element of type onv:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 232; } /* = unique id SOAP_TYPE_Media__trt__GetStreamUri */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetStreamUri(): StreamSetup(NULL), soap(NULL) { _trt__GetStreamUri::soap_default(NULL); }
	virtual ~_trt__GetStreamUri() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__GetStreamUriResponse
#define SOAP_TYPE_Media__trt__GetStreamUriResponse (233)
/* trt:GetStreamUriResponse */
class SOAP_CMAC _trt__GetStreamUriResponse
{
public:
	class onv__MediaUri *MediaUri;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onv:MediaUri */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 233; } /* = unique id SOAP_TYPE_Media__trt__GetStreamUriResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetStreamUriResponse(): MediaUri(NULL), soap(NULL) { _trt__GetStreamUriResponse::soap_default(NULL); }
	virtual ~_trt__GetStreamUriResponse() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__StartMulticastStreaming
#define SOAP_TYPE_Media__trt__StartMulticastStreaming (234)
/* trt:StartMulticastStreaming */
class SOAP_CMAC _trt__StartMulticastStreaming
{
public:
	std::string ProfileToken;	/* required element of type onv:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 234; } /* = unique id SOAP_TYPE_Media__trt__StartMulticastStreaming */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__StartMulticastStreaming(): soap(NULL) { _trt__StartMulticastStreaming::soap_default(NULL); }
	virtual ~_trt__StartMulticastStreaming() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__StartMulticastStreamingResponse
#define SOAP_TYPE_Media__trt__StartMulticastStreamingResponse (235)
/* trt:StartMulticastStreamingResponse */
class SOAP_CMAC _trt__StartMulticastStreamingResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 235; } /* = unique id SOAP_TYPE_Media__trt__StartMulticastStreamingResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__StartMulticastStreamingResponse(): soap(NULL) { _trt__StartMulticastStreamingResponse::soap_default(NULL); }
	virtual ~_trt__StartMulticastStreamingResponse() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__StopMulticastStreaming
#define SOAP_TYPE_Media__trt__StopMulticastStreaming (236)
/* trt:StopMulticastStreaming */
class SOAP_CMAC _trt__StopMulticastStreaming
{
public:
	std::string ProfileToken;	/* required element of type onv:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 236; } /* = unique id SOAP_TYPE_Media__trt__StopMulticastStreaming */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__StopMulticastStreaming(): soap(NULL) { _trt__StopMulticastStreaming::soap_default(NULL); }
	virtual ~_trt__StopMulticastStreaming() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__StopMulticastStreamingResponse
#define SOAP_TYPE_Media__trt__StopMulticastStreamingResponse (237)
/* trt:StopMulticastStreamingResponse */
class SOAP_CMAC _trt__StopMulticastStreamingResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 237; } /* = unique id SOAP_TYPE_Media__trt__StopMulticastStreamingResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__StopMulticastStreamingResponse(): soap(NULL) { _trt__StopMulticastStreamingResponse::soap_default(NULL); }
	virtual ~_trt__StopMulticastStreamingResponse() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__SetSynchronizationPoint
#define SOAP_TYPE_Media__trt__SetSynchronizationPoint (238)
/* trt:SetSynchronizationPoint */
class SOAP_CMAC _trt__SetSynchronizationPoint
{
public:
	std::string ProfileToken;	/* required element of type onv:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 238; } /* = unique id SOAP_TYPE_Media__trt__SetSynchronizationPoint */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetSynchronizationPoint(): soap(NULL) { _trt__SetSynchronizationPoint::soap_default(NULL); }
	virtual ~_trt__SetSynchronizationPoint() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__SetSynchronizationPointResponse
#define SOAP_TYPE_Media__trt__SetSynchronizationPointResponse (239)
/* trt:SetSynchronizationPointResponse */
class SOAP_CMAC _trt__SetSynchronizationPointResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 239; } /* = unique id SOAP_TYPE_Media__trt__SetSynchronizationPointResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetSynchronizationPointResponse(): soap(NULL) { _trt__SetSynchronizationPointResponse::soap_default(NULL); }
	virtual ~_trt__SetSynchronizationPointResponse() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__GetSnapshotUri
#define SOAP_TYPE_Media__trt__GetSnapshotUri (240)
/* trt:GetSnapshotUri */
class SOAP_CMAC _trt__GetSnapshotUri
{
public:
	std::string ProfileToken;	/* required element of type onv:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 240; } /* = unique id SOAP_TYPE_Media__trt__GetSnapshotUri */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetSnapshotUri(): soap(NULL) { _trt__GetSnapshotUri::soap_default(NULL); }
	virtual ~_trt__GetSnapshotUri() { }
};
#endif

#ifndef SOAP_TYPE_Media__trt__GetSnapshotUriResponse
#define SOAP_TYPE_Media__trt__GetSnapshotUriResponse (241)
/* trt:GetSnapshotUriResponse */
class SOAP_CMAC _trt__GetSnapshotUriResponse
{
public:
	onv__MediaUri *MediaUri;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type onv:MediaUri */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 241; } /* = unique id SOAP_TYPE_Media__trt__GetSnapshotUriResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetSnapshotUriResponse(): MediaUri(NULL), soap(NULL) { _trt__GetSnapshotUriResponse::soap_default(NULL); }
	virtual ~_trt__GetSnapshotUriResponse() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__DeviceEntity
#define SOAP_TYPE_Media_onv__DeviceEntity (242)
/* Primitive onv:DeviceEntity schema type: */
class SOAP_CMAC onv__DeviceEntity : public xsd__anyType
{
public:
	std::string token;	/* required attribute */
public:
	virtual int soap_type() const { return 242; } /* = unique id SOAP_TYPE_Media_onv__DeviceEntity */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__DeviceEntity() { onv__DeviceEntity::soap_default(NULL); }
	virtual ~onv__DeviceEntity() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__IntRectangle
#define SOAP_TYPE_Media_onv__IntRectangle (243)
/* Primitive onv:IntRectangle schema type: */
class SOAP_CMAC onv__IntRectangle : public xsd__anyType
{
public:
	int x;	/* required attribute */
	int y;	/* required attribute */
	int width;	/* required attribute */
	int height;	/* required attribute */
public:
	virtual int soap_type() const { return 243; } /* = unique id SOAP_TYPE_Media_onv__IntRectangle */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__IntRectangle() { onv__IntRectangle::soap_default(NULL); }
	virtual ~onv__IntRectangle() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__IntRectangleRange
#define SOAP_TYPE_Media_onv__IntRectangleRange (244)
/* onv:IntRectangleRange */
class SOAP_CMAC onv__IntRectangleRange : public xsd__anyType
{
public:
	class onv__IntRange *XRange;	/* required element of type onv:IntRange */
	onv__IntRange *YRange;	/* required element of type onv:IntRange */
	onv__IntRange *WidthRange;	/* required element of type onv:IntRange */
	onv__IntRange *HeightRange;	/* required element of type onv:IntRange */
public:
	virtual int soap_type() const { return 244; } /* = unique id SOAP_TYPE_Media_onv__IntRectangleRange */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__IntRectangleRange(): XRange(NULL), YRange(NULL), WidthRange(NULL), HeightRange(NULL) { onv__IntRectangleRange::soap_default(NULL); }
	virtual ~onv__IntRectangleRange() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__IntRange
#define SOAP_TYPE_Media_onv__IntRange (245)
/* onv:IntRange */
class SOAP_CMAC onv__IntRange : public xsd__anyType
{
public:
	int Min;	/* required element of type xsd:int */
	int Max;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 245; } /* = unique id SOAP_TYPE_Media_onv__IntRange */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__IntRange() { onv__IntRange::soap_default(NULL); }
	virtual ~onv__IntRange() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__FloatRange
#define SOAP_TYPE_Media_onv__FloatRange (246)
/* onv:FloatRange */
class SOAP_CMAC onv__FloatRange : public xsd__anyType
{
public:
	float Min;	/* required element of type xsd:float */
	float Max;	/* required element of type xsd:float */
public:
	virtual int soap_type() const { return 246; } /* = unique id SOAP_TYPE_Media_onv__FloatRange */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__FloatRange() { onv__FloatRange::soap_default(NULL); }
	virtual ~onv__FloatRange() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__DurationRange
#define SOAP_TYPE_Media_onv__DurationRange (247)
/* onv:DurationRange */
class SOAP_CMAC onv__DurationRange : public xsd__anyType
{
public:
	LONG64 Min;	/* external */
	LONG64 Max;	/* external */
public:
	virtual int soap_type() const { return 247; } /* = unique id SOAP_TYPE_Media_onv__DurationRange */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__DurationRange() { onv__DurationRange::soap_default(NULL); }
	virtual ~onv__DurationRange() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__IntList
#define SOAP_TYPE_Media_onv__IntList (248)
/* onv:IntList */
class SOAP_CMAC onv__IntList : public xsd__anyType
{
public:
	std::vector<int >Items;	/* optional element of type xsd:int */
public:
	virtual int soap_type() const { return 248; } /* = unique id SOAP_TYPE_Media_onv__IntList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__IntList() { onv__IntList::soap_default(NULL); }
	virtual ~onv__IntList() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__VideoSourceExtension
#define SOAP_TYPE_Media_onv__VideoSourceExtension (250)
/* onv:VideoSourceExtension */
class SOAP_CMAC onv__VideoSourceExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 250; } /* = unique id SOAP_TYPE_Media_onv__VideoSourceExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__VideoSourceExtension() { onv__VideoSourceExtension::soap_default(NULL); }
	virtual ~onv__VideoSourceExtension() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__Profile
#define SOAP_TYPE_Media_onv__Profile (252)
/* onv:Profile */
class SOAP_CMAC onv__Profile : public xsd__anyType
{
public:
	std::string Name;	/* required element of type onv:Name */
	onv__VideoSourceConfiguration *VideoSourceConfiguration;	/* optional element of type onv:VideoSourceConfiguration */
	onv__AudioSourceConfiguration *AudioSourceConfiguration;	/* optional element of type onv:AudioSourceConfiguration */
	onv__VideoEncoderConfiguration *VideoEncoderConfiguration;	/* optional element of type onv:VideoEncoderConfiguration */
	onv__AudioEncoderConfiguration *AudioEncoderConfiguration;	/* optional element of type onv:AudioEncoderConfiguration */
	onv__VideoAnalyticsConfiguration *VideoAnalyticsConfiguration;	/* optional element of type onv:VideoAnalyticsConfiguration */
	class onv__PTZConfiguration *PTZConfiguration;	/* optional element of type onv:PTZConfiguration */
	onv__MetadataConfiguration *MetadataConfiguration;	/* optional element of type onv:MetadataConfiguration */
	class onv__ProfileExtension *Extension;	/* optional element of type onv:ProfileExtension */
	std::string token;	/* required attribute */
	bool *fixed;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 252; } /* = unique id SOAP_TYPE_Media_onv__Profile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__Profile(): VideoSourceConfiguration(NULL), AudioSourceConfiguration(NULL), VideoEncoderConfiguration(NULL), AudioEncoderConfiguration(NULL), VideoAnalyticsConfiguration(NULL), PTZConfiguration(NULL), MetadataConfiguration(NULL), Extension(NULL), fixed(NULL), __anyAttribute(NULL) { onv__Profile::soap_default(NULL); }
	virtual ~onv__Profile() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__ProfileExtension
#define SOAP_TYPE_Media_onv__ProfileExtension (253)
/* onv:ProfileExtension */
class SOAP_CMAC onv__ProfileExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 253; } /* = unique id SOAP_TYPE_Media_onv__ProfileExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__ProfileExtension() { onv__ProfileExtension::soap_default(NULL); }
	virtual ~onv__ProfileExtension() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__ConfigurationEntity
#define SOAP_TYPE_Media_onv__ConfigurationEntity (254)
/* onv:ConfigurationEntity */
class SOAP_CMAC onv__ConfigurationEntity : public xsd__anyType
{
public:
	std::string Name;	/* required element of type onv:Name */
	int UseCount;	/* required element of type xsd:int */
	std::string token;	/* required attribute */
public:
	virtual int soap_type() const { return 254; } /* = unique id SOAP_TYPE_Media_onv__ConfigurationEntity */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__ConfigurationEntity() { onv__ConfigurationEntity::soap_default(NULL); }
	virtual ~onv__ConfigurationEntity() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__VideoSourceConfigurationOptions
#define SOAP_TYPE_Media_onv__VideoSourceConfigurationOptions (256)
/* onv:VideoSourceConfigurationOptions */
class SOAP_CMAC onv__VideoSourceConfigurationOptions : public xsd__anyType
{
public:
	onv__IntRectangleRange *BoundsRange;	/* required element of type onv:IntRectangleRange */
	std::vector<std::string >VideoSourceTokensAvailable;	/* required element of type onv:ReferenceToken */
	class onv__VideoSourceConfigurationOptionsExtension *Extension;	/* optional element of type onv:VideoSourceConfigurationOptionsExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 256; } /* = unique id SOAP_TYPE_Media_onv__VideoSourceConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__VideoSourceConfigurationOptions(): BoundsRange(NULL), Extension(NULL), __anyAttribute(NULL) { onv__VideoSourceConfigurationOptions::soap_default(NULL); }
	virtual ~onv__VideoSourceConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__VideoSourceConfigurationOptionsExtension
#define SOAP_TYPE_Media_onv__VideoSourceConfigurationOptionsExtension (257)
/* onv:VideoSourceConfigurationOptionsExtension */
class SOAP_CMAC onv__VideoSourceConfigurationOptionsExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 257; } /* = unique id SOAP_TYPE_Media_onv__VideoSourceConfigurationOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__VideoSourceConfigurationOptionsExtension() { onv__VideoSourceConfigurationOptionsExtension::soap_default(NULL); }
	virtual ~onv__VideoSourceConfigurationOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__VideoResolution
#define SOAP_TYPE_Media_onv__VideoResolution (259)
/* onv:VideoResolution */
class SOAP_CMAC onv__VideoResolution : public xsd__anyType
{
public:
	int Width;	/* required element of type xsd:int */
	int Height;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 259; } /* = unique id SOAP_TYPE_Media_onv__VideoResolution */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__VideoResolution() { onv__VideoResolution::soap_default(NULL); }
	virtual ~onv__VideoResolution() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__VideoRateControl
#define SOAP_TYPE_Media_onv__VideoRateControl (260)
/* onv:VideoRateControl */
class SOAP_CMAC onv__VideoRateControl : public xsd__anyType
{
public:
	int FrameRateLimit;	/* required element of type xsd:int */
	int EncodingInterval;	/* required element of type xsd:int */
	int BitrateLimit;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 260; } /* = unique id SOAP_TYPE_Media_onv__VideoRateControl */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__VideoRateControl() { onv__VideoRateControl::soap_default(NULL); }
	virtual ~onv__VideoRateControl() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__Mpeg4Configuration
#define SOAP_TYPE_Media_onv__Mpeg4Configuration (261)
/* onv:Mpeg4Configuration */
class SOAP_CMAC onv__Mpeg4Configuration : public xsd__anyType
{
public:
	int GovLength;	/* required element of type xsd:int */
	enum onv__Mpeg4Profile Mpeg4Profile;	/* required element of type onv:Mpeg4Profile */
public:
	virtual int soap_type() const { return 261; } /* = unique id SOAP_TYPE_Media_onv__Mpeg4Configuration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__Mpeg4Configuration() { onv__Mpeg4Configuration::soap_default(NULL); }
	virtual ~onv__Mpeg4Configuration() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__H264Configuration
#define SOAP_TYPE_Media_onv__H264Configuration (262)
/* onv:H264Configuration */
class SOAP_CMAC onv__H264Configuration : public xsd__anyType
{
public:
	int GovLength;	/* required element of type xsd:int */
	enum onv__H264Profile H264Profile;	/* required element of type onv:H264Profile */
public:
	virtual int soap_type() const { return 262; } /* = unique id SOAP_TYPE_Media_onv__H264Configuration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__H264Configuration() { onv__H264Configuration::soap_default(NULL); }
	virtual ~onv__H264Configuration() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__VideoEncoderConfigurationOptions
#define SOAP_TYPE_Media_onv__VideoEncoderConfigurationOptions (263)
/* onv:VideoEncoderConfigurationOptions */
class SOAP_CMAC onv__VideoEncoderConfigurationOptions : public xsd__anyType
{
public:
	onv__IntRange *QualityRange;	/* required element of type onv:IntRange */
	class onv__JpegOptions *JPEG;	/* optional element of type onv:JpegOptions */
	class onv__Mpeg4Options *MPEG4;	/* optional element of type onv:Mpeg4Options */
	class onv__H264Options *H264;	/* optional element of type onv:H264Options */
	class onv__VideoEncoderOptionsExtension *Extension;	/* optional element of type onv:VideoEncoderOptionsExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 263; } /* = unique id SOAP_TYPE_Media_onv__VideoEncoderConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__VideoEncoderConfigurationOptions(): QualityRange(NULL), JPEG(NULL), MPEG4(NULL), H264(NULL), Extension(NULL), __anyAttribute(NULL) { onv__VideoEncoderConfigurationOptions::soap_default(NULL); }
	virtual ~onv__VideoEncoderConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__VideoEncoderOptionsExtension
#define SOAP_TYPE_Media_onv__VideoEncoderOptionsExtension (264)
/* onv:VideoEncoderOptionsExtension */
class SOAP_CMAC onv__VideoEncoderOptionsExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 264; } /* = unique id SOAP_TYPE_Media_onv__VideoEncoderOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__VideoEncoderOptionsExtension() { onv__VideoEncoderOptionsExtension::soap_default(NULL); }
	virtual ~onv__VideoEncoderOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__JpegOptions
#define SOAP_TYPE_Media_onv__JpegOptions (265)
/* onv:JpegOptions */
class SOAP_CMAC onv__JpegOptions : public xsd__anyType
{
public:
	std::vector<onv__VideoResolution * >ResolutionsAvailable;	/* required element of type onv:VideoResolution */
	onv__IntRange *FrameRateRange;	/* required element of type onv:IntRange */
	onv__IntRange *EncodingIntervalRange;	/* required element of type onv:IntRange */
public:
	virtual int soap_type() const { return 265; } /* = unique id SOAP_TYPE_Media_onv__JpegOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__JpegOptions(): FrameRateRange(NULL), EncodingIntervalRange(NULL) { onv__JpegOptions::soap_default(NULL); }
	virtual ~onv__JpegOptions() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__Mpeg4Options
#define SOAP_TYPE_Media_onv__Mpeg4Options (266)
/* onv:Mpeg4Options */
class SOAP_CMAC onv__Mpeg4Options : public xsd__anyType
{
public:
	std::vector<onv__VideoResolution * >ResolutionsAvailable;	/* required element of type onv:VideoResolution */
	onv__IntRange *GovLengthRange;	/* required element of type onv:IntRange */
	onv__IntRange *FrameRateRange;	/* required element of type onv:IntRange */
	onv__IntRange *EncodingIntervalRange;	/* required element of type onv:IntRange */
	std::vector<enum onv__Mpeg4Profile >Mpeg4ProfilesSupported;	/* required element of type onv:Mpeg4Profile */
public:
	virtual int soap_type() const { return 266; } /* = unique id SOAP_TYPE_Media_onv__Mpeg4Options */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__Mpeg4Options(): GovLengthRange(NULL), FrameRateRange(NULL), EncodingIntervalRange(NULL) { onv__Mpeg4Options::soap_default(NULL); }
	virtual ~onv__Mpeg4Options() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__H264Options
#define SOAP_TYPE_Media_onv__H264Options (267)
/* onv:H264Options */
class SOAP_CMAC onv__H264Options : public xsd__anyType
{
public:
	std::vector<onv__VideoResolution * >ResolutionsAvailable;	/* required element of type onv:VideoResolution */
	onv__IntRange *GovLengthRange;	/* required element of type onv:IntRange */
	onv__IntRange *FrameRateRange;	/* required element of type onv:IntRange */
	onv__IntRange *EncodingIntervalRange;	/* required element of type onv:IntRange */
	std::vector<enum onv__H264Profile >H264ProfilesSupported;	/* required element of type onv:H264Profile */
public:
	virtual int soap_type() const { return 267; } /* = unique id SOAP_TYPE_Media_onv__H264Options */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__H264Options(): GovLengthRange(NULL), FrameRateRange(NULL), EncodingIntervalRange(NULL) { onv__H264Options::soap_default(NULL); }
	virtual ~onv__H264Options() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__AudioSourceConfigurationOptions
#define SOAP_TYPE_Media_onv__AudioSourceConfigurationOptions (269)
/* onv:AudioSourceConfigurationOptions */
class SOAP_CMAC onv__AudioSourceConfigurationOptions : public xsd__anyType
{
public:
	std::vector<std::string >InputTokensAvailable;	/* required element of type onv:ReferenceToken */
	class onv__AudioSourceOptionsExtension *Extension;	/* optional element of type onv:AudioSourceOptionsExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 269; } /* = unique id SOAP_TYPE_Media_onv__AudioSourceConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__AudioSourceConfigurationOptions(): Extension(NULL), __anyAttribute(NULL) { onv__AudioSourceConfigurationOptions::soap_default(NULL); }
	virtual ~onv__AudioSourceConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__AudioSourceOptionsExtension
#define SOAP_TYPE_Media_onv__AudioSourceOptionsExtension (270)
/* onv:AudioSourceOptionsExtension */
class SOAP_CMAC onv__AudioSourceOptionsExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 270; } /* = unique id SOAP_TYPE_Media_onv__AudioSourceOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__AudioSourceOptionsExtension() { onv__AudioSourceOptionsExtension::soap_default(NULL); }
	virtual ~onv__AudioSourceOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__AudioEncoderConfigurationOptions
#define SOAP_TYPE_Media_onv__AudioEncoderConfigurationOptions (272)
/* onv:AudioEncoderConfigurationOptions */
class SOAP_CMAC onv__AudioEncoderConfigurationOptions : public xsd__anyType
{
public:
	std::vector<class onv__AudioEncoderConfigurationOption * >Options;	/* optional element of type onv:AudioEncoderConfigurationOption */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 272; } /* = unique id SOAP_TYPE_Media_onv__AudioEncoderConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__AudioEncoderConfigurationOptions(): __anyAttribute(NULL) { onv__AudioEncoderConfigurationOptions::soap_default(NULL); }
	virtual ~onv__AudioEncoderConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__AudioEncoderConfigurationOption
#define SOAP_TYPE_Media_onv__AudioEncoderConfigurationOption (273)
/* onv:AudioEncoderConfigurationOption */
class SOAP_CMAC onv__AudioEncoderConfigurationOption : public xsd__anyType
{
public:
	enum onv__AudioEncoding Encoding;	/* required element of type onv:AudioEncoding */
	onv__IntList *BitrateList;	/* required element of type onv:IntList */
	onv__IntList *SampleRateList;	/* required element of type onv:IntList */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 273; } /* = unique id SOAP_TYPE_Media_onv__AudioEncoderConfigurationOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__AudioEncoderConfigurationOption(): BitrateList(NULL), SampleRateList(NULL), __anyAttribute(NULL) { onv__AudioEncoderConfigurationOption::soap_default(NULL); }
	virtual ~onv__AudioEncoderConfigurationOption() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__PTZFilter
#define SOAP_TYPE_Media_onv__PTZFilter (276)
/* onv:PTZFilter */
class SOAP_CMAC onv__PTZFilter : public xsd__anyType
{
public:
	bool Status;	/* required element of type xsd:boolean */
	bool Position;	/* required element of type xsd:boolean */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 276; } /* = unique id SOAP_TYPE_Media_onv__PTZFilter */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__PTZFilter(): __anyAttribute(NULL) { onv__PTZFilter::soap_default(NULL); }
	virtual ~onv__PTZFilter() { }
};
#endif

#ifndef SOAP_TYPE_Media__onv__EventSubscription_SubscriptionPolicy
#define SOAP_TYPE_Media__onv__EventSubscription_SubscriptionPolicy (680)
/* onv:EventSubscription-SubscriptionPolicy */
class SOAP_CMAC _onv__EventSubscription_SubscriptionPolicy
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 680; } /* = unique id SOAP_TYPE_Media__onv__EventSubscription_SubscriptionPolicy */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onv__EventSubscription_SubscriptionPolicy() { _onv__EventSubscription_SubscriptionPolicy::soap_default(NULL); }
	virtual ~_onv__EventSubscription_SubscriptionPolicy() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__EventSubscription
#define SOAP_TYPE_Media_onv__EventSubscription (277)
/* onv:EventSubscription */
class SOAP_CMAC onv__EventSubscription : public xsd__anyType
{
public:
	class wsnb__FilterType *Filter;	/* optional element of type wsnb:FilterType */
	_onv__EventSubscription_SubscriptionPolicy *SubscriptionPolicy;	/* optional element of type onv:EventSubscription-SubscriptionPolicy */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 277; } /* = unique id SOAP_TYPE_Media_onv__EventSubscription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__EventSubscription(): Filter(NULL), SubscriptionPolicy(NULL), __anyAttribute(NULL) { onv__EventSubscription::soap_default(NULL); }
	virtual ~onv__EventSubscription() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__MetadataConfigurationOptions
#define SOAP_TYPE_Media_onv__MetadataConfigurationOptions (278)
/* onv:MetadataConfigurationOptions */
class SOAP_CMAC onv__MetadataConfigurationOptions : public xsd__anyType
{
public:
	class onv__PTZStatusFilterOptions *PTZStatusFilterOptions;	/* required element of type onv:PTZStatusFilterOptions */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 278; } /* = unique id SOAP_TYPE_Media_onv__MetadataConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__MetadataConfigurationOptions(): PTZStatusFilterOptions(NULL), __anyAttribute(NULL) { onv__MetadataConfigurationOptions::soap_default(NULL); }
	virtual ~onv__MetadataConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__PTZStatusFilterOptions
#define SOAP_TYPE_Media_onv__PTZStatusFilterOptions (279)
/* onv:PTZStatusFilterOptions */
class SOAP_CMAC onv__PTZStatusFilterOptions : public xsd__anyType
{
public:
	bool PanTiltStatusSupported;	/* required element of type xsd:boolean */
	bool ZoomStatusSupported;	/* required element of type xsd:boolean */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 279; } /* = unique id SOAP_TYPE_Media_onv__PTZStatusFilterOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__PTZStatusFilterOptions(): __anyAttribute(NULL) { onv__PTZStatusFilterOptions::soap_default(NULL); }
	virtual ~onv__PTZStatusFilterOptions() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__MulticastConfiguration
#define SOAP_TYPE_Media_onv__MulticastConfiguration (280)
/* onv:MulticastConfiguration */
class SOAP_CMAC onv__MulticastConfiguration : public xsd__anyType
{
public:
	class onv__IPAddress *Address;	/* required element of type onv:IPAddress */
	int Port;	/* required element of type xsd:int */
	int TTL;	/* required element of type xsd:int */
	bool AutoStart;	/* required element of type xsd:boolean */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 280; } /* = unique id SOAP_TYPE_Media_onv__MulticastConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__MulticastConfiguration(): Address(NULL), __anyAttribute(NULL) { onv__MulticastConfiguration::soap_default(NULL); }
	virtual ~onv__MulticastConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__StreamSetup
#define SOAP_TYPE_Media_onv__StreamSetup (281)
/* onv:StreamSetup */
class SOAP_CMAC onv__StreamSetup : public xsd__anyType
{
public:
	enum onv__StreamType Stream;	/* required element of type onv:StreamType */
	class onv__Transport *Transport;	/* required element of type onv:Transport */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 281; } /* = unique id SOAP_TYPE_Media_onv__StreamSetup */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__StreamSetup(): Transport(NULL), __anyAttribute(NULL) { onv__StreamSetup::soap_default(NULL); }
	virtual ~onv__StreamSetup() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__Transport
#define SOAP_TYPE_Media_onv__Transport (282)
/* onv:Transport */
class SOAP_CMAC onv__Transport : public xsd__anyType
{
public:
	enum onv__TransportProtocol Protocol;	/* required element of type onv:TransportProtocol */
	onv__Transport *Tunnel;	/* optional element of type onv:Transport */
public:
	virtual int soap_type() const { return 282; } /* = unique id SOAP_TYPE_Media_onv__Transport */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__Transport(): Tunnel(NULL) { onv__Transport::soap_default(NULL); }
	virtual ~onv__Transport() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__MediaUri
#define SOAP_TYPE_Media_onv__MediaUri (283)
/* onv:MediaUri */
class SOAP_CMAC onv__MediaUri : public xsd__anyType
{
public:
	std::string Uri;	/* required element of type xsd:anyURI */
	bool InvalidAfterConnect;	/* required element of type xsd:boolean */
	bool InvalidAfterReboot;	/* required element of type xsd:boolean */
	LONG64 Timeout;	/* external */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 283; } /* = unique id SOAP_TYPE_Media_onv__MediaUri */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__MediaUri(): __anyAttribute(NULL) { onv__MediaUri::soap_default(NULL); }
	virtual ~onv__MediaUri() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__Scope
#define SOAP_TYPE_Media_onv__Scope (284)
/* onv:Scope */
class SOAP_CMAC onv__Scope : public xsd__anyType
{
public:
	enum onv__ScopeDefinition ScopeDef;	/* required element of type onv:ScopeDefinition */
	std::string ScopeItem;	/* required element of type xsd:anyURI */
public:
	virtual int soap_type() const { return 284; } /* = unique id SOAP_TYPE_Media_onv__Scope */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__Scope() { onv__Scope::soap_default(NULL); }
	virtual ~onv__Scope() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__NetworkInterfaceExtension
#define SOAP_TYPE_Media_onv__NetworkInterfaceExtension (286)
/* onv:NetworkInterfaceExtension */
class SOAP_CMAC onv__NetworkInterfaceExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 286; } /* = unique id SOAP_TYPE_Media_onv__NetworkInterfaceExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__NetworkInterfaceExtension() { onv__NetworkInterfaceExtension::soap_default(NULL); }
	virtual ~onv__NetworkInterfaceExtension() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__NetworkInterfaceLink
#define SOAP_TYPE_Media_onv__NetworkInterfaceLink (287)
/* onv:NetworkInterfaceLink */
class SOAP_CMAC onv__NetworkInterfaceLink : public xsd__anyType
{
public:
	class onv__NetworkInterfaceConnectionSetting *AdminSettings;	/* required element of type onv:NetworkInterfaceConnectionSetting */
	onv__NetworkInterfaceConnectionSetting *OperSettings;	/* required element of type onv:NetworkInterfaceConnectionSetting */
	int InterfaceType;	/* required element of type onv:IANA-IfTypes */
public:
	virtual int soap_type() const { return 287; } /* = unique id SOAP_TYPE_Media_onv__NetworkInterfaceLink */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__NetworkInterfaceLink(): AdminSettings(NULL), OperSettings(NULL) { onv__NetworkInterfaceLink::soap_default(NULL); }
	virtual ~onv__NetworkInterfaceLink() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__NetworkInterfaceConnectionSetting
#define SOAP_TYPE_Media_onv__NetworkInterfaceConnectionSetting (288)
/* onv:NetworkInterfaceConnectionSetting */
class SOAP_CMAC onv__NetworkInterfaceConnectionSetting : public xsd__anyType
{
public:
	bool AutoNegotiation;	/* required element of type xsd:boolean */
	int Speed;	/* required element of type xsd:int */
	enum onv__Duplex Duplex;	/* required element of type onv:Duplex */
public:
	virtual int soap_type() const { return 288; } /* = unique id SOAP_TYPE_Media_onv__NetworkInterfaceConnectionSetting */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__NetworkInterfaceConnectionSetting() { onv__NetworkInterfaceConnectionSetting::soap_default(NULL); }
	virtual ~onv__NetworkInterfaceConnectionSetting() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__NetworkInterfaceInfo
#define SOAP_TYPE_Media_onv__NetworkInterfaceInfo (289)
/* onv:NetworkInterfaceInfo */
class SOAP_CMAC onv__NetworkInterfaceInfo : public xsd__anyType
{
public:
	std::string *Name;	/* optional element of type xsd:string */
	std::string HwAddress;	/* required element of type onv:HwAddress */
	int *MTU;	/* optional element of type xsd:int */
public:
	virtual int soap_type() const { return 289; } /* = unique id SOAP_TYPE_Media_onv__NetworkInterfaceInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__NetworkInterfaceInfo(): Name(NULL), MTU(NULL) { onv__NetworkInterfaceInfo::soap_default(NULL); }
	virtual ~onv__NetworkInterfaceInfo() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__IPv6NetworkInterface
#define SOAP_TYPE_Media_onv__IPv6NetworkInterface (290)
/* onv:IPv6NetworkInterface */
class SOAP_CMAC onv__IPv6NetworkInterface : public xsd__anyType
{
public:
	bool Enabled;	/* required element of type xsd:boolean */
	class onv__IPv6Configuration *Config;	/* optional element of type onv:IPv6Configuration */
public:
	virtual int soap_type() const { return 290; } /* = unique id SOAP_TYPE_Media_onv__IPv6NetworkInterface */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__IPv6NetworkInterface(): Config(NULL) { onv__IPv6NetworkInterface::soap_default(NULL); }
	virtual ~onv__IPv6NetworkInterface() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__IPv4NetworkInterface
#define SOAP_TYPE_Media_onv__IPv4NetworkInterface (291)
/* onv:IPv4NetworkInterface */
class SOAP_CMAC onv__IPv4NetworkInterface : public xsd__anyType
{
public:
	bool Enabled;	/* required element of type xsd:boolean */
	class onv__IPv4Configuration *Config;	/* required element of type onv:IPv4Configuration */
public:
	virtual int soap_type() const { return 291; } /* = unique id SOAP_TYPE_Media_onv__IPv4NetworkInterface */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__IPv4NetworkInterface(): Config(NULL) { onv__IPv4NetworkInterface::soap_default(NULL); }
	virtual ~onv__IPv4NetworkInterface() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__IPv4Configuration
#define SOAP_TYPE_Media_onv__IPv4Configuration (292)
/* onv:IPv4Configuration */
class SOAP_CMAC onv__IPv4Configuration : public xsd__anyType
{
public:
	std::vector<class onv__PrefixedIPv4Address * >Manual;	/* optional element of type onv:PrefixedIPv4Address */
	onv__PrefixedIPv4Address *LinkLocal;	/* optional element of type onv:PrefixedIPv4Address */
	onv__PrefixedIPv4Address *FromDHCP;	/* optional element of type onv:PrefixedIPv4Address */
	bool DHCP;	/* required element of type xsd:boolean */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 292; } /* = unique id SOAP_TYPE_Media_onv__IPv4Configuration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__IPv4Configuration(): LinkLocal(NULL), FromDHCP(NULL), __anyAttribute(NULL) { onv__IPv4Configuration::soap_default(NULL); }
	virtual ~onv__IPv4Configuration() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__IPv6Configuration
#define SOAP_TYPE_Media_onv__IPv6Configuration (293)
/* onv:IPv6Configuration */
class SOAP_CMAC onv__IPv6Configuration : public xsd__anyType
{
public:
	bool *AcceptRouterAdvert;	/* optional element of type xsd:boolean */
	enum onv__IPv6DHCPConfiguration DHCP;	/* required element of type onv:IPv6DHCPConfiguration */
	std::vector<class onv__PrefixedIPv6Address * >Manual;	/* optional element of type onv:PrefixedIPv6Address */
	std::vector<onv__PrefixedIPv6Address * >LinkLocal;	/* optional element of type onv:PrefixedIPv6Address */
	std::vector<onv__PrefixedIPv6Address * >FromDHCP;	/* optional element of type onv:PrefixedIPv6Address */
	std::vector<onv__PrefixedIPv6Address * >FromRA;	/* optional element of type onv:PrefixedIPv6Address */
	class onv__IPv6ConfigurationExtension *Extension;	/* optional element of type onv:IPv6ConfigurationExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 293; } /* = unique id SOAP_TYPE_Media_onv__IPv6Configuration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__IPv6Configuration(): AcceptRouterAdvert(NULL), Extension(NULL), __anyAttribute(NULL) { onv__IPv6Configuration::soap_default(NULL); }
	virtual ~onv__IPv6Configuration() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__IPv6ConfigurationExtension
#define SOAP_TYPE_Media_onv__IPv6ConfigurationExtension (294)
/* onv:IPv6ConfigurationExtension */
class SOAP_CMAC onv__IPv6ConfigurationExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 294; } /* = unique id SOAP_TYPE_Media_onv__IPv6ConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__IPv6ConfigurationExtension() { onv__IPv6ConfigurationExtension::soap_default(NULL); }
	virtual ~onv__IPv6ConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__NetworkProtocol
#define SOAP_TYPE_Media_onv__NetworkProtocol (295)
/* onv:NetworkProtocol */
class SOAP_CMAC onv__NetworkProtocol : public xsd__anyType
{
public:
	enum onv__NetworkProtocolType Name;	/* required element of type onv:NetworkProtocolType */
	bool Enabled;	/* required element of type xsd:boolean */
	std::vector<int >Port;	/* required element of type xsd:int */
	class onv__NetworkProtocolExtension *Extension;	/* optional element of type onv:NetworkProtocolExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 295; } /* = unique id SOAP_TYPE_Media_onv__NetworkProtocol */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__NetworkProtocol(): Extension(NULL), __anyAttribute(NULL) { onv__NetworkProtocol::soap_default(NULL); }
	virtual ~onv__NetworkProtocol() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__NetworkProtocolExtension
#define SOAP_TYPE_Media_onv__NetworkProtocolExtension (296)
/* onv:NetworkProtocolExtension */
class SOAP_CMAC onv__NetworkProtocolExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 296; } /* = unique id SOAP_TYPE_Media_onv__NetworkProtocolExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__NetworkProtocolExtension() { onv__NetworkProtocolExtension::soap_default(NULL); }
	virtual ~onv__NetworkProtocolExtension() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__NetworkHost
#define SOAP_TYPE_Media_onv__NetworkHost (297)
/* onv:NetworkHost */
class SOAP_CMAC onv__NetworkHost : public xsd__anyType
{
public:
	enum onv__NetworkHostType Type;	/* required element of type onv:NetworkHostType */
	std::string *IPv4Address;	/* optional element of type onv:IPv4Address */
	std::string *IPv6Address;	/* optional element of type onv:IPv6Address */
	std::string *DNSname;	/* optional element of type onv:DNSName */
	class onv__NetworkHostExtension *Extension;	/* optional element of type onv:NetworkHostExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 297; } /* = unique id SOAP_TYPE_Media_onv__NetworkHost */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__NetworkHost(): IPv4Address(NULL), IPv6Address(NULL), DNSname(NULL), Extension(NULL), __anyAttribute(NULL) { onv__NetworkHost::soap_default(NULL); }
	virtual ~onv__NetworkHost() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__NetworkHostExtension
#define SOAP_TYPE_Media_onv__NetworkHostExtension (298)
/* onv:NetworkHostExtension */
class SOAP_CMAC onv__NetworkHostExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 298; } /* = unique id SOAP_TYPE_Media_onv__NetworkHostExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__NetworkHostExtension() { onv__NetworkHostExtension::soap_default(NULL); }
	virtual ~onv__NetworkHostExtension() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__IPAddress
#define SOAP_TYPE_Media_onv__IPAddress (299)
/* onv:IPAddress */
class SOAP_CMAC onv__IPAddress : public xsd__anyType
{
public:
	enum onv__IPType Type;	/* required element of type onv:IPType */
	std::string *IPv4Address;	/* optional element of type onv:IPv4Address */
	std::string *IPv6Address;	/* optional element of type onv:IPv6Address */
public:
	virtual int soap_type() const { return 299; } /* = unique id SOAP_TYPE_Media_onv__IPAddress */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__IPAddress(): IPv4Address(NULL), IPv6Address(NULL) { onv__IPAddress::soap_default(NULL); }
	virtual ~onv__IPAddress() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__PrefixedIPv4Address
#define SOAP_TYPE_Media_onv__PrefixedIPv4Address (300)
/* onv:PrefixedIPv4Address */
class SOAP_CMAC onv__PrefixedIPv4Address : public xsd__anyType
{
public:
	std::string Address;	/* required element of type onv:IPv4Address */
	int PrefixLength;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 300; } /* = unique id SOAP_TYPE_Media_onv__PrefixedIPv4Address */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__PrefixedIPv4Address() { onv__PrefixedIPv4Address::soap_default(NULL); }
	virtual ~onv__PrefixedIPv4Address() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__PrefixedIPv6Address
#define SOAP_TYPE_Media_onv__PrefixedIPv6Address (301)
/* onv:PrefixedIPv6Address */
class SOAP_CMAC onv__PrefixedIPv6Address : public xsd__anyType
{
public:
	std::string Address;	/* required element of type onv:IPv6Address */
	int PrefixLength;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 301; } /* = unique id SOAP_TYPE_Media_onv__PrefixedIPv6Address */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__PrefixedIPv6Address() { onv__PrefixedIPv6Address::soap_default(NULL); }
	virtual ~onv__PrefixedIPv6Address() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__HostnameInformation
#define SOAP_TYPE_Media_onv__HostnameInformation (302)
/* onv:HostnameInformation */
class SOAP_CMAC onv__HostnameInformation : public xsd__anyType
{
public:
	bool FromDHCP;	/* required element of type xsd:boolean */
	std::string *Name;	/* optional element of type xsd:token */
	class onv__HostnameInformationExtension *Extension;	/* optional element of type onv:HostnameInformationExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 302; } /* = unique id SOAP_TYPE_Media_onv__HostnameInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__HostnameInformation(): Name(NULL), Extension(NULL), __anyAttribute(NULL) { onv__HostnameInformation::soap_default(NULL); }
	virtual ~onv__HostnameInformation() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__HostnameInformationExtension
#define SOAP_TYPE_Media_onv__HostnameInformationExtension (303)
/* onv:HostnameInformationExtension */
class SOAP_CMAC onv__HostnameInformationExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 303; } /* = unique id SOAP_TYPE_Media_onv__HostnameInformationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__HostnameInformationExtension() { onv__HostnameInformationExtension::soap_default(NULL); }
	virtual ~onv__HostnameInformationExtension() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__DNSInformation
#define SOAP_TYPE_Media_onv__DNSInformation (304)
/* onv:DNSInformation */
class SOAP_CMAC onv__DNSInformation : public xsd__anyType
{
public:
	bool FromDHCP;	/* required element of type xsd:boolean */
	std::vector<std::string >SearchDomain;	/* optional element of type xsd:token */
	std::vector<onv__IPAddress * >DNSFromDHCP;	/* optional element of type onv:IPAddress */
	std::vector<onv__IPAddress * >DNSManual;	/* optional element of type onv:IPAddress */
	class onv__DNSInformationExtension *Extension;	/* optional element of type onv:DNSInformationExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 304; } /* = unique id SOAP_TYPE_Media_onv__DNSInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__DNSInformation(): Extension(NULL), __anyAttribute(NULL) { onv__DNSInformation::soap_default(NULL); }
	virtual ~onv__DNSInformation() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__DNSInformationExtension
#define SOAP_TYPE_Media_onv__DNSInformationExtension (305)
/* onv:DNSInformationExtension */
class SOAP_CMAC onv__DNSInformationExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 305; } /* = unique id SOAP_TYPE_Media_onv__DNSInformationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__DNSInformationExtension() { onv__DNSInformationExtension::soap_default(NULL); }
	virtual ~onv__DNSInformationExtension() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__NTPInformation
#define SOAP_TYPE_Media_onv__NTPInformation (306)
/* onv:NTPInformation */
class SOAP_CMAC onv__NTPInformation : public xsd__anyType
{
public:
	bool FromDHCP;	/* required element of type xsd:boolean */
	std::vector<onv__NetworkHost * >NTPFromDHCP;	/* optional element of type onv:NetworkHost */
	std::vector<onv__NetworkHost * >NTPManual;	/* optional element of type onv:NetworkHost */
	class onv__NTPInformationExtension *Extension;	/* optional element of type onv:NTPInformationExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 306; } /* = unique id SOAP_TYPE_Media_onv__NTPInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__NTPInformation(): Extension(NULL), __anyAttribute(NULL) { onv__NTPInformation::soap_default(NULL); }
	virtual ~onv__NTPInformation() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__NTPInformationExtension
#define SOAP_TYPE_Media_onv__NTPInformationExtension (307)
/* onv:NTPInformationExtension */
class SOAP_CMAC onv__NTPInformationExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 307; } /* = unique id SOAP_TYPE_Media_onv__NTPInformationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__NTPInformationExtension() { onv__NTPInformationExtension::soap_default(NULL); }
	virtual ~onv__NTPInformationExtension() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__DynamicDNSInformation
#define SOAP_TYPE_Media_onv__DynamicDNSInformation (308)
/* onv:DynamicDNSInformation */
class SOAP_CMAC onv__DynamicDNSInformation : public xsd__anyType
{
public:
	enum onv__DynamicDNSType Type;	/* required element of type onv:DynamicDNSType */
	std::string *Name;	/* optional element of type onv:DNSName */
	LONG64 *TTL;	/* optional element of type xsd:duration */
	class onv__DynamicDNSInformationExtension *Extension;	/* optional element of type onv:DynamicDNSInformationExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 308; } /* = unique id SOAP_TYPE_Media_onv__DynamicDNSInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__DynamicDNSInformation(): Name(NULL), TTL(NULL), Extension(NULL), __anyAttribute(NULL) { onv__DynamicDNSInformation::soap_default(NULL); }
	virtual ~onv__DynamicDNSInformation() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__DynamicDNSInformationExtension
#define SOAP_TYPE_Media_onv__DynamicDNSInformationExtension (309)
/* onv:DynamicDNSInformationExtension */
class SOAP_CMAC onv__DynamicDNSInformationExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 309; } /* = unique id SOAP_TYPE_Media_onv__DynamicDNSInformationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__DynamicDNSInformationExtension() { onv__DynamicDNSInformationExtension::soap_default(NULL); }
	virtual ~onv__DynamicDNSInformationExtension() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__NetworkInterfaceSetConfiguration
#define SOAP_TYPE_Media_onv__NetworkInterfaceSetConfiguration (310)
/* onv:NetworkInterfaceSetConfiguration */
class SOAP_CMAC onv__NetworkInterfaceSetConfiguration : public xsd__anyType
{
public:
	bool *Enabled;	/* optional element of type xsd:boolean */
	onv__NetworkInterfaceConnectionSetting *Link;	/* optional element of type onv:NetworkInterfaceConnectionSetting */
	int *MTU;	/* optional element of type xsd:int */
	class onv__IPv4NetworkInterfaceSetConfiguration *IPv4;	/* optional element of type onv:IPv4NetworkInterfaceSetConfiguration */
	class onv__IPv6NetworkInterfaceSetConfiguration *IPv6;	/* optional element of type onv:IPv6NetworkInterfaceSetConfiguration */
	class onv__NetworkInterfaceSetConfigurationExtension *Extension;	/* optional element of type onv:NetworkInterfaceSetConfigurationExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 310; } /* = unique id SOAP_TYPE_Media_onv__NetworkInterfaceSetConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__NetworkInterfaceSetConfiguration(): Enabled(NULL), Link(NULL), MTU(NULL), IPv4(NULL), IPv6(NULL), Extension(NULL), __anyAttribute(NULL) { onv__NetworkInterfaceSetConfiguration::soap_default(NULL); }
	virtual ~onv__NetworkInterfaceSetConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__NetworkInterfaceSetConfigurationExtension
#define SOAP_TYPE_Media_onv__NetworkInterfaceSetConfigurationExtension (311)
/* onv:NetworkInterfaceSetConfigurationExtension */
class SOAP_CMAC onv__NetworkInterfaceSetConfigurationExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 311; } /* = unique id SOAP_TYPE_Media_onv__NetworkInterfaceSetConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__NetworkInterfaceSetConfigurationExtension() { onv__NetworkInterfaceSetConfigurationExtension::soap_default(NULL); }
	virtual ~onv__NetworkInterfaceSetConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__IPv6NetworkInterfaceSetConfiguration
#define SOAP_TYPE_Media_onv__IPv6NetworkInterfaceSetConfiguration (312)
/* onv:IPv6NetworkInterfaceSetConfiguration */
class SOAP_CMAC onv__IPv6NetworkInterfaceSetConfiguration : public xsd__anyType
{
public:
	bool *Enabled;	/* optional element of type xsd:boolean */
	bool *AcceptRouterAdvert;	/* optional element of type xsd:boolean */
	std::vector<onv__PrefixedIPv6Address * >Manual;	/* optional element of type onv:PrefixedIPv6Address */
	enum onv__IPv6DHCPConfiguration *DHCP;	/* optional element of type onv:IPv6DHCPConfiguration */
public:
	virtual int soap_type() const { return 312; } /* = unique id SOAP_TYPE_Media_onv__IPv6NetworkInterfaceSetConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__IPv6NetworkInterfaceSetConfiguration(): Enabled(NULL), AcceptRouterAdvert(NULL), DHCP(NULL) { onv__IPv6NetworkInterfaceSetConfiguration::soap_default(NULL); }
	virtual ~onv__IPv6NetworkInterfaceSetConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__IPv4NetworkInterfaceSetConfiguration
#define SOAP_TYPE_Media_onv__IPv4NetworkInterfaceSetConfiguration (313)
/* onv:IPv4NetworkInterfaceSetConfiguration */
class SOAP_CMAC onv__IPv4NetworkInterfaceSetConfiguration : public xsd__anyType
{
public:
	bool *Enabled;	/* optional element of type xsd:boolean */
	std::vector<onv__PrefixedIPv4Address * >Manual;	/* optional element of type onv:PrefixedIPv4Address */
	bool *DHCP;	/* optional element of type xsd:boolean */
public:
	virtual int soap_type() const { return 313; } /* = unique id SOAP_TYPE_Media_onv__IPv4NetworkInterfaceSetConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__IPv4NetworkInterfaceSetConfiguration(): Enabled(NULL), DHCP(NULL) { onv__IPv4NetworkInterfaceSetConfiguration::soap_default(NULL); }
	virtual ~onv__IPv4NetworkInterfaceSetConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__NetworkGateway
#define SOAP_TYPE_Media_onv__NetworkGateway (314)
/* onv:NetworkGateway */
class SOAP_CMAC onv__NetworkGateway : public xsd__anyType
{
public:
	std::vector<std::string >IPv4Address;	/* optional element of type onv:IPv4Address */
	std::vector<std::string >IPv6Address;	/* optional element of type onv:IPv6Address */
public:
	virtual int soap_type() const { return 314; } /* = unique id SOAP_TYPE_Media_onv__NetworkGateway */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__NetworkGateway() { onv__NetworkGateway::soap_default(NULL); }
	virtual ~onv__NetworkGateway() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__NetworkZeroConfiguration
#define SOAP_TYPE_Media_onv__NetworkZeroConfiguration (315)
/* onv:NetworkZeroConfiguration */
class SOAP_CMAC onv__NetworkZeroConfiguration : public xsd__anyType
{
public:
	std::string InterfaceToken;	/* required element of type onv:ReferenceToken */
	bool Enabled;	/* required element of type xsd:boolean */
	std::vector<std::string >Addresses;	/* optional element of type onv:IPv4Address */
	class onv__NetworkZeroConfigurationExtension *Extension;	/* optional element of type onv:NetworkZeroConfigurationExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 315; } /* = unique id SOAP_TYPE_Media_onv__NetworkZeroConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__NetworkZeroConfiguration(): Extension(NULL), __anyAttribute(NULL) { onv__NetworkZeroConfiguration::soap_default(NULL); }
	virtual ~onv__NetworkZeroConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__NetworkZeroConfigurationExtension
#define SOAP_TYPE_Media_onv__NetworkZeroConfigurationExtension (316)
/* onv:NetworkZeroConfigurationExtension */
class SOAP_CMAC onv__NetworkZeroConfigurationExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 316; } /* = unique id SOAP_TYPE_Media_onv__NetworkZeroConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__NetworkZeroConfigurationExtension() { onv__NetworkZeroConfigurationExtension::soap_default(NULL); }
	virtual ~onv__NetworkZeroConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__IPAddressFilter
#define SOAP_TYPE_Media_onv__IPAddressFilter (317)
/* onv:IPAddressFilter */
class SOAP_CMAC onv__IPAddressFilter : public xsd__anyType
{
public:
	enum onv__IPAddressFilterType Type;	/* required element of type onv:IPAddressFilterType */
	std::vector<onv__PrefixedIPv4Address * >IPv4Address;	/* optional element of type onv:PrefixedIPv4Address */
	std::vector<onv__PrefixedIPv6Address * >IPv6Address;	/* optional element of type onv:PrefixedIPv6Address */
	class onv__IPAddressFilterExtension *Extension;	/* optional element of type onv:IPAddressFilterExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 317; } /* = unique id SOAP_TYPE_Media_onv__IPAddressFilter */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__IPAddressFilter(): Extension(NULL), __anyAttribute(NULL) { onv__IPAddressFilter::soap_default(NULL); }
	virtual ~onv__IPAddressFilter() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__IPAddressFilterExtension
#define SOAP_TYPE_Media_onv__IPAddressFilterExtension (318)
/* onv:IPAddressFilterExtension */
class SOAP_CMAC onv__IPAddressFilterExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 318; } /* = unique id SOAP_TYPE_Media_onv__IPAddressFilterExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__IPAddressFilterExtension() { onv__IPAddressFilterExtension::soap_default(NULL); }
	virtual ~onv__IPAddressFilterExtension() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__Capabilities
#define SOAP_TYPE_Media_onv__Capabilities (319)
/* onv:Capabilities */
class SOAP_CMAC onv__Capabilities : public xsd__anyType
{
public:
	class onv__AnalyticsCapabilities *Analytics;	/* optional element of type onv:AnalyticsCapabilities */
	class onv__DeviceCapabilities *Device;	/* optional element of type onv:DeviceCapabilities */
	class onv__EventCapabilities *Events;	/* optional element of type onv:EventCapabilities */
	class onv__ImagingCapabilities *Imaging;	/* optional element of type onv:ImagingCapabilities */
	class onv__MediaCapabilities *Media;	/* optional element of type onv:MediaCapabilities */
	class onv__PTZCapabilities *PTZ;	/* optional element of type onv:PTZCapabilities */
	class onv__CapabilitiesExtension *Extension;	/* optional element of type onv:CapabilitiesExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 319; } /* = unique id SOAP_TYPE_Media_onv__Capabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__Capabilities(): Analytics(NULL), Device(NULL), Events(NULL), Imaging(NULL), Media(NULL), PTZ(NULL), Extension(NULL), __anyAttribute(NULL) { onv__Capabilities::soap_default(NULL); }
	virtual ~onv__Capabilities() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__CapabilitiesExtension
#define SOAP_TYPE_Media_onv__CapabilitiesExtension (320)
/* onv:CapabilitiesExtension */
class SOAP_CMAC onv__CapabilitiesExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 320; } /* = unique id SOAP_TYPE_Media_onv__CapabilitiesExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__CapabilitiesExtension() { onv__CapabilitiesExtension::soap_default(NULL); }
	virtual ~onv__CapabilitiesExtension() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__AnalyticsCapabilities
#define SOAP_TYPE_Media_onv__AnalyticsCapabilities (321)
/* onv:AnalyticsCapabilities */
class SOAP_CMAC onv__AnalyticsCapabilities : public xsd__anyType
{
public:
	std::string XAddr;	/* required element of type xsd:anyURI */
	bool RuleSupport;	/* required element of type xsd:boolean */
	bool AnalyticsModuleSupport;	/* required element of type xsd:boolean */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 321; } /* = unique id SOAP_TYPE_Media_onv__AnalyticsCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__AnalyticsCapabilities(): __anyAttribute(NULL) { onv__AnalyticsCapabilities::soap_default(NULL); }
	virtual ~onv__AnalyticsCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__DeviceCapabilities
#define SOAP_TYPE_Media_onv__DeviceCapabilities (322)
/* onv:DeviceCapabilities */
class SOAP_CMAC onv__DeviceCapabilities : public xsd__anyType
{
public:
	std::string XAddr;	/* required element of type xsd:anyURI */
	class onv__NetworkCapabilities *Network;	/* optional element of type onv:NetworkCapabilities */
	class onv__SystemCapabilities *System;	/* optional element of type onv:SystemCapabilities */
	class onv__IOCapabilities *IO;	/* optional element of type onv:IOCapabilities */
	class onv__SecurityCapabilities *Security;	/* optional element of type onv:SecurityCapabilities */
	class onv__DeviceCapabilitiesExtension *Extension;	/* optional element of type onv:DeviceCapabilitiesExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 322; } /* = unique id SOAP_TYPE_Media_onv__DeviceCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__DeviceCapabilities(): Network(NULL), System(NULL), IO(NULL), Security(NULL), Extension(NULL), __anyAttribute(NULL) { onv__DeviceCapabilities::soap_default(NULL); }
	virtual ~onv__DeviceCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__DeviceCapabilitiesExtension
#define SOAP_TYPE_Media_onv__DeviceCapabilitiesExtension (323)
/* onv:DeviceCapabilitiesExtension */
class SOAP_CMAC onv__DeviceCapabilitiesExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 323; } /* = unique id SOAP_TYPE_Media_onv__DeviceCapabilitiesExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__DeviceCapabilitiesExtension() { onv__DeviceCapabilitiesExtension::soap_default(NULL); }
	virtual ~onv__DeviceCapabilitiesExtension() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__EventCapabilities
#define SOAP_TYPE_Media_onv__EventCapabilities (324)
/* onv:EventCapabilities */
class SOAP_CMAC onv__EventCapabilities : public xsd__anyType
{
public:
	std::string XAddr;	/* required element of type xsd:anyURI */
	bool WSSubscriptionPolicySupport;	/* required element of type xsd:boolean */
	bool WSPullPointSupport;	/* required element of type xsd:boolean */
	bool WSPausableSubscriptionManagerInterfaceSupport;	/* required element of type xsd:boolean */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 324; } /* = unique id SOAP_TYPE_Media_onv__EventCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__EventCapabilities(): __anyAttribute(NULL) { onv__EventCapabilities::soap_default(NULL); }
	virtual ~onv__EventCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__IOCapabilities
#define SOAP_TYPE_Media_onv__IOCapabilities (325)
/* onv:IOCapabilities */
class SOAP_CMAC onv__IOCapabilities : public xsd__anyType
{
public:
	int *InputConnectors;	/* optional element of type xsd:int */
	int *RelayOutputs;	/* optional element of type xsd:int */
	class onv__IOCapabilitiesExtension *Extension;	/* optional element of type onv:IOCapabilitiesExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 325; } /* = unique id SOAP_TYPE_Media_onv__IOCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__IOCapabilities(): InputConnectors(NULL), RelayOutputs(NULL), Extension(NULL), __anyAttribute(NULL) { onv__IOCapabilities::soap_default(NULL); }
	virtual ~onv__IOCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__IOCapabilitiesExtension
#define SOAP_TYPE_Media_onv__IOCapabilitiesExtension (326)
/* onv:IOCapabilitiesExtension */
class SOAP_CMAC onv__IOCapabilitiesExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 326; } /* = unique id SOAP_TYPE_Media_onv__IOCapabilitiesExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__IOCapabilitiesExtension() { onv__IOCapabilitiesExtension::soap_default(NULL); }
	virtual ~onv__IOCapabilitiesExtension() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__MediaCapabilities
#define SOAP_TYPE_Media_onv__MediaCapabilities (327)
/* onv:MediaCapabilities */
class SOAP_CMAC onv__MediaCapabilities : public xsd__anyType
{
public:
	std::string XAddr;	/* required element of type xsd:anyURI */
	class onv__RealTimeStreamingCapabilities *StreamingCapabilities;	/* required element of type onv:RealTimeStreamingCapabilities */
	std::vector<char * >__any;
	class onv__MediaCapabilitiesExtension *Extension;	/* optional element of type onv:MediaCapabilitiesExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 327; } /* = unique id SOAP_TYPE_Media_onv__MediaCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__MediaCapabilities(): StreamingCapabilities(NULL), Extension(NULL), __anyAttribute(NULL) { onv__MediaCapabilities::soap_default(NULL); }
	virtual ~onv__MediaCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__MediaCapabilitiesExtension
#define SOAP_TYPE_Media_onv__MediaCapabilitiesExtension (328)
/* onv:MediaCapabilitiesExtension */
class SOAP_CMAC onv__MediaCapabilitiesExtension : public xsd__anyType
{
public:
	class onv__ProfileCapabilities *ProfileCapabilities;	/* required element of type onv:ProfileCapabilities */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 328; } /* = unique id SOAP_TYPE_Media_onv__MediaCapabilitiesExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__MediaCapabilitiesExtension(): ProfileCapabilities(NULL), __anyAttribute(NULL) { onv__MediaCapabilitiesExtension::soap_default(NULL); }
	virtual ~onv__MediaCapabilitiesExtension() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__RealTimeStreamingCapabilities
#define SOAP_TYPE_Media_onv__RealTimeStreamingCapabilities (329)
/* onv:RealTimeStreamingCapabilities */
class SOAP_CMAC onv__RealTimeStreamingCapabilities : public xsd__anyType
{
public:
	bool *RTPMulticast;	/* optional element of type xsd:boolean */
	bool *RTP_USCORETCP;	/* optional element of type xsd:boolean */
	bool *RTP_USCORERTSP_USCORETCP;	/* optional element of type xsd:boolean */
	class onv__RealTimeStreamingCapabilitiesExtension *Extension;	/* optional element of type onv:RealTimeStreamingCapabilitiesExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 329; } /* = unique id SOAP_TYPE_Media_onv__RealTimeStreamingCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__RealTimeStreamingCapabilities(): RTPMulticast(NULL), RTP_USCORETCP(NULL), RTP_USCORERTSP_USCORETCP(NULL), Extension(NULL), __anyAttribute(NULL) { onv__RealTimeStreamingCapabilities::soap_default(NULL); }
	virtual ~onv__RealTimeStreamingCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__RealTimeStreamingCapabilitiesExtension
#define SOAP_TYPE_Media_onv__RealTimeStreamingCapabilitiesExtension (330)
/* onv:RealTimeStreamingCapabilitiesExtension */
class SOAP_CMAC onv__RealTimeStreamingCapabilitiesExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 330; } /* = unique id SOAP_TYPE_Media_onv__RealTimeStreamingCapabilitiesExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__RealTimeStreamingCapabilitiesExtension() { onv__RealTimeStreamingCapabilitiesExtension::soap_default(NULL); }
	virtual ~onv__RealTimeStreamingCapabilitiesExtension() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__ProfileCapabilities
#define SOAP_TYPE_Media_onv__ProfileCapabilities (331)
/* onv:ProfileCapabilities */
class SOAP_CMAC onv__ProfileCapabilities : public xsd__anyType
{
public:
	int MaximumNumberOfProfiles;	/* required element of type xsd:int */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 331; } /* = unique id SOAP_TYPE_Media_onv__ProfileCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__ProfileCapabilities(): __anyAttribute(NULL) { onv__ProfileCapabilities::soap_default(NULL); }
	virtual ~onv__ProfileCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__NetworkCapabilities
#define SOAP_TYPE_Media_onv__NetworkCapabilities (332)
/* onv:NetworkCapabilities */
class SOAP_CMAC onv__NetworkCapabilities : public xsd__anyType
{
public:
	bool *IPFilter;	/* optional element of type xsd:boolean */
	bool *ZeroConfiguration;	/* optional element of type xsd:boolean */
	bool *IPVersion6;	/* optional element of type xsd:boolean */
	bool *DynDNS;	/* optional element of type xsd:boolean */
	class onv__NetworkCapabilitiesExtension *Extension;	/* optional element of type onv:NetworkCapabilitiesExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 332; } /* = unique id SOAP_TYPE_Media_onv__NetworkCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__NetworkCapabilities(): IPFilter(NULL), ZeroConfiguration(NULL), IPVersion6(NULL), DynDNS(NULL), Extension(NULL), __anyAttribute(NULL) { onv__NetworkCapabilities::soap_default(NULL); }
	virtual ~onv__NetworkCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__NetworkCapabilitiesExtension
#define SOAP_TYPE_Media_onv__NetworkCapabilitiesExtension (333)
/* onv:NetworkCapabilitiesExtension */
class SOAP_CMAC onv__NetworkCapabilitiesExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 333; } /* = unique id SOAP_TYPE_Media_onv__NetworkCapabilitiesExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__NetworkCapabilitiesExtension() { onv__NetworkCapabilitiesExtension::soap_default(NULL); }
	virtual ~onv__NetworkCapabilitiesExtension() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__SecurityCapabilities
#define SOAP_TYPE_Media_onv__SecurityCapabilities (334)
/* onv:SecurityCapabilities */
class SOAP_CMAC onv__SecurityCapabilities : public xsd__anyType
{
public:
	bool TLS1_x002e1;	/* required element of type xsd:boolean */
	bool TLS1_x002e2;	/* required element of type xsd:boolean */
	bool OnboardKeyGeneration;	/* required element of type xsd:boolean */
	bool AccessPolicyConfig;	/* required element of type xsd:boolean */
	bool X_x002e509Token;	/* required element of type xsd:boolean */
	bool SAMLToken;	/* required element of type xsd:boolean */
	bool KerberosToken;	/* required element of type xsd:boolean */
	bool RELToken;	/* required element of type xsd:boolean */
	std::vector<char * >__any;
	class onv__SecurityCapabilitiesExtension *Extension;	/* optional element of type onv:SecurityCapabilitiesExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 334; } /* = unique id SOAP_TYPE_Media_onv__SecurityCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__SecurityCapabilities(): Extension(NULL), __anyAttribute(NULL) { onv__SecurityCapabilities::soap_default(NULL); }
	virtual ~onv__SecurityCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__SecurityCapabilitiesExtension
#define SOAP_TYPE_Media_onv__SecurityCapabilitiesExtension (335)
/* onv:SecurityCapabilitiesExtension */
class SOAP_CMAC onv__SecurityCapabilitiesExtension : public xsd__anyType
{
public:
	bool TLS1_x002e0;	/* required element of type xsd:boolean */
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 335; } /* = unique id SOAP_TYPE_Media_onv__SecurityCapabilitiesExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__SecurityCapabilitiesExtension() { onv__SecurityCapabilitiesExtension::soap_default(NULL); }
	virtual ~onv__SecurityCapabilitiesExtension() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__StorageCapabilities
#define SOAP_TYPE_Media_onv__StorageCapabilities (336)
/* onv:StorageCapabilities */
class SOAP_CMAC onv__StorageCapabilities : public xsd__anyType
{
public:
	std::string XAddr;	/* required element of type xsd:anyURI */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 336; } /* = unique id SOAP_TYPE_Media_onv__StorageCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__StorageCapabilities(): __anyAttribute(NULL) { onv__StorageCapabilities::soap_default(NULL); }
	virtual ~onv__StorageCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__SystemCapabilities
#define SOAP_TYPE_Media_onv__SystemCapabilities (337)
/* onv:SystemCapabilities */
class SOAP_CMAC onv__SystemCapabilities : public xsd__anyType
{
public:
	bool DiscoveryResolve;	/* required element of type xsd:boolean */
	bool DiscoveryBye;	/* required element of type xsd:boolean */
	bool RemoteDiscovery;	/* required element of type xsd:boolean */
	bool SystemBackup;	/* required element of type xsd:boolean */
	bool SystemLogging;	/* required element of type xsd:boolean */
	bool FirmwareUpgrade;	/* required element of type xsd:boolean */
	std::vector<class onv__OnvifVersion * >SupportedVersions;	/* required element of type onv:OnvifVersion */
	class onv__SystemCapabilitiesExtension *Extension;	/* optional element of type onv:SystemCapabilitiesExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 337; } /* = unique id SOAP_TYPE_Media_onv__SystemCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__SystemCapabilities(): Extension(NULL), __anyAttribute(NULL) { onv__SystemCapabilities::soap_default(NULL); }
	virtual ~onv__SystemCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__SystemCapabilitiesExtension
#define SOAP_TYPE_Media_onv__SystemCapabilitiesExtension (338)
/* onv:SystemCapabilitiesExtension */
class SOAP_CMAC onv__SystemCapabilitiesExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 338; } /* = unique id SOAP_TYPE_Media_onv__SystemCapabilitiesExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__SystemCapabilitiesExtension() { onv__SystemCapabilitiesExtension::soap_default(NULL); }
	virtual ~onv__SystemCapabilitiesExtension() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__OnvifVersion
#define SOAP_TYPE_Media_onv__OnvifVersion (339)
/* onv:OnvifVersion */
class SOAP_CMAC onv__OnvifVersion : public xsd__anyType
{
public:
	int Major;	/* required element of type xsd:int */
	int Minor;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 339; } /* = unique id SOAP_TYPE_Media_onv__OnvifVersion */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__OnvifVersion() { onv__OnvifVersion::soap_default(NULL); }
	virtual ~onv__OnvifVersion() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__ImagingCapabilities
#define SOAP_TYPE_Media_onv__ImagingCapabilities (340)
/* onv:ImagingCapabilities */
class SOAP_CMAC onv__ImagingCapabilities : public xsd__anyType
{
public:
	std::string XAddr;	/* required element of type xsd:anyURI */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 340; } /* = unique id SOAP_TYPE_Media_onv__ImagingCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__ImagingCapabilities(): __anyAttribute(NULL) { onv__ImagingCapabilities::soap_default(NULL); }
	virtual ~onv__ImagingCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__PTZCapabilities
#define SOAP_TYPE_Media_onv__PTZCapabilities (341)
/* onv:PTZCapabilities */
class SOAP_CMAC onv__PTZCapabilities : public xsd__anyType
{
public:
	std::string XAddr;	/* required element of type xsd:anyURI */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 341; } /* = unique id SOAP_TYPE_Media_onv__PTZCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__PTZCapabilities(): __anyAttribute(NULL) { onv__PTZCapabilities::soap_default(NULL); }
	virtual ~onv__PTZCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__SystemLog
#define SOAP_TYPE_Media_onv__SystemLog (342)
/* onv:SystemLog */
class SOAP_CMAC onv__SystemLog : public xsd__anyType
{
public:
	class onv__AttachmentData *Binary;	/* optional element of type onv:AttachmentData */
	std::string *String;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 342; } /* = unique id SOAP_TYPE_Media_onv__SystemLog */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__SystemLog(): Binary(NULL), String(NULL) { onv__SystemLog::soap_default(NULL); }
	virtual ~onv__SystemLog() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__SupportInformation
#define SOAP_TYPE_Media_onv__SupportInformation (343)
/* onv:SupportInformation */
class SOAP_CMAC onv__SupportInformation : public xsd__anyType
{
public:
	onv__AttachmentData *Binary;	/* optional element of type onv:AttachmentData */
	std::string *String;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 343; } /* = unique id SOAP_TYPE_Media_onv__SupportInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__SupportInformation(): Binary(NULL), String(NULL) { onv__SupportInformation::soap_default(NULL); }
	virtual ~onv__SupportInformation() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__BinaryData
#define SOAP_TYPE_Media_onv__BinaryData (344)
/* onv:BinaryData */
class SOAP_CMAC onv__BinaryData : public xsd__anyType
{
public:
	xsd__base64Binary Data;	/* required element of type xsd:base64Binary */
	char *xmime__contentType;	/* optional attribute */
public:
	virtual int soap_type() const { return 344; } /* = unique id SOAP_TYPE_Media_onv__BinaryData */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__BinaryData(): xmime__contentType(NULL) { onv__BinaryData::soap_default(NULL); }
	virtual ~onv__BinaryData() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__AttachmentData
#define SOAP_TYPE_Media_onv__AttachmentData (345)
/* onv:AttachmentData */
class SOAP_CMAC onv__AttachmentData : public xsd__anyType
{
public:
	struct _xop__Include xop__Include;	/* required element of type xop:Include */
	char *xmime__contentType;	/* optional attribute */
public:
	virtual int soap_type() const { return 345; } /* = unique id SOAP_TYPE_Media_onv__AttachmentData */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__AttachmentData(): xmime__contentType(NULL) { onv__AttachmentData::soap_default(NULL); }
	virtual ~onv__AttachmentData() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__BackupFile
#define SOAP_TYPE_Media_onv__BackupFile (346)
/* onv:BackupFile */
class SOAP_CMAC onv__BackupFile : public xsd__anyType
{
public:
	std::string Name;	/* required element of type xsd:string */
	onv__AttachmentData *Data;	/* required element of type onv:AttachmentData */
public:
	virtual int soap_type() const { return 346; } /* = unique id SOAP_TYPE_Media_onv__BackupFile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__BackupFile(): Data(NULL) { onv__BackupFile::soap_default(NULL); }
	virtual ~onv__BackupFile() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__SystemDateTime
#define SOAP_TYPE_Media_onv__SystemDateTime (347)
/* onv:SystemDateTime */
class SOAP_CMAC onv__SystemDateTime : public xsd__anyType
{
public:
	enum onv__SetDateTimeType DateTimeType;	/* required element of type onv:SetDateTimeType */
	bool DaylightSavings;	/* required element of type xsd:boolean */
	class onv__TimeZone *TimeZone;	/* optional element of type onv:TimeZone */
	class onv__DateTime *UTCDateTime;	/* optional element of type onv:DateTime */
	onv__DateTime *LocalDateTime;	/* optional element of type onv:DateTime */
	class onv__SystemDateTimeExtension *Extension;	/* optional element of type onv:SystemDateTimeExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 347; } /* = unique id SOAP_TYPE_Media_onv__SystemDateTime */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__SystemDateTime(): TimeZone(NULL), UTCDateTime(NULL), LocalDateTime(NULL), Extension(NULL), __anyAttribute(NULL) { onv__SystemDateTime::soap_default(NULL); }
	virtual ~onv__SystemDateTime() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__SystemDateTimeExtension
#define SOAP_TYPE_Media_onv__SystemDateTimeExtension (348)
/* onv:SystemDateTimeExtension */
class SOAP_CMAC onv__SystemDateTimeExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 348; } /* = unique id SOAP_TYPE_Media_onv__SystemDateTimeExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__SystemDateTimeExtension() { onv__SystemDateTimeExtension::soap_default(NULL); }
	virtual ~onv__SystemDateTimeExtension() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__DateTime
#define SOAP_TYPE_Media_onv__DateTime (349)
/* onv:DateTime */
class SOAP_CMAC onv__DateTime : public xsd__anyType
{
public:
	class onv__Time *Time;	/* required element of type onv:Time */
	class onv__Date *Date;	/* required element of type onv:Date */
public:
	virtual int soap_type() const { return 349; } /* = unique id SOAP_TYPE_Media_onv__DateTime */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__DateTime(): Time(NULL), Date(NULL) { onv__DateTime::soap_default(NULL); }
	virtual ~onv__DateTime() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__Date
#define SOAP_TYPE_Media_onv__Date (350)
/* onv:Date */
class SOAP_CMAC onv__Date : public xsd__anyType
{
public:
	int Year;	/* required element of type xsd:int */
	int Month;	/* required element of type xsd:int */
	int Day;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 350; } /* = unique id SOAP_TYPE_Media_onv__Date */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__Date() { onv__Date::soap_default(NULL); }
	virtual ~onv__Date() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__Time
#define SOAP_TYPE_Media_onv__Time (351)
/* onv:Time */
class SOAP_CMAC onv__Time : public xsd__anyType
{
public:
	int Hour;	/* required element of type xsd:int */
	int Minute;	/* required element of type xsd:int */
	int Second;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 351; } /* = unique id SOAP_TYPE_Media_onv__Time */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__Time() { onv__Time::soap_default(NULL); }
	virtual ~onv__Time() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__TimeZone
#define SOAP_TYPE_Media_onv__TimeZone (352)
/* onv:TimeZone */
class SOAP_CMAC onv__TimeZone : public xsd__anyType
{
public:
	std::string TZ;	/* required element of type xsd:token */
public:
	virtual int soap_type() const { return 352; } /* = unique id SOAP_TYPE_Media_onv__TimeZone */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__TimeZone() { onv__TimeZone::soap_default(NULL); }
	virtual ~onv__TimeZone() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__User
#define SOAP_TYPE_Media_onv__User (353)
/* onv:User */
class SOAP_CMAC onv__User : public xsd__anyType
{
public:
	std::string Username;	/* required element of type xsd:string */
	std::string *Password;	/* optional element of type xsd:string */
	enum onv__UserLevel UserLevel;	/* required element of type onv:UserLevel */
	class onv__UserExtension *Extension;	/* optional element of type onv:UserExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 353; } /* = unique id SOAP_TYPE_Media_onv__User */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__User(): Password(NULL), Extension(NULL), __anyAttribute(NULL) { onv__User::soap_default(NULL); }
	virtual ~onv__User() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__UserExtension
#define SOAP_TYPE_Media_onv__UserExtension (354)
/* onv:UserExtension */
class SOAP_CMAC onv__UserExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 354; } /* = unique id SOAP_TYPE_Media_onv__UserExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__UserExtension() { onv__UserExtension::soap_default(NULL); }
	virtual ~onv__UserExtension() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__CertificateGenerationParameters
#define SOAP_TYPE_Media_onv__CertificateGenerationParameters (355)
/* onv:CertificateGenerationParameters */
class SOAP_CMAC onv__CertificateGenerationParameters : public xsd__anyType
{
public:
	std::string *CertificateID;	/* optional element of type xsd:token */
	std::string *Subject;	/* optional element of type xsd:string */
	std::string *ValidNotBefore;	/* optional element of type xsd:token */
	std::string *ValidNotAfter;	/* optional element of type xsd:token */
	class onv__CertificateGenerationParametersExtension *Extension;	/* optional element of type onv:CertificateGenerationParametersExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 355; } /* = unique id SOAP_TYPE_Media_onv__CertificateGenerationParameters */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__CertificateGenerationParameters(): CertificateID(NULL), Subject(NULL), ValidNotBefore(NULL), ValidNotAfter(NULL), Extension(NULL), __anyAttribute(NULL) { onv__CertificateGenerationParameters::soap_default(NULL); }
	virtual ~onv__CertificateGenerationParameters() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__CertificateGenerationParametersExtension
#define SOAP_TYPE_Media_onv__CertificateGenerationParametersExtension (356)
/* onv:CertificateGenerationParametersExtension */
class SOAP_CMAC onv__CertificateGenerationParametersExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 356; } /* = unique id SOAP_TYPE_Media_onv__CertificateGenerationParametersExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__CertificateGenerationParametersExtension() { onv__CertificateGenerationParametersExtension::soap_default(NULL); }
	virtual ~onv__CertificateGenerationParametersExtension() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__Certificate
#define SOAP_TYPE_Media_onv__Certificate (357)
/* onv:Certificate */
class SOAP_CMAC onv__Certificate : public xsd__anyType
{
public:
	std::string CertificateID;	/* required element of type xsd:token */
	onv__BinaryData *Certificate;	/* required element of type onv:BinaryData */
public:
	virtual int soap_type() const { return 357; } /* = unique id SOAP_TYPE_Media_onv__Certificate */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__Certificate(): Certificate(NULL) { onv__Certificate::soap_default(NULL); }
	virtual ~onv__Certificate() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__CertificateStatus
#define SOAP_TYPE_Media_onv__CertificateStatus (358)
/* onv:CertificateStatus */
class SOAP_CMAC onv__CertificateStatus : public xsd__anyType
{
public:
	std::string CertificateID;	/* required element of type xsd:token */
	bool Status;	/* required element of type xsd:boolean */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 358; } /* = unique id SOAP_TYPE_Media_onv__CertificateStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__CertificateStatus(): __anyAttribute(NULL) { onv__CertificateStatus::soap_default(NULL); }
	virtual ~onv__CertificateStatus() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__RelayOutputSettings
#define SOAP_TYPE_Media_onv__RelayOutputSettings (359)
/* onv:RelayOutputSettings */
class SOAP_CMAC onv__RelayOutputSettings : public xsd__anyType
{
public:
	enum onv__RelayMode Mode;	/* required element of type onv:RelayMode */
	LONG64 DelayTime;	/* external */
	enum onv__RelayIdleState IdleState;	/* required element of type onv:RelayIdleState */
public:
	virtual int soap_type() const { return 359; } /* = unique id SOAP_TYPE_Media_onv__RelayOutputSettings */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__RelayOutputSettings() { onv__RelayOutputSettings::soap_default(NULL); }
	virtual ~onv__RelayOutputSettings() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__PTZNodeExtension
#define SOAP_TYPE_Media_onv__PTZNodeExtension (362)
/* onv:PTZNodeExtension */
class SOAP_CMAC onv__PTZNodeExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 362; } /* = unique id SOAP_TYPE_Media_onv__PTZNodeExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__PTZNodeExtension() { onv__PTZNodeExtension::soap_default(NULL); }
	virtual ~onv__PTZNodeExtension() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__PTZConfigurationExtension
#define SOAP_TYPE_Media_onv__PTZConfigurationExtension (364)
/* onv:PTZConfigurationExtension */
class SOAP_CMAC onv__PTZConfigurationExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 364; } /* = unique id SOAP_TYPE_Media_onv__PTZConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__PTZConfigurationExtension() { onv__PTZConfigurationExtension::soap_default(NULL); }
	virtual ~onv__PTZConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__PTZConfigurationOptions
#define SOAP_TYPE_Media_onv__PTZConfigurationOptions (365)
/* onv:PTZConfigurationOptions */
class SOAP_CMAC onv__PTZConfigurationOptions : public xsd__anyType
{
public:
	class onv__PTZSpaces *Spaces;	/* required element of type onv:PTZSpaces */
	onv__DurationRange *PTZTimeout;	/* required element of type onv:DurationRange */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 365; } /* = unique id SOAP_TYPE_Media_onv__PTZConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__PTZConfigurationOptions(): Spaces(NULL), PTZTimeout(NULL), __anyAttribute(NULL) { onv__PTZConfigurationOptions::soap_default(NULL); }
	virtual ~onv__PTZConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__PanTiltLimits
#define SOAP_TYPE_Media_onv__PanTiltLimits (366)
/* onv:PanTiltLimits */
class SOAP_CMAC onv__PanTiltLimits : public xsd__anyType
{
public:
	class onv__Space2DDescription *Range;	/* required element of type onv:Space2DDescription */
public:
	virtual int soap_type() const { return 366; } /* = unique id SOAP_TYPE_Media_onv__PanTiltLimits */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__PanTiltLimits(): Range(NULL) { onv__PanTiltLimits::soap_default(NULL); }
	virtual ~onv__PanTiltLimits() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__ZoomLimits
#define SOAP_TYPE_Media_onv__ZoomLimits (367)
/* onv:ZoomLimits */
class SOAP_CMAC onv__ZoomLimits : public xsd__anyType
{
public:
	class onv__Space1DDescription *Range;	/* required element of type onv:Space1DDescription */
public:
	virtual int soap_type() const { return 367; } /* = unique id SOAP_TYPE_Media_onv__ZoomLimits */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__ZoomLimits(): Range(NULL) { onv__ZoomLimits::soap_default(NULL); }
	virtual ~onv__ZoomLimits() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__PTZSpaces
#define SOAP_TYPE_Media_onv__PTZSpaces (368)
/* onv:PTZSpaces */
class SOAP_CMAC onv__PTZSpaces : public xsd__anyType
{
public:
	std::vector<onv__Space2DDescription * >AbsolutePanTiltPositionSpace;	/* optional element of type onv:Space2DDescription */
	std::vector<onv__Space1DDescription * >AbsoluteZoomPositionSpace;	/* optional element of type onv:Space1DDescription */
	std::vector<onv__Space2DDescription * >RelativePanTiltTranslationSpace;	/* optional element of type onv:Space2DDescription */
	std::vector<onv__Space1DDescription * >RelativeZoomTranslationSpace;	/* optional element of type onv:Space1DDescription */
	std::vector<onv__Space2DDescription * >ContinuousPanTiltVelocitySpace;	/* optional element of type onv:Space2DDescription */
	std::vector<onv__Space1DDescription * >ContinuousZoomVelocitySpace;	/* optional element of type onv:Space1DDescription */
	std::vector<onv__Space1DDescription * >PanTiltSpeedSpace;	/* optional element of type onv:Space1DDescription */
	std::vector<onv__Space1DDescription * >ZoomSpeedSpace;	/* optional element of type onv:Space1DDescription */
	class onv__PTZSpacesExtension *Extension;	/* optional element of type onv:PTZSpacesExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 368; } /* = unique id SOAP_TYPE_Media_onv__PTZSpaces */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__PTZSpaces(): Extension(NULL), __anyAttribute(NULL) { onv__PTZSpaces::soap_default(NULL); }
	virtual ~onv__PTZSpaces() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__PTZSpacesExtension
#define SOAP_TYPE_Media_onv__PTZSpacesExtension (369)
/* onv:PTZSpacesExtension */
class SOAP_CMAC onv__PTZSpacesExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 369; } /* = unique id SOAP_TYPE_Media_onv__PTZSpacesExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__PTZSpacesExtension() { onv__PTZSpacesExtension::soap_default(NULL); }
	virtual ~onv__PTZSpacesExtension() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__Space2DDescription
#define SOAP_TYPE_Media_onv__Space2DDescription (370)
/* onv:Space2DDescription */
class SOAP_CMAC onv__Space2DDescription : public xsd__anyType
{
public:
	std::string URI;	/* required element of type xsd:anyURI */
	onv__FloatRange *XRange;	/* required element of type onv:FloatRange */
	onv__FloatRange *YRange;	/* required element of type onv:FloatRange */
public:
	virtual int soap_type() const { return 370; } /* = unique id SOAP_TYPE_Media_onv__Space2DDescription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__Space2DDescription(): XRange(NULL), YRange(NULL) { onv__Space2DDescription::soap_default(NULL); }
	virtual ~onv__Space2DDescription() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__Space1DDescription
#define SOAP_TYPE_Media_onv__Space1DDescription (371)
/* onv:Space1DDescription */
class SOAP_CMAC onv__Space1DDescription : public xsd__anyType
{
public:
	std::string URI;	/* required element of type xsd:anyURI */
	onv__FloatRange *XRange;	/* required element of type onv:FloatRange */
public:
	virtual int soap_type() const { return 371; } /* = unique id SOAP_TYPE_Media_onv__Space1DDescription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__Space1DDescription(): XRange(NULL) { onv__Space1DDescription::soap_default(NULL); }
	virtual ~onv__Space1DDescription() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__Vector2D
#define SOAP_TYPE_Media_onv__Vector2D (372)
/* Primitive onv:Vector2D schema type: */
class SOAP_CMAC onv__Vector2D : public xsd__anyType
{
public:
	float x;	/* required attribute */
	float y;	/* required attribute */
	std::string *space;	/* optional attribute */
public:
	virtual int soap_type() const { return 372; } /* = unique id SOAP_TYPE_Media_onv__Vector2D */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__Vector2D(): space(NULL) { onv__Vector2D::soap_default(NULL); }
	virtual ~onv__Vector2D() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__Vector1D
#define SOAP_TYPE_Media_onv__Vector1D (373)
/* Primitive onv:Vector1D schema type: */
class SOAP_CMAC onv__Vector1D : public xsd__anyType
{
public:
	float x;	/* required attribute */
	std::string *space;	/* optional attribute */
public:
	virtual int soap_type() const { return 373; } /* = unique id SOAP_TYPE_Media_onv__Vector1D */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__Vector1D(): space(NULL) { onv__Vector1D::soap_default(NULL); }
	virtual ~onv__Vector1D() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__PTZVector
#define SOAP_TYPE_Media_onv__PTZVector (374)
/* onv:PTZVector */
class SOAP_CMAC onv__PTZVector : public xsd__anyType
{
public:
	onv__Vector2D *PanTilt;	/* optional element of type onv:Vector2D */
	onv__Vector1D *Zoom;	/* optional element of type onv:Vector1D */
public:
	virtual int soap_type() const { return 374; } /* = unique id SOAP_TYPE_Media_onv__PTZVector */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__PTZVector(): PanTilt(NULL), Zoom(NULL) { onv__PTZVector::soap_default(NULL); }
	virtual ~onv__PTZVector() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__PTZSpeed
#define SOAP_TYPE_Media_onv__PTZSpeed (375)
/* onv:PTZSpeed */
class SOAP_CMAC onv__PTZSpeed : public xsd__anyType
{
public:
	onv__Vector2D *PanTilt;	/* optional element of type onv:Vector2D */
	onv__Vector1D *Zoom;	/* optional element of type onv:Vector1D */
public:
	virtual int soap_type() const { return 375; } /* = unique id SOAP_TYPE_Media_onv__PTZSpeed */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__PTZSpeed(): PanTilt(NULL), Zoom(NULL) { onv__PTZSpeed::soap_default(NULL); }
	virtual ~onv__PTZSpeed() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__PTZStatus
#define SOAP_TYPE_Media_onv__PTZStatus (376)
/* onv:PTZStatus */
class SOAP_CMAC onv__PTZStatus : public xsd__anyType
{
public:
	onv__PTZVector *Position;	/* optional element of type onv:PTZVector */
	class onv__PTZMoveStatus *MoveStatus;	/* optional element of type onv:PTZMoveStatus */
	std::string *Error;	/* optional element of type xsd:string */
	time_t UtcTime;	/* required element of type xsd:dateTime */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 376; } /* = unique id SOAP_TYPE_Media_onv__PTZStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__PTZStatus(): Position(NULL), MoveStatus(NULL), Error(NULL), __anyAttribute(NULL) { onv__PTZStatus::soap_default(NULL); }
	virtual ~onv__PTZStatus() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__PTZPreset
#define SOAP_TYPE_Media_onv__PTZPreset (377)
/* onv:PTZPreset */
class SOAP_CMAC onv__PTZPreset : public xsd__anyType
{
public:
	std::string *Name;	/* optional element of type onv:Name */
	onv__PTZVector *PTZPosition;	/* optional element of type onv:PTZVector */
	std::string *token;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 377; } /* = unique id SOAP_TYPE_Media_onv__PTZPreset */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__PTZPreset(): Name(NULL), PTZPosition(NULL), token(NULL), __anyAttribute(NULL) { onv__PTZPreset::soap_default(NULL); }
	virtual ~onv__PTZPreset() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__PTZMoveStatus
#define SOAP_TYPE_Media_onv__PTZMoveStatus (378)
/* onv:PTZMoveStatus */
class SOAP_CMAC onv__PTZMoveStatus : public xsd__anyType
{
public:
	enum onv__MoveStatus *PanTilt;	/* optional element of type onv:MoveStatus */
	enum onv__MoveStatus *Zoom;	/* optional element of type onv:MoveStatus */
public:
	virtual int soap_type() const { return 378; } /* = unique id SOAP_TYPE_Media_onv__PTZMoveStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__PTZMoveStatus(): PanTilt(NULL), Zoom(NULL) { onv__PTZMoveStatus::soap_default(NULL); }
	virtual ~onv__PTZMoveStatus() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__ImagingStatus
#define SOAP_TYPE_Media_onv__ImagingStatus (379)
/* onv:ImagingStatus */
class SOAP_CMAC onv__ImagingStatus : public xsd__anyType
{
public:
	class onv__FocusStatus *FocusStatus;	/* required element of type onv:FocusStatus */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 379; } /* = unique id SOAP_TYPE_Media_onv__ImagingStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__ImagingStatus(): FocusStatus(NULL), __anyAttribute(NULL) { onv__ImagingStatus::soap_default(NULL); }
	virtual ~onv__ImagingStatus() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__FocusStatus
#define SOAP_TYPE_Media_onv__FocusStatus (380)
/* onv:FocusStatus */
class SOAP_CMAC onv__FocusStatus : public xsd__anyType
{
public:
	float Position;	/* required element of type xsd:float */
	enum onv__MoveStatus MoveStatus;	/* required element of type onv:MoveStatus */
	std::string Error;	/* required element of type xsd:string */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 380; } /* = unique id SOAP_TYPE_Media_onv__FocusStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__FocusStatus(): __anyAttribute(NULL) { onv__FocusStatus::soap_default(NULL); }
	virtual ~onv__FocusStatus() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__FocusConfiguration
#define SOAP_TYPE_Media_onv__FocusConfiguration (381)
/* onv:FocusConfiguration */
class SOAP_CMAC onv__FocusConfiguration : public xsd__anyType
{
public:
	enum onv__AutoFocusMode AutoFocusMode;	/* required element of type onv:AutoFocusMode */
	float DefaultSpeed;	/* required element of type xsd:float */
	float NearLimit;	/* required element of type xsd:float */
	float FarLimit;	/* required element of type xsd:float */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 381; } /* = unique id SOAP_TYPE_Media_onv__FocusConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__FocusConfiguration(): __anyAttribute(NULL) { onv__FocusConfiguration::soap_default(NULL); }
	virtual ~onv__FocusConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__ImagingSettings
#define SOAP_TYPE_Media_onv__ImagingSettings (382)
/* onv:ImagingSettings */
class SOAP_CMAC onv__ImagingSettings : public xsd__anyType
{
public:
	class onv__BacklightCompensation *BacklightCompensation;	/* optional element of type onv:BacklightCompensation */
	float *Brightness;	/* optional element of type xsd:float */
	float *ColorSaturation;	/* optional element of type xsd:float */
	float *Contrast;	/* optional element of type xsd:float */
	class onv__Exposure *Exposure;	/* optional element of type onv:Exposure */
	onv__FocusConfiguration *Focus;	/* optional element of type onv:FocusConfiguration */
	enum onv__IrCutFilterMode *IrCutFilter;	/* optional element of type onv:IrCutFilterMode */
	float *Sharpness;	/* optional element of type xsd:float */
	class onv__WideDynamicRange *WideDynamicRange;	/* optional element of type onv:WideDynamicRange */
	class onv__WhiteBalance *WhiteBalance;	/* optional element of type onv:WhiteBalance */
	class onv__ImagingSettingsExtension *Extension;	/* optional element of type onv:ImagingSettingsExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 382; } /* = unique id SOAP_TYPE_Media_onv__ImagingSettings */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__ImagingSettings(): BacklightCompensation(NULL), Brightness(NULL), ColorSaturation(NULL), Contrast(NULL), Exposure(NULL), Focus(NULL), IrCutFilter(NULL), Sharpness(NULL), WideDynamicRange(NULL), WhiteBalance(NULL), Extension(NULL), __anyAttribute(NULL) { onv__ImagingSettings::soap_default(NULL); }
	virtual ~onv__ImagingSettings() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__ImagingSettingsExtension
#define SOAP_TYPE_Media_onv__ImagingSettingsExtension (383)
/* onv:ImagingSettingsExtension */
class SOAP_CMAC onv__ImagingSettingsExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 383; } /* = unique id SOAP_TYPE_Media_onv__ImagingSettingsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__ImagingSettingsExtension() { onv__ImagingSettingsExtension::soap_default(NULL); }
	virtual ~onv__ImagingSettingsExtension() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__Exposure
#define SOAP_TYPE_Media_onv__Exposure (384)
/* onv:Exposure */
class SOAP_CMAC onv__Exposure : public xsd__anyType
{
public:
	enum onv__ExposureMode Mode;	/* required element of type onv:ExposureMode */
	enum onv__ExposurePriority Priority;	/* required element of type onv:ExposurePriority */
	class onv__Rectangle *Window;	/* required element of type onv:Rectangle */
	float MinExposureTime;	/* required element of type xsd:float */
	float MaxExposureTime;	/* required element of type xsd:float */
	float MinGain;	/* required element of type xsd:float */
	float MaxGain;	/* required element of type xsd:float */
	float MinIris;	/* required element of type xsd:float */
	float MaxIris;	/* required element of type xsd:float */
	float ExposureTime;	/* required element of type xsd:float */
	float Gain;	/* required element of type xsd:float */
	float Iris;	/* required element of type xsd:float */
public:
	virtual int soap_type() const { return 384; } /* = unique id SOAP_TYPE_Media_onv__Exposure */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__Exposure(): Window(NULL) { onv__Exposure::soap_default(NULL); }
	virtual ~onv__Exposure() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__WideDynamicRange
#define SOAP_TYPE_Media_onv__WideDynamicRange (385)
/* onv:WideDynamicRange */
class SOAP_CMAC onv__WideDynamicRange : public xsd__anyType
{
public:
	enum onv__WideDynamicMode Mode;	/* required element of type onv:WideDynamicMode */
	float Level;	/* required element of type xsd:float */
public:
	virtual int soap_type() const { return 385; } /* = unique id SOAP_TYPE_Media_onv__WideDynamicRange */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__WideDynamicRange() { onv__WideDynamicRange::soap_default(NULL); }
	virtual ~onv__WideDynamicRange() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__BacklightCompensation
#define SOAP_TYPE_Media_onv__BacklightCompensation (386)
/* onv:BacklightCompensation */
class SOAP_CMAC onv__BacklightCompensation : public xsd__anyType
{
public:
	enum onv__BacklightCompensationMode Mode;	/* required element of type onv:BacklightCompensationMode */
	float Level;	/* required element of type xsd:float */
public:
	virtual int soap_type() const { return 386; } /* = unique id SOAP_TYPE_Media_onv__BacklightCompensation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__BacklightCompensation() { onv__BacklightCompensation::soap_default(NULL); }
	virtual ~onv__BacklightCompensation() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__ImagingOptions
#define SOAP_TYPE_Media_onv__ImagingOptions (387)
/* onv:ImagingOptions */
class SOAP_CMAC onv__ImagingOptions : public xsd__anyType
{
public:
	class onv__BacklightCompensationOptions *BacklightCompensation;	/* required element of type onv:BacklightCompensationOptions */
	onv__FloatRange *Brightness;	/* required element of type onv:FloatRange */
	onv__FloatRange *ColorSaturation;	/* required element of type onv:FloatRange */
	onv__FloatRange *Contrast;	/* required element of type onv:FloatRange */
	class onv__ExposureOptions *Exposure;	/* required element of type onv:ExposureOptions */
	class onv__FocusOptions *Focus;	/* required element of type onv:FocusOptions */
	std::vector<enum onv__IrCutFilterMode >IrCutFilterModes;	/* required element of type onv:IrCutFilterMode */
	onv__FloatRange *Sharpness;	/* required element of type onv:FloatRange */
	class onv__WideDynamicRangeOptions *WideDynamicRange;	/* required element of type onv:WideDynamicRangeOptions */
	class onv__WhiteBalanceOptions *WhiteBalance;	/* required element of type onv:WhiteBalanceOptions */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 387; } /* = unique id SOAP_TYPE_Media_onv__ImagingOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__ImagingOptions(): BacklightCompensation(NULL), Brightness(NULL), ColorSaturation(NULL), Contrast(NULL), Exposure(NULL), Focus(NULL), Sharpness(NULL), WideDynamicRange(NULL), WhiteBalance(NULL), __anyAttribute(NULL) { onv__ImagingOptions::soap_default(NULL); }
	virtual ~onv__ImagingOptions() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__WideDynamicRangeOptions
#define SOAP_TYPE_Media_onv__WideDynamicRangeOptions (388)
/* onv:WideDynamicRangeOptions */
class SOAP_CMAC onv__WideDynamicRangeOptions : public xsd__anyType
{
public:
	std::vector<enum onv__WideDynamicMode >Mode;	/* required element of type onv:WideDynamicMode */
	onv__FloatRange *Level;	/* required element of type onv:FloatRange */
public:
	virtual int soap_type() const { return 388; } /* = unique id SOAP_TYPE_Media_onv__WideDynamicRangeOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__WideDynamicRangeOptions(): Level(NULL) { onv__WideDynamicRangeOptions::soap_default(NULL); }
	virtual ~onv__WideDynamicRangeOptions() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__BacklightCompensationOptions
#define SOAP_TYPE_Media_onv__BacklightCompensationOptions (389)
/* onv:BacklightCompensationOptions */
class SOAP_CMAC onv__BacklightCompensationOptions : public xsd__anyType
{
public:
	std::vector<enum onv__WideDynamicMode >Mode;	/* required element of type onv:WideDynamicMode */
	onv__FloatRange *Level;	/* required element of type onv:FloatRange */
public:
	virtual int soap_type() const { return 389; } /* = unique id SOAP_TYPE_Media_onv__BacklightCompensationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__BacklightCompensationOptions(): Level(NULL) { onv__BacklightCompensationOptions::soap_default(NULL); }
	virtual ~onv__BacklightCompensationOptions() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__FocusOptions
#define SOAP_TYPE_Media_onv__FocusOptions (390)
/* onv:FocusOptions */
class SOAP_CMAC onv__FocusOptions : public xsd__anyType
{
public:
	std::vector<enum onv__AutoFocusMode >AutoFocusModes;	/* optional element of type onv:AutoFocusMode */
	onv__FloatRange *DefaultSpeed;	/* required element of type onv:FloatRange */
	onv__FloatRange *NearLimit;	/* required element of type onv:FloatRange */
	onv__FloatRange *FarLimit;	/* required element of type onv:FloatRange */
public:
	virtual int soap_type() const { return 390; } /* = unique id SOAP_TYPE_Media_onv__FocusOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__FocusOptions(): DefaultSpeed(NULL), NearLimit(NULL), FarLimit(NULL) { onv__FocusOptions::soap_default(NULL); }
	virtual ~onv__FocusOptions() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__ExposureOptions
#define SOAP_TYPE_Media_onv__ExposureOptions (391)
/* onv:ExposureOptions */
class SOAP_CMAC onv__ExposureOptions : public xsd__anyType
{
public:
	std::vector<enum onv__ExposureMode >Mode;	/* required element of type onv:ExposureMode */
	std::vector<enum onv__ExposurePriority >Priority;	/* required element of type onv:ExposurePriority */
	onv__FloatRange *MinExposureTime;	/* required element of type onv:FloatRange */
	onv__FloatRange *MaxExposureTime;	/* required element of type onv:FloatRange */
	onv__FloatRange *MinGain;	/* required element of type onv:FloatRange */
	onv__FloatRange *MaxGain;	/* required element of type onv:FloatRange */
	onv__FloatRange *MinIris;	/* required element of type onv:FloatRange */
	onv__FloatRange *MaxIris;	/* required element of type onv:FloatRange */
	onv__FloatRange *ExposureTime;	/* required element of type onv:FloatRange */
	onv__FloatRange *Gain;	/* required element of type onv:FloatRange */
	onv__FloatRange *Iris;	/* required element of type onv:FloatRange */
public:
	virtual int soap_type() const { return 391; } /* = unique id SOAP_TYPE_Media_onv__ExposureOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__ExposureOptions(): MinExposureTime(NULL), MaxExposureTime(NULL), MinGain(NULL), MaxGain(NULL), MinIris(NULL), MaxIris(NULL), ExposureTime(NULL), Gain(NULL), Iris(NULL) { onv__ExposureOptions::soap_default(NULL); }
	virtual ~onv__ExposureOptions() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__WhiteBalanceOptions
#define SOAP_TYPE_Media_onv__WhiteBalanceOptions (392)
/* onv:WhiteBalanceOptions */
class SOAP_CMAC onv__WhiteBalanceOptions : public xsd__anyType
{
public:
	std::vector<enum onv__WhiteBalanceMode >Mode;	/* required element of type onv:WhiteBalanceMode */
	onv__FloatRange *YrGain;	/* required element of type onv:FloatRange */
	onv__FloatRange *YbGain;	/* required element of type onv:FloatRange */
public:
	virtual int soap_type() const { return 392; } /* = unique id SOAP_TYPE_Media_onv__WhiteBalanceOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__WhiteBalanceOptions(): YrGain(NULL), YbGain(NULL) { onv__WhiteBalanceOptions::soap_default(NULL); }
	virtual ~onv__WhiteBalanceOptions() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__FocusMove
#define SOAP_TYPE_Media_onv__FocusMove (393)
/* onv:FocusMove */
class SOAP_CMAC onv__FocusMove : public xsd__anyType
{
public:
	class onv__AbsoluteFocus *Absolute;	/* optional element of type onv:AbsoluteFocus */
	class onv__RelativeFocus *Relative;	/* optional element of type onv:RelativeFocus */
	class onv__ContinuousFocus *Continuous;	/* optional element of type onv:ContinuousFocus */
public:
	virtual int soap_type() const { return 393; } /* = unique id SOAP_TYPE_Media_onv__FocusMove */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__FocusMove(): Absolute(NULL), Relative(NULL), Continuous(NULL) { onv__FocusMove::soap_default(NULL); }
	virtual ~onv__FocusMove() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__AbsoluteFocus
#define SOAP_TYPE_Media_onv__AbsoluteFocus (394)
/* onv:AbsoluteFocus */
class SOAP_CMAC onv__AbsoluteFocus : public xsd__anyType
{
public:
	float Position;	/* required element of type xsd:float */
	float *Speed;	/* optional element of type xsd:float */
public:
	virtual int soap_type() const { return 394; } /* = unique id SOAP_TYPE_Media_onv__AbsoluteFocus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__AbsoluteFocus(): Speed(NULL) { onv__AbsoluteFocus::soap_default(NULL); }
	virtual ~onv__AbsoluteFocus() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__RelativeFocus
#define SOAP_TYPE_Media_onv__RelativeFocus (395)
/* onv:RelativeFocus */
class SOAP_CMAC onv__RelativeFocus : public xsd__anyType
{
public:
	float Distance;	/* required element of type xsd:float */
	float *Speed;	/* optional element of type xsd:float */
public:
	virtual int soap_type() const { return 395; } /* = unique id SOAP_TYPE_Media_onv__RelativeFocus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__RelativeFocus(): Speed(NULL) { onv__RelativeFocus::soap_default(NULL); }
	virtual ~onv__RelativeFocus() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__ContinuousFocus
#define SOAP_TYPE_Media_onv__ContinuousFocus (396)
/* onv:ContinuousFocus */
class SOAP_CMAC onv__ContinuousFocus : public xsd__anyType
{
public:
	float Speed;	/* required element of type xsd:float */
public:
	virtual int soap_type() const { return 396; } /* = unique id SOAP_TYPE_Media_onv__ContinuousFocus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__ContinuousFocus() { onv__ContinuousFocus::soap_default(NULL); }
	virtual ~onv__ContinuousFocus() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__MoveOptions
#define SOAP_TYPE_Media_onv__MoveOptions (397)
/* onv:MoveOptions */
class SOAP_CMAC onv__MoveOptions : public xsd__anyType
{
public:
	class onv__AbsoluteFocusOptions *Absolute;	/* optional element of type onv:AbsoluteFocusOptions */
	class onv__RelativeFocusOptions *Relative;	/* optional element of type onv:RelativeFocusOptions */
	class onv__ContinuousFocusOptions *Continuous;	/* optional element of type onv:ContinuousFocusOptions */
public:
	virtual int soap_type() const { return 397; } /* = unique id SOAP_TYPE_Media_onv__MoveOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__MoveOptions(): Absolute(NULL), Relative(NULL), Continuous(NULL) { onv__MoveOptions::soap_default(NULL); }
	virtual ~onv__MoveOptions() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__AbsoluteFocusOptions
#define SOAP_TYPE_Media_onv__AbsoluteFocusOptions (398)
/* onv:AbsoluteFocusOptions */
class SOAP_CMAC onv__AbsoluteFocusOptions : public xsd__anyType
{
public:
	onv__FloatRange *Position;	/* required element of type onv:FloatRange */
	onv__FloatRange *Speed;	/* optional element of type onv:FloatRange */
public:
	virtual int soap_type() const { return 398; } /* = unique id SOAP_TYPE_Media_onv__AbsoluteFocusOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__AbsoluteFocusOptions(): Position(NULL), Speed(NULL) { onv__AbsoluteFocusOptions::soap_default(NULL); }
	virtual ~onv__AbsoluteFocusOptions() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__RelativeFocusOptions
#define SOAP_TYPE_Media_onv__RelativeFocusOptions (399)
/* onv:RelativeFocusOptions */
class SOAP_CMAC onv__RelativeFocusOptions : public xsd__anyType
{
public:
	onv__FloatRange *Distance;	/* required element of type onv:FloatRange */
	onv__FloatRange *Speed;	/* required element of type onv:FloatRange */
public:
	virtual int soap_type() const { return 399; } /* = unique id SOAP_TYPE_Media_onv__RelativeFocusOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__RelativeFocusOptions(): Distance(NULL), Speed(NULL) { onv__RelativeFocusOptions::soap_default(NULL); }
	virtual ~onv__RelativeFocusOptions() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__ContinuousFocusOptions
#define SOAP_TYPE_Media_onv__ContinuousFocusOptions (400)
/* onv:ContinuousFocusOptions */
class SOAP_CMAC onv__ContinuousFocusOptions : public xsd__anyType
{
public:
	onv__FloatRange *Speed;	/* required element of type onv:FloatRange */
public:
	virtual int soap_type() const { return 400; } /* = unique id SOAP_TYPE_Media_onv__ContinuousFocusOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__ContinuousFocusOptions(): Speed(NULL) { onv__ContinuousFocusOptions::soap_default(NULL); }
	virtual ~onv__ContinuousFocusOptions() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__WhiteBalance
#define SOAP_TYPE_Media_onv__WhiteBalance (401)
/* onv:WhiteBalance */
class SOAP_CMAC onv__WhiteBalance : public xsd__anyType
{
public:
	enum onv__WhiteBalanceMode Mode;	/* required element of type onv:WhiteBalanceMode */
	float CrGain;	/* required element of type xsd:float */
	float CbGain;	/* required element of type xsd:float */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 401; } /* = unique id SOAP_TYPE_Media_onv__WhiteBalance */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__WhiteBalance(): __anyAttribute(NULL) { onv__WhiteBalance::soap_default(NULL); }
	virtual ~onv__WhiteBalance() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__ImagingStatus20
#define SOAP_TYPE_Media_onv__ImagingStatus20 (402)
/* onv:ImagingStatus20 */
class SOAP_CMAC onv__ImagingStatus20 : public xsd__anyType
{
public:
	class onv__FocusStatus20 *FocusStatus20;	/* optional element of type onv:FocusStatus20 */
	class onv__ImagingStatus20Extension *Extension;	/* optional element of type onv:ImagingStatus20Extension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 402; } /* = unique id SOAP_TYPE_Media_onv__ImagingStatus20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__ImagingStatus20(): FocusStatus20(NULL), Extension(NULL), __anyAttribute(NULL) { onv__ImagingStatus20::soap_default(NULL); }
	virtual ~onv__ImagingStatus20() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__ImagingStatus20Extension
#define SOAP_TYPE_Media_onv__ImagingStatus20Extension (403)
/* onv:ImagingStatus20Extension */
class SOAP_CMAC onv__ImagingStatus20Extension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 403; } /* = unique id SOAP_TYPE_Media_onv__ImagingStatus20Extension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__ImagingStatus20Extension() { onv__ImagingStatus20Extension::soap_default(NULL); }
	virtual ~onv__ImagingStatus20Extension() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__FocusStatus20
#define SOAP_TYPE_Media_onv__FocusStatus20 (404)
/* onv:FocusStatus20 */
class SOAP_CMAC onv__FocusStatus20 : public xsd__anyType
{
public:
	float Position;	/* required element of type xsd:float */
	enum onv__MoveStatus MoveStatus;	/* required element of type onv:MoveStatus */
	std::string *Error;	/* optional element of type xsd:string */
	class onv__FocusStatus20Extension *Extension;	/* optional element of type onv:FocusStatus20Extension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 404; } /* = unique id SOAP_TYPE_Media_onv__FocusStatus20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__FocusStatus20(): Error(NULL), Extension(NULL), __anyAttribute(NULL) { onv__FocusStatus20::soap_default(NULL); }
	virtual ~onv__FocusStatus20() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__FocusStatus20Extension
#define SOAP_TYPE_Media_onv__FocusStatus20Extension (405)
/* onv:FocusStatus20Extension */
class SOAP_CMAC onv__FocusStatus20Extension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 405; } /* = unique id SOAP_TYPE_Media_onv__FocusStatus20Extension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__FocusStatus20Extension() { onv__FocusStatus20Extension::soap_default(NULL); }
	virtual ~onv__FocusStatus20Extension() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__ImagingSettings20
#define SOAP_TYPE_Media_onv__ImagingSettings20 (406)
/* onv:ImagingSettings20 */
class SOAP_CMAC onv__ImagingSettings20 : public xsd__anyType
{
public:
	class onv__BacklightCompensation20 *BacklightCompensation;	/* optional element of type onv:BacklightCompensation20 */
	float *Brightness;	/* optional element of type xsd:float */
	float *ColorSaturation;	/* optional element of type xsd:float */
	float *Contrast;	/* optional element of type xsd:float */
	class onv__Exposure20 *Exposure;	/* optional element of type onv:Exposure20 */
	class onv__FocusConfiguration20 *Focus;	/* optional element of type onv:FocusConfiguration20 */
	enum onv__IrCutFilterMode *IrCutFilter;	/* optional element of type onv:IrCutFilterMode */
	float *Sharpness;	/* optional element of type xsd:float */
	class onv__WideDynamicRange20 *WideDynamicRange;	/* optional element of type onv:WideDynamicRange20 */
	class onv__WhiteBalance20 *WhiteBalance;	/* optional element of type onv:WhiteBalance20 */
	class onv__ImagingSettingsExtension20 *Extension;	/* optional element of type onv:ImagingSettingsExtension20 */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 406; } /* = unique id SOAP_TYPE_Media_onv__ImagingSettings20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__ImagingSettings20(): BacklightCompensation(NULL), Brightness(NULL), ColorSaturation(NULL), Contrast(NULL), Exposure(NULL), Focus(NULL), IrCutFilter(NULL), Sharpness(NULL), WideDynamicRange(NULL), WhiteBalance(NULL), Extension(NULL), __anyAttribute(NULL) { onv__ImagingSettings20::soap_default(NULL); }
	virtual ~onv__ImagingSettings20() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__ImagingSettingsExtension20
#define SOAP_TYPE_Media_onv__ImagingSettingsExtension20 (407)
/* onv:ImagingSettingsExtension20 */
class SOAP_CMAC onv__ImagingSettingsExtension20 : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 407; } /* = unique id SOAP_TYPE_Media_onv__ImagingSettingsExtension20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__ImagingSettingsExtension20() { onv__ImagingSettingsExtension20::soap_default(NULL); }
	virtual ~onv__ImagingSettingsExtension20() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__WideDynamicRange20
#define SOAP_TYPE_Media_onv__WideDynamicRange20 (408)
/* onv:WideDynamicRange20 */
class SOAP_CMAC onv__WideDynamicRange20 : public xsd__anyType
{
public:
	enum onv__WideDynamicMode Mode;	/* required element of type onv:WideDynamicMode */
	float *Level;	/* optional element of type xsd:float */
public:
	virtual int soap_type() const { return 408; } /* = unique id SOAP_TYPE_Media_onv__WideDynamicRange20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__WideDynamicRange20(): Level(NULL) { onv__WideDynamicRange20::soap_default(NULL); }
	virtual ~onv__WideDynamicRange20() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__BacklightCompensation20
#define SOAP_TYPE_Media_onv__BacklightCompensation20 (409)
/* onv:BacklightCompensation20 */
class SOAP_CMAC onv__BacklightCompensation20 : public xsd__anyType
{
public:
	enum onv__BacklightCompensationMode Mode;	/* required element of type onv:BacklightCompensationMode */
	float *Level;	/* optional element of type xsd:float */
public:
	virtual int soap_type() const { return 409; } /* = unique id SOAP_TYPE_Media_onv__BacklightCompensation20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__BacklightCompensation20(): Level(NULL) { onv__BacklightCompensation20::soap_default(NULL); }
	virtual ~onv__BacklightCompensation20() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__Exposure20
#define SOAP_TYPE_Media_onv__Exposure20 (410)
/* onv:Exposure20 */
class SOAP_CMAC onv__Exposure20 : public xsd__anyType
{
public:
	enum onv__ExposureMode Mode;	/* required element of type onv:ExposureMode */
	enum onv__ExposurePriority *Priority;	/* optional element of type onv:ExposurePriority */
	onv__Rectangle *Window;	/* optional element of type onv:Rectangle */
	float *MinExposureTime;	/* optional element of type xsd:float */
	float *MaxExposureTime;	/* optional element of type xsd:float */
	float *MinGain;	/* optional element of type xsd:float */
	float *MaxGain;	/* optional element of type xsd:float */
	float *MinIris;	/* optional element of type xsd:float */
	float *MaxIris;	/* optional element of type xsd:float */
	float *ExposureTime;	/* optional element of type xsd:float */
	float *Gain;	/* optional element of type xsd:float */
	float *Iris;	/* optional element of type xsd:float */
public:
	virtual int soap_type() const { return 410; } /* = unique id SOAP_TYPE_Media_onv__Exposure20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__Exposure20(): Priority(NULL), Window(NULL), MinExposureTime(NULL), MaxExposureTime(NULL), MinGain(NULL), MaxGain(NULL), MinIris(NULL), MaxIris(NULL), ExposureTime(NULL), Gain(NULL), Iris(NULL) { onv__Exposure20::soap_default(NULL); }
	virtual ~onv__Exposure20() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__ImagingOptions20
#define SOAP_TYPE_Media_onv__ImagingOptions20 (411)
/* onv:ImagingOptions20 */
class SOAP_CMAC onv__ImagingOptions20 : public xsd__anyType
{
public:
	class onv__BacklightCompensationOptions20 *BacklightCompensation;	/* optional element of type onv:BacklightCompensationOptions20 */
	onv__FloatRange *Brightness;	/* optional element of type onv:FloatRange */
	onv__FloatRange *ColorSaturation;	/* optional element of type onv:FloatRange */
	onv__FloatRange *Contrast;	/* optional element of type onv:FloatRange */
	class onv__ExposureOptions20 *Exposure;	/* optional element of type onv:ExposureOptions20 */
	class onv__FocusOptions20 *Focus;	/* optional element of type onv:FocusOptions20 */
	std::vector<enum onv__IrCutFilterMode >IrCutFilterModes;	/* optional element of type onv:IrCutFilterMode */
	onv__FloatRange *Sharpness;	/* optional element of type onv:FloatRange */
	class onv__WideDynamicRangeOptions20 *WideDynamicRange;	/* optional element of type onv:WideDynamicRangeOptions20 */
	class onv__WhiteBalanceOptions20 *WhiteBalance;	/* optional element of type onv:WhiteBalanceOptions20 */
	class onv__ImagingOptions20Extension *Extension;	/* optional element of type onv:ImagingOptions20Extension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 411; } /* = unique id SOAP_TYPE_Media_onv__ImagingOptions20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__ImagingOptions20(): BacklightCompensation(NULL), Brightness(NULL), ColorSaturation(NULL), Contrast(NULL), Exposure(NULL), Focus(NULL), Sharpness(NULL), WideDynamicRange(NULL), WhiteBalance(NULL), Extension(NULL), __anyAttribute(NULL) { onv__ImagingOptions20::soap_default(NULL); }
	virtual ~onv__ImagingOptions20() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__ImagingOptions20Extension
#define SOAP_TYPE_Media_onv__ImagingOptions20Extension (412)
/* onv:ImagingOptions20Extension */
class SOAP_CMAC onv__ImagingOptions20Extension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 412; } /* = unique id SOAP_TYPE_Media_onv__ImagingOptions20Extension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__ImagingOptions20Extension() { onv__ImagingOptions20Extension::soap_default(NULL); }
	virtual ~onv__ImagingOptions20Extension() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__WideDynamicRangeOptions20
#define SOAP_TYPE_Media_onv__WideDynamicRangeOptions20 (413)
/* onv:WideDynamicRangeOptions20 */
class SOAP_CMAC onv__WideDynamicRangeOptions20 : public xsd__anyType
{
public:
	std::vector<enum onv__WideDynamicMode >Mode;	/* required element of type onv:WideDynamicMode */
	onv__FloatRange *Level;	/* optional element of type onv:FloatRange */
public:
	virtual int soap_type() const { return 413; } /* = unique id SOAP_TYPE_Media_onv__WideDynamicRangeOptions20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__WideDynamicRangeOptions20(): Level(NULL) { onv__WideDynamicRangeOptions20::soap_default(NULL); }
	virtual ~onv__WideDynamicRangeOptions20() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__BacklightCompensationOptions20
#define SOAP_TYPE_Media_onv__BacklightCompensationOptions20 (414)
/* onv:BacklightCompensationOptions20 */
class SOAP_CMAC onv__BacklightCompensationOptions20 : public xsd__anyType
{
public:
	std::vector<enum onv__BacklightCompensationMode >Mode;	/* required element of type onv:BacklightCompensationMode */
	onv__FloatRange *Level;	/* optional element of type onv:FloatRange */
public:
	virtual int soap_type() const { return 414; } /* = unique id SOAP_TYPE_Media_onv__BacklightCompensationOptions20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__BacklightCompensationOptions20(): Level(NULL) { onv__BacklightCompensationOptions20::soap_default(NULL); }
	virtual ~onv__BacklightCompensationOptions20() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__ExposureOptions20
#define SOAP_TYPE_Media_onv__ExposureOptions20 (415)
/* onv:ExposureOptions20 */
class SOAP_CMAC onv__ExposureOptions20 : public xsd__anyType
{
public:
	std::vector<enum onv__ExposureMode >Mode;	/* required element of type onv:ExposureMode */
	std::vector<enum onv__ExposurePriority >Priority;	/* optional element of type onv:ExposurePriority */
	onv__FloatRange *MinExposureTime;	/* optional element of type onv:FloatRange */
	onv__FloatRange *MaxExposureTime;	/* optional element of type onv:FloatRange */
	onv__FloatRange *MinGain;	/* optional element of type onv:FloatRange */
	onv__FloatRange *MaxGain;	/* optional element of type onv:FloatRange */
	onv__FloatRange *MinIris;	/* optional element of type onv:FloatRange */
	onv__FloatRange *MaxIris;	/* optional element of type onv:FloatRange */
	onv__FloatRange *ExposureTime;	/* optional element of type onv:FloatRange */
	onv__FloatRange *Gain;	/* optional element of type onv:FloatRange */
	onv__FloatRange *Iris;	/* optional element of type onv:FloatRange */
public:
	virtual int soap_type() const { return 415; } /* = unique id SOAP_TYPE_Media_onv__ExposureOptions20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__ExposureOptions20(): MinExposureTime(NULL), MaxExposureTime(NULL), MinGain(NULL), MaxGain(NULL), MinIris(NULL), MaxIris(NULL), ExposureTime(NULL), Gain(NULL), Iris(NULL) { onv__ExposureOptions20::soap_default(NULL); }
	virtual ~onv__ExposureOptions20() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__MoveOptions20
#define SOAP_TYPE_Media_onv__MoveOptions20 (416)
/* onv:MoveOptions20 */
class SOAP_CMAC onv__MoveOptions20 : public xsd__anyType
{
public:
	onv__AbsoluteFocusOptions *Absolute;	/* optional element of type onv:AbsoluteFocusOptions */
	class onv__RelativeFocusOptions20 *Relative;	/* optional element of type onv:RelativeFocusOptions20 */
	onv__ContinuousFocusOptions *Continuous;	/* optional element of type onv:ContinuousFocusOptions */
public:
	virtual int soap_type() const { return 416; } /* = unique id SOAP_TYPE_Media_onv__MoveOptions20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__MoveOptions20(): Absolute(NULL), Relative(NULL), Continuous(NULL) { onv__MoveOptions20::soap_default(NULL); }
	virtual ~onv__MoveOptions20() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__RelativeFocusOptions20
#define SOAP_TYPE_Media_onv__RelativeFocusOptions20 (417)
/* onv:RelativeFocusOptions20 */
class SOAP_CMAC onv__RelativeFocusOptions20 : public xsd__anyType
{
public:
	onv__FloatRange *Distance;	/* required element of type onv:FloatRange */
	onv__FloatRange *Speed;	/* optional element of type onv:FloatRange */
public:
	virtual int soap_type() const { return 417; } /* = unique id SOAP_TYPE_Media_onv__RelativeFocusOptions20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__RelativeFocusOptions20(): Distance(NULL), Speed(NULL) { onv__RelativeFocusOptions20::soap_default(NULL); }
	virtual ~onv__RelativeFocusOptions20() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__WhiteBalance20
#define SOAP_TYPE_Media_onv__WhiteBalance20 (418)
/* onv:WhiteBalance20 */
class SOAP_CMAC onv__WhiteBalance20 : public xsd__anyType
{
public:
	enum onv__WhiteBalanceMode Mode;	/* required element of type onv:WhiteBalanceMode */
	float *CrGain;	/* optional element of type xsd:float */
	float *CbGain;	/* optional element of type xsd:float */
	class onv__WhiteBalance20Extension *Extension;	/* optional element of type onv:WhiteBalance20Extension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 418; } /* = unique id SOAP_TYPE_Media_onv__WhiteBalance20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__WhiteBalance20(): CrGain(NULL), CbGain(NULL), Extension(NULL), __anyAttribute(NULL) { onv__WhiteBalance20::soap_default(NULL); }
	virtual ~onv__WhiteBalance20() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__WhiteBalance20Extension
#define SOAP_TYPE_Media_onv__WhiteBalance20Extension (419)
/* onv:WhiteBalance20Extension */
class SOAP_CMAC onv__WhiteBalance20Extension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 419; } /* = unique id SOAP_TYPE_Media_onv__WhiteBalance20Extension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__WhiteBalance20Extension() { onv__WhiteBalance20Extension::soap_default(NULL); }
	virtual ~onv__WhiteBalance20Extension() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__FocusConfiguration20
#define SOAP_TYPE_Media_onv__FocusConfiguration20 (420)
/* onv:FocusConfiguration20 */
class SOAP_CMAC onv__FocusConfiguration20 : public xsd__anyType
{
public:
	enum onv__AutoFocusMode AutoFocusMode;	/* required element of type onv:AutoFocusMode */
	float *DefaultSpeed;	/* optional element of type xsd:float */
	float *NearLimit;	/* optional element of type xsd:float */
	float *FarLimit;	/* optional element of type xsd:float */
	class onv__FocusConfiguration20Extension *Extension;	/* required element of type onv:FocusConfiguration20Extension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 420; } /* = unique id SOAP_TYPE_Media_onv__FocusConfiguration20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__FocusConfiguration20(): DefaultSpeed(NULL), NearLimit(NULL), FarLimit(NULL), Extension(NULL), __anyAttribute(NULL) { onv__FocusConfiguration20::soap_default(NULL); }
	virtual ~onv__FocusConfiguration20() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__FocusConfiguration20Extension
#define SOAP_TYPE_Media_onv__FocusConfiguration20Extension (421)
/* onv:FocusConfiguration20Extension */
class SOAP_CMAC onv__FocusConfiguration20Extension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 421; } /* = unique id SOAP_TYPE_Media_onv__FocusConfiguration20Extension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__FocusConfiguration20Extension() { onv__FocusConfiguration20Extension::soap_default(NULL); }
	virtual ~onv__FocusConfiguration20Extension() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__WhiteBalanceOptions20
#define SOAP_TYPE_Media_onv__WhiteBalanceOptions20 (422)
/* onv:WhiteBalanceOptions20 */
class SOAP_CMAC onv__WhiteBalanceOptions20 : public xsd__anyType
{
public:
	std::vector<enum onv__WhiteBalanceMode >Mode;	/* required element of type onv:WhiteBalanceMode */
	onv__FloatRange *YrGain;	/* optional element of type onv:FloatRange */
	onv__FloatRange *YbGain;	/* optional element of type onv:FloatRange */
	class onv__WhiteBalanceOptions20Extension *Extension;	/* optional element of type onv:WhiteBalanceOptions20Extension */
public:
	virtual int soap_type() const { return 422; } /* = unique id SOAP_TYPE_Media_onv__WhiteBalanceOptions20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__WhiteBalanceOptions20(): YrGain(NULL), YbGain(NULL), Extension(NULL) { onv__WhiteBalanceOptions20::soap_default(NULL); }
	virtual ~onv__WhiteBalanceOptions20() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__WhiteBalanceOptions20Extension
#define SOAP_TYPE_Media_onv__WhiteBalanceOptions20Extension (423)
/* onv:WhiteBalanceOptions20Extension */
class SOAP_CMAC onv__WhiteBalanceOptions20Extension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 423; } /* = unique id SOAP_TYPE_Media_onv__WhiteBalanceOptions20Extension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__WhiteBalanceOptions20Extension() { onv__WhiteBalanceOptions20Extension::soap_default(NULL); }
	virtual ~onv__WhiteBalanceOptions20Extension() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__FocusOptions20
#define SOAP_TYPE_Media_onv__FocusOptions20 (424)
/* onv:FocusOptions20 */
class SOAP_CMAC onv__FocusOptions20 : public xsd__anyType
{
public:
	std::vector<enum onv__AutoFocusMode >AutoFocusModes;	/* optional element of type onv:AutoFocusMode */
	onv__FloatRange *DefaultSpeed;	/* optional element of type onv:FloatRange */
	onv__FloatRange *NearLimit;	/* optional element of type onv:FloatRange */
	onv__FloatRange *FarLimit;	/* optional element of type onv:FloatRange */
	class onv__FocusOptions20Extension *Extension;	/* optional element of type onv:FocusOptions20Extension */
public:
	virtual int soap_type() const { return 424; } /* = unique id SOAP_TYPE_Media_onv__FocusOptions20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__FocusOptions20(): DefaultSpeed(NULL), NearLimit(NULL), FarLimit(NULL), Extension(NULL) { onv__FocusOptions20::soap_default(NULL); }
	virtual ~onv__FocusOptions20() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__FocusOptions20Extension
#define SOAP_TYPE_Media_onv__FocusOptions20Extension (425)
/* onv:FocusOptions20Extension */
class SOAP_CMAC onv__FocusOptions20Extension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 425; } /* = unique id SOAP_TYPE_Media_onv__FocusOptions20Extension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__FocusOptions20Extension() { onv__FocusOptions20Extension::soap_default(NULL); }
	virtual ~onv__FocusOptions20Extension() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__MessageExtension
#define SOAP_TYPE_Media_onv__MessageExtension (426)
/* onv:MessageExtension */
class SOAP_CMAC onv__MessageExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 426; } /* = unique id SOAP_TYPE_Media_onv__MessageExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__MessageExtension() { onv__MessageExtension::soap_default(NULL); }
	virtual ~onv__MessageExtension() { }
};
#endif

#ifndef SOAP_TYPE_Media__onv__ItemList_SimpleItem
#define SOAP_TYPE_Media__onv__ItemList_SimpleItem (812)
/* onv:ItemList-SimpleItem */
class SOAP_CMAC _onv__ItemList_SimpleItem
{
public:
	std::string Name;	/* required attribute */
	std::string Value;	/* required attribute */
public:
	virtual int soap_type() const { return 812; } /* = unique id SOAP_TYPE_Media__onv__ItemList_SimpleItem */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onv__ItemList_SimpleItem() { _onv__ItemList_SimpleItem::soap_default(NULL); }
	virtual ~_onv__ItemList_SimpleItem() { }
};
#endif

#ifndef SOAP_TYPE_Media__onv__ItemList_ElementItem
#define SOAP_TYPE_Media__onv__ItemList_ElementItem (814)
/* onv:ItemList-ElementItem */
class SOAP_CMAC _onv__ItemList_ElementItem
{
public:
	char *__any;
	std::string Name;	/* required attribute */
public:
	virtual int soap_type() const { return 814; } /* = unique id SOAP_TYPE_Media__onv__ItemList_ElementItem */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onv__ItemList_ElementItem(): __any(NULL) { _onv__ItemList_ElementItem::soap_default(NULL); }
	virtual ~_onv__ItemList_ElementItem() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__ItemList
#define SOAP_TYPE_Media_onv__ItemList (427)
/* onv:ItemList */
class SOAP_CMAC onv__ItemList : public xsd__anyType
{
public:
	int __sizeSimpleItem;	/* sequence of elements <SimpleItem> */
	_onv__ItemList_SimpleItem *SimpleItem;	/* optional element of type onv:ItemList-SimpleItem */
	int __sizeElementItem;	/* sequence of elements <ElementItem> */
	_onv__ItemList_ElementItem *ElementItem;	/* optional element of type onv:ItemList-ElementItem */
	class onv__ItemListExtension *Extension;	/* optional element of type onv:ItemListExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 427; } /* = unique id SOAP_TYPE_Media_onv__ItemList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__ItemList(): SimpleItem(NULL), ElementItem(NULL), Extension(NULL), __anyAttribute(NULL) { onv__ItemList::soap_default(NULL); }
	virtual ~onv__ItemList() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__ItemListExtension
#define SOAP_TYPE_Media_onv__ItemListExtension (428)
/* onv:ItemListExtension */
class SOAP_CMAC onv__ItemListExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 428; } /* = unique id SOAP_TYPE_Media_onv__ItemListExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__ItemListExtension() { onv__ItemListExtension::soap_default(NULL); }
	virtual ~onv__ItemListExtension() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__MessageDescription
#define SOAP_TYPE_Media_onv__MessageDescription (429)
/* onv:MessageDescription */
class SOAP_CMAC onv__MessageDescription : public xsd__anyType
{
public:
	class onv__ItemListDescription *Source;	/* optional element of type onv:ItemListDescription */
	onv__ItemListDescription *Key;	/* optional element of type onv:ItemListDescription */
	onv__ItemListDescription *Data;	/* optional element of type onv:ItemListDescription */
	class onv__MessageDescriptionExtension *Extension;	/* optional element of type onv:MessageDescriptionExtension */
	bool *IsProperty;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 429; } /* = unique id SOAP_TYPE_Media_onv__MessageDescription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__MessageDescription(): Source(NULL), Key(NULL), Data(NULL), Extension(NULL), IsProperty(NULL), __anyAttribute(NULL) { onv__MessageDescription::soap_default(NULL); }
	virtual ~onv__MessageDescription() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__MessageDescriptionExtension
#define SOAP_TYPE_Media_onv__MessageDescriptionExtension (430)
/* onv:MessageDescriptionExtension */
class SOAP_CMAC onv__MessageDescriptionExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 430; } /* = unique id SOAP_TYPE_Media_onv__MessageDescriptionExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__MessageDescriptionExtension() { onv__MessageDescriptionExtension::soap_default(NULL); }
	virtual ~onv__MessageDescriptionExtension() { }
};
#endif

#ifndef SOAP_TYPE_Media__onv__ItemListDescription_SimpleItemDescription
#define SOAP_TYPE_Media__onv__ItemListDescription_SimpleItemDescription (819)
/* onv:ItemListDescription-SimpleItemDescription */
class SOAP_CMAC _onv__ItemListDescription_SimpleItemDescription
{
public:
	std::string Name;	/* required attribute */
	xsd__QName Type;	/* required attribute */
public:
	virtual int soap_type() const { return 819; } /* = unique id SOAP_TYPE_Media__onv__ItemListDescription_SimpleItemDescription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onv__ItemListDescription_SimpleItemDescription() { _onv__ItemListDescription_SimpleItemDescription::soap_default(NULL); }
	virtual ~_onv__ItemListDescription_SimpleItemDescription() { }
};
#endif

#ifndef SOAP_TYPE_Media__onv__ItemListDescription_ElementItemDescription
#define SOAP_TYPE_Media__onv__ItemListDescription_ElementItemDescription (821)
/* onv:ItemListDescription-ElementItemDescription */
class SOAP_CMAC _onv__ItemListDescription_ElementItemDescription
{
public:
	std::string Name;	/* required attribute */
	xsd__QName Type;	/* required attribute */
public:
	virtual int soap_type() const { return 821; } /* = unique id SOAP_TYPE_Media__onv__ItemListDescription_ElementItemDescription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onv__ItemListDescription_ElementItemDescription() { _onv__ItemListDescription_ElementItemDescription::soap_default(NULL); }
	virtual ~_onv__ItemListDescription_ElementItemDescription() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__ItemListDescription
#define SOAP_TYPE_Media_onv__ItemListDescription (431)
/* onv:ItemListDescription */
class SOAP_CMAC onv__ItemListDescription : public xsd__anyType
{
public:
	int __sizeSimpleItemDescription;	/* sequence of elements <SimpleItemDescription> */
	_onv__ItemListDescription_SimpleItemDescription *SimpleItemDescription;	/* optional element of type onv:ItemListDescription-SimpleItemDescription */
	int __sizeElementItemDescription;	/* sequence of elements <ElementItemDescription> */
	_onv__ItemListDescription_ElementItemDescription *ElementItemDescription;	/* optional element of type onv:ItemListDescription-ElementItemDescription */
	class onv__ItemListDescriptionExtension *Extension;	/* optional element of type onv:ItemListDescriptionExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 431; } /* = unique id SOAP_TYPE_Media_onv__ItemListDescription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__ItemListDescription(): SimpleItemDescription(NULL), ElementItemDescription(NULL), Extension(NULL), __anyAttribute(NULL) { onv__ItemListDescription::soap_default(NULL); }
	virtual ~onv__ItemListDescription() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__ItemListDescriptionExtension
#define SOAP_TYPE_Media_onv__ItemListDescriptionExtension (432)
/* onv:ItemListDescriptionExtension */
class SOAP_CMAC onv__ItemListDescriptionExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 432; } /* = unique id SOAP_TYPE_Media_onv__ItemListDescriptionExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__ItemListDescriptionExtension() { onv__ItemListDescriptionExtension::soap_default(NULL); }
	virtual ~onv__ItemListDescriptionExtension() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__Vector
#define SOAP_TYPE_Media_onv__Vector (433)
/* Primitive onv:Vector schema type: */
class SOAP_CMAC onv__Vector : public xsd__anyType
{
public:
	float *x;	/* optional attribute */
	float *y;	/* optional attribute */
public:
	virtual int soap_type() const { return 433; } /* = unique id SOAP_TYPE_Media_onv__Vector */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__Vector(): x(NULL), y(NULL) { onv__Vector::soap_default(NULL); }
	virtual ~onv__Vector() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__Rectangle
#define SOAP_TYPE_Media_onv__Rectangle (434)
/* Primitive onv:Rectangle schema type: */
class SOAP_CMAC onv__Rectangle : public xsd__anyType
{
public:
	float *bottom;	/* optional attribute */
	float *top;	/* optional attribute */
	float *right;	/* optional attribute */
	float *left;	/* optional attribute */
public:
	virtual int soap_type() const { return 434; } /* = unique id SOAP_TYPE_Media_onv__Rectangle */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__Rectangle(): bottom(NULL), top(NULL), right(NULL), left(NULL) { onv__Rectangle::soap_default(NULL); }
	virtual ~onv__Rectangle() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__Polygon
#define SOAP_TYPE_Media_onv__Polygon (435)
/* onv:Polygon */
class SOAP_CMAC onv__Polygon : public xsd__anyType
{
public:
	std::vector<onv__Vector * >Point;	/* required element of type onv:Vector */
public:
	virtual int soap_type() const { return 435; } /* = unique id SOAP_TYPE_Media_onv__Polygon */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__Polygon() { onv__Polygon::soap_default(NULL); }
	virtual ~onv__Polygon() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__Polyline
#define SOAP_TYPE_Media_onv__Polyline (436)
/* onv:Polyline */
class SOAP_CMAC onv__Polyline : public xsd__anyType
{
public:
	std::vector<onv__Vector * >Point;	/* required element of type onv:Vector */
public:
	virtual int soap_type() const { return 436; } /* = unique id SOAP_TYPE_Media_onv__Polyline */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__Polyline() { onv__Polyline::soap_default(NULL); }
	virtual ~onv__Polyline() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__Color
#define SOAP_TYPE_Media_onv__Color (437)
/* Primitive onv:Color schema type: */
class SOAP_CMAC onv__Color : public xsd__anyType
{
public:
	float X;	/* required attribute */
	float Y;	/* required attribute */
	float Z;	/* required attribute */
	std::string *Colorspace;	/* optional attribute */
public:
	virtual int soap_type() const { return 437; } /* = unique id SOAP_TYPE_Media_onv__Color */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__Color(): Colorspace(NULL) { onv__Color::soap_default(NULL); }
	virtual ~onv__Color() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__ColorCovariance
#define SOAP_TYPE_Media_onv__ColorCovariance (438)
/* Primitive onv:ColorCovariance schema type: */
class SOAP_CMAC onv__ColorCovariance : public xsd__anyType
{
public:
	float XX;	/* required attribute */
	float YY;	/* required attribute */
	float ZZ;	/* required attribute */
	float *XY;	/* optional attribute */
	float *XZ;	/* optional attribute */
	float *YZ;	/* optional attribute */
	std::string *Colorspace;	/* optional attribute */
public:
	virtual int soap_type() const { return 438; } /* = unique id SOAP_TYPE_Media_onv__ColorCovariance */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__ColorCovariance(): XY(NULL), XZ(NULL), YZ(NULL), Colorspace(NULL) { onv__ColorCovariance::soap_default(NULL); }
	virtual ~onv__ColorCovariance() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__Appearance
#define SOAP_TYPE_Media_onv__Appearance (439)
/* onv:Appearance */
class SOAP_CMAC onv__Appearance : public xsd__anyType
{
public:
	class onv__Transformation *Transformation;	/* optional element of type onv:Transformation */
	class onv__ShapeDescriptor *Shape;	/* optional element of type onv:ShapeDescriptor */
	class onv__ColorDescriptor *Color;	/* optional element of type onv:ColorDescriptor */
	class onv__ClassDescriptor *Class;	/* optional element of type onv:ClassDescriptor */
	class onv__AppearanceExtension *Extension;	/* optional element of type onv:AppearanceExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 439; } /* = unique id SOAP_TYPE_Media_onv__Appearance */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__Appearance(): Transformation(NULL), Shape(NULL), Color(NULL), Class(NULL), Extension(NULL), __anyAttribute(NULL) { onv__Appearance::soap_default(NULL); }
	virtual ~onv__Appearance() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__AppearanceExtension
#define SOAP_TYPE_Media_onv__AppearanceExtension (440)
/* onv:AppearanceExtension */
class SOAP_CMAC onv__AppearanceExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 440; } /* = unique id SOAP_TYPE_Media_onv__AppearanceExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__AppearanceExtension() { onv__AppearanceExtension::soap_default(NULL); }
	virtual ~onv__AppearanceExtension() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__ShapeDescriptor
#define SOAP_TYPE_Media_onv__ShapeDescriptor (441)
/* onv:ShapeDescriptor */
class SOAP_CMAC onv__ShapeDescriptor : public xsd__anyType
{
public:
	onv__Rectangle *BoundingBox;	/* required element of type onv:Rectangle */
	onv__Vector *CenterOfGravity;	/* required element of type onv:Vector */
	std::vector<onv__Polygon * >Polygon;	/* optional element of type onv:Polygon */
	class onv__ShapeDescriptorExtension *Extension;	/* optional element of type onv:ShapeDescriptorExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 441; } /* = unique id SOAP_TYPE_Media_onv__ShapeDescriptor */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__ShapeDescriptor(): BoundingBox(NULL), CenterOfGravity(NULL), Extension(NULL), __anyAttribute(NULL) { onv__ShapeDescriptor::soap_default(NULL); }
	virtual ~onv__ShapeDescriptor() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__ShapeDescriptorExtension
#define SOAP_TYPE_Media_onv__ShapeDescriptorExtension (442)
/* onv:ShapeDescriptorExtension */
class SOAP_CMAC onv__ShapeDescriptorExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 442; } /* = unique id SOAP_TYPE_Media_onv__ShapeDescriptorExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__ShapeDescriptorExtension() { onv__ShapeDescriptorExtension::soap_default(NULL); }
	virtual ~onv__ShapeDescriptorExtension() { }
};
#endif

#ifndef SOAP_TYPE_Media__onv__ColorDescriptor_ColorCluster
#define SOAP_TYPE_Media__onv__ColorDescriptor_ColorCluster (834)
/* onv:ColorDescriptor-ColorCluster */
class SOAP_CMAC _onv__ColorDescriptor_ColorCluster
{
public:
	onv__Color *Color;	/* required element of type onv:Color */
	float *Weight;	/* optional element of type xsd:float */
	onv__ColorCovariance *Covariance;	/* optional element of type onv:ColorCovariance */
public:
	virtual int soap_type() const { return 834; } /* = unique id SOAP_TYPE_Media__onv__ColorDescriptor_ColorCluster */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onv__ColorDescriptor_ColorCluster(): Color(NULL), Weight(NULL), Covariance(NULL) { _onv__ColorDescriptor_ColorCluster::soap_default(NULL); }
	virtual ~_onv__ColorDescriptor_ColorCluster() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__ColorDescriptor
#define SOAP_TYPE_Media_onv__ColorDescriptor (443)
/* onv:ColorDescriptor */
class SOAP_CMAC onv__ColorDescriptor : public xsd__anyType
{
public:
	int __sizeColorCluster;	/* sequence of elements <ColorCluster> */
	_onv__ColorDescriptor_ColorCluster *ColorCluster;	/* optional element of type onv:ColorDescriptor-ColorCluster */
	class onv__ColorDescriptorExtension *Extension;	/* optional element of type onv:ColorDescriptorExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 443; } /* = unique id SOAP_TYPE_Media_onv__ColorDescriptor */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__ColorDescriptor(): ColorCluster(NULL), Extension(NULL), __anyAttribute(NULL) { onv__ColorDescriptor::soap_default(NULL); }
	virtual ~onv__ColorDescriptor() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__ColorDescriptorExtension
#define SOAP_TYPE_Media_onv__ColorDescriptorExtension (444)
/* onv:ColorDescriptorExtension */
class SOAP_CMAC onv__ColorDescriptorExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 444; } /* = unique id SOAP_TYPE_Media_onv__ColorDescriptorExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__ColorDescriptorExtension() { onv__ColorDescriptorExtension::soap_default(NULL); }
	virtual ~onv__ColorDescriptorExtension() { }
};
#endif

#ifndef SOAP_TYPE_Media__onv__ClassDescriptor_ClassCandidate
#define SOAP_TYPE_Media__onv__ClassDescriptor_ClassCandidate (839)
/* onv:ClassDescriptor-ClassCandidate */
class SOAP_CMAC _onv__ClassDescriptor_ClassCandidate
{
public:
	enum onv__ClassType Type;	/* required element of type onv:ClassType */
	float Likelihood;	/* required element of type xsd:float */
public:
	virtual int soap_type() const { return 839; } /* = unique id SOAP_TYPE_Media__onv__ClassDescriptor_ClassCandidate */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onv__ClassDescriptor_ClassCandidate() { _onv__ClassDescriptor_ClassCandidate::soap_default(NULL); }
	virtual ~_onv__ClassDescriptor_ClassCandidate() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__ClassDescriptor
#define SOAP_TYPE_Media_onv__ClassDescriptor (445)
/* onv:ClassDescriptor */
class SOAP_CMAC onv__ClassDescriptor : public xsd__anyType
{
public:
	int __sizeClassCandidate;	/* sequence of elements <ClassCandidate> */
	_onv__ClassDescriptor_ClassCandidate *ClassCandidate;	/* optional element of type onv:ClassDescriptor-ClassCandidate */
	class onv__ClassDescriptorExtension *Extension;	/* optional element of type onv:ClassDescriptorExtension */
public:
	virtual int soap_type() const { return 445; } /* = unique id SOAP_TYPE_Media_onv__ClassDescriptor */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__ClassDescriptor(): ClassCandidate(NULL), Extension(NULL) { onv__ClassDescriptor::soap_default(NULL); }
	virtual ~onv__ClassDescriptor() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__ClassDescriptorExtension
#define SOAP_TYPE_Media_onv__ClassDescriptorExtension (446)
/* onv:ClassDescriptorExtension */
class SOAP_CMAC onv__ClassDescriptorExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 446; } /* = unique id SOAP_TYPE_Media_onv__ClassDescriptorExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__ClassDescriptorExtension() { onv__ClassDescriptorExtension::soap_default(NULL); }
	virtual ~onv__ClassDescriptorExtension() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__ObjectExtension
#define SOAP_TYPE_Media_onv__ObjectExtension (448)
/* onv:ObjectExtension */
class SOAP_CMAC onv__ObjectExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 448; } /* = unique id SOAP_TYPE_Media_onv__ObjectExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__ObjectExtension() { onv__ObjectExtension::soap_default(NULL); }
	virtual ~onv__ObjectExtension() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__Transformation
#define SOAP_TYPE_Media_onv__Transformation (449)
/* onv:Transformation */
class SOAP_CMAC onv__Transformation : public xsd__anyType
{
public:
	onv__Vector *Translate;	/* optional element of type onv:Vector */
	onv__Vector *Scale;	/* optional element of type onv:Vector */
	class onv__TransformationExtension *Extension;	/* optional element of type onv:TransformationExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 449; } /* = unique id SOAP_TYPE_Media_onv__Transformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__Transformation(): Translate(NULL), Scale(NULL), Extension(NULL), __anyAttribute(NULL) { onv__Transformation::soap_default(NULL); }
	virtual ~onv__Transformation() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__TransformationExtension
#define SOAP_TYPE_Media_onv__TransformationExtension (450)
/* onv:TransformationExtension */
class SOAP_CMAC onv__TransformationExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 450; } /* = unique id SOAP_TYPE_Media_onv__TransformationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__TransformationExtension() { onv__TransformationExtension::soap_default(NULL); }
	virtual ~onv__TransformationExtension() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__Frame
#define SOAP_TYPE_Media_onv__Frame (451)
/* onv:Frame */
class SOAP_CMAC onv__Frame : public xsd__anyType
{
public:
	onv__PTZStatus *PTZStatus;	/* optional element of type onv:PTZStatus */
	onv__Transformation *Transformation;	/* optional element of type onv:Transformation */
	std::vector<class onv__Object * >Object;	/* optional element of type onv:Object */
	class onv__ObjectTree *ObjectTree;	/* optional element of type onv:ObjectTree */
	class onv__FrameExtension *Extension;	/* optional element of type onv:FrameExtension */
	time_t UtcTime;	/* required attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 451; } /* = unique id SOAP_TYPE_Media_onv__Frame */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__Frame(): PTZStatus(NULL), Transformation(NULL), ObjectTree(NULL), Extension(NULL), __anyAttribute(NULL) { onv__Frame::soap_default(NULL); }
	virtual ~onv__Frame() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__FrameExtension
#define SOAP_TYPE_Media_onv__FrameExtension (452)
/* onv:FrameExtension */
class SOAP_CMAC onv__FrameExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 452; } /* = unique id SOAP_TYPE_Media_onv__FrameExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__FrameExtension() { onv__FrameExtension::soap_default(NULL); }
	virtual ~onv__FrameExtension() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__Merge
#define SOAP_TYPE_Media_onv__Merge (453)
/* onv:Merge */
class SOAP_CMAC onv__Merge : public xsd__anyType
{
public:
	std::vector<class onv__ObjectId * >from;	/* required element of type onv:ObjectId */
	onv__ObjectId *to;	/* required element of type onv:ObjectId */
public:
	virtual int soap_type() const { return 453; } /* = unique id SOAP_TYPE_Media_onv__Merge */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__Merge(): to(NULL) { onv__Merge::soap_default(NULL); }
	virtual ~onv__Merge() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__Split
#define SOAP_TYPE_Media_onv__Split (454)
/* onv:Split */
class SOAP_CMAC onv__Split : public xsd__anyType
{
public:
	onv__ObjectId *from;	/* required element of type onv:ObjectId */
	std::vector<onv__ObjectId * >to;	/* required element of type onv:ObjectId */
public:
	virtual int soap_type() const { return 454; } /* = unique id SOAP_TYPE_Media_onv__Split */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__Split(): from(NULL) { onv__Split::soap_default(NULL); }
	virtual ~onv__Split() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__Rename
#define SOAP_TYPE_Media_onv__Rename (455)
/* onv:Rename */
class SOAP_CMAC onv__Rename : public xsd__anyType
{
public:
	onv__ObjectId *from;	/* required element of type onv:ObjectId */
	onv__ObjectId *to;	/* required element of type onv:ObjectId */
public:
	virtual int soap_type() const { return 455; } /* = unique id SOAP_TYPE_Media_onv__Rename */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__Rename(): from(NULL), to(NULL) { onv__Rename::soap_default(NULL); }
	virtual ~onv__Rename() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__ObjectId
#define SOAP_TYPE_Media_onv__ObjectId (456)
/* Primitive onv:ObjectId schema type: */
class SOAP_CMAC onv__ObjectId : public xsd__anyType
{
public:
	std::string *ObjectId;	/* optional attribute */
public:
	virtual int soap_type() const { return 456; } /* = unique id SOAP_TYPE_Media_onv__ObjectId */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__ObjectId(): ObjectId(NULL) { onv__ObjectId::soap_default(NULL); }
	virtual ~onv__ObjectId() { }
};
#endif

#ifndef SOAP_TYPE_Media__onv__Behaviour_Removed
#define SOAP_TYPE_Media__onv__Behaviour_Removed (851)
/* onv:Behaviour-Removed */
class SOAP_CMAC _onv__Behaviour_Removed
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 851; } /* = unique id SOAP_TYPE_Media__onv__Behaviour_Removed */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onv__Behaviour_Removed() { _onv__Behaviour_Removed::soap_default(NULL); }
	virtual ~_onv__Behaviour_Removed() { }
};
#endif

#ifndef SOAP_TYPE_Media__onv__Behaviour_Idle
#define SOAP_TYPE_Media__onv__Behaviour_Idle (853)
/* onv:Behaviour-Idle */
class SOAP_CMAC _onv__Behaviour_Idle
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 853; } /* = unique id SOAP_TYPE_Media__onv__Behaviour_Idle */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onv__Behaviour_Idle() { _onv__Behaviour_Idle::soap_default(NULL); }
	virtual ~_onv__Behaviour_Idle() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__Behaviour
#define SOAP_TYPE_Media_onv__Behaviour (457)
/* onv:Behaviour */
class SOAP_CMAC onv__Behaviour : public xsd__anyType
{
public:
	_onv__Behaviour_Removed *Removed;	/* optional element of type onv:Behaviour-Removed */
	_onv__Behaviour_Idle *Idle;	/* optional element of type onv:Behaviour-Idle */
	class onv__BehaviourExtension *Extension;	/* optional element of type onv:BehaviourExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 457; } /* = unique id SOAP_TYPE_Media_onv__Behaviour */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__Behaviour(): Removed(NULL), Idle(NULL), Extension(NULL), __anyAttribute(NULL) { onv__Behaviour::soap_default(NULL); }
	virtual ~onv__Behaviour() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__BehaviourExtension
#define SOAP_TYPE_Media_onv__BehaviourExtension (458)
/* onv:BehaviourExtension */
class SOAP_CMAC onv__BehaviourExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 458; } /* = unique id SOAP_TYPE_Media_onv__BehaviourExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__BehaviourExtension() { onv__BehaviourExtension::soap_default(NULL); }
	virtual ~onv__BehaviourExtension() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__ObjectTree
#define SOAP_TYPE_Media_onv__ObjectTree (459)
/* onv:ObjectTree */
class SOAP_CMAC onv__ObjectTree : public xsd__anyType
{
public:
	std::vector<onv__Rename * >Rename;	/* optional element of type onv:Rename */
	std::vector<onv__Split * >Split;	/* optional element of type onv:Split */
	std::vector<onv__Merge * >Merge;	/* optional element of type onv:Merge */
	std::vector<onv__ObjectId * >Delete;	/* optional element of type onv:ObjectId */
	class onv__ObjectTreeExtension *Extension;	/* optional element of type onv:ObjectTreeExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 459; } /* = unique id SOAP_TYPE_Media_onv__ObjectTree */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__ObjectTree(): Extension(NULL), __anyAttribute(NULL) { onv__ObjectTree::soap_default(NULL); }
	virtual ~onv__ObjectTree() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__ObjectTreeExtension
#define SOAP_TYPE_Media_onv__ObjectTreeExtension (460)
/* onv:ObjectTreeExtension */
class SOAP_CMAC onv__ObjectTreeExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 460; } /* = unique id SOAP_TYPE_Media_onv__ObjectTreeExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__ObjectTreeExtension() { onv__ObjectTreeExtension::soap_default(NULL); }
	virtual ~onv__ObjectTreeExtension() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__AnalyticsEngineConfiguration
#define SOAP_TYPE_Media_onv__AnalyticsEngineConfiguration (461)
/* onv:AnalyticsEngineConfiguration */
class SOAP_CMAC onv__AnalyticsEngineConfiguration : public xsd__anyType
{
public:
	std::vector<class onv__Config * >AnalyticsModule;	/* optional element of type onv:Config */
	class onv__AnalyticsEngineConfigurationExtension *Extension;	/* optional element of type onv:AnalyticsEngineConfigurationExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 461; } /* = unique id SOAP_TYPE_Media_onv__AnalyticsEngineConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__AnalyticsEngineConfiguration(): Extension(NULL), __anyAttribute(NULL) { onv__AnalyticsEngineConfiguration::soap_default(NULL); }
	virtual ~onv__AnalyticsEngineConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__AnalyticsEngineConfigurationExtension
#define SOAP_TYPE_Media_onv__AnalyticsEngineConfigurationExtension (462)
/* onv:AnalyticsEngineConfigurationExtension */
class SOAP_CMAC onv__AnalyticsEngineConfigurationExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 462; } /* = unique id SOAP_TYPE_Media_onv__AnalyticsEngineConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__AnalyticsEngineConfigurationExtension() { onv__AnalyticsEngineConfigurationExtension::soap_default(NULL); }
	virtual ~onv__AnalyticsEngineConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__RuleEngineConfiguration
#define SOAP_TYPE_Media_onv__RuleEngineConfiguration (463)
/* onv:RuleEngineConfiguration */
class SOAP_CMAC onv__RuleEngineConfiguration : public xsd__anyType
{
public:
	std::vector<onv__Config * >Rule;	/* optional element of type onv:Config */
	class onv__RuleEngineConfigurationExtension *Extension;	/* optional element of type onv:RuleEngineConfigurationExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 463; } /* = unique id SOAP_TYPE_Media_onv__RuleEngineConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__RuleEngineConfiguration(): Extension(NULL), __anyAttribute(NULL) { onv__RuleEngineConfiguration::soap_default(NULL); }
	virtual ~onv__RuleEngineConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__RuleEngineConfigurationExtension
#define SOAP_TYPE_Media_onv__RuleEngineConfigurationExtension (464)
/* onv:RuleEngineConfigurationExtension */
class SOAP_CMAC onv__RuleEngineConfigurationExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 464; } /* = unique id SOAP_TYPE_Media_onv__RuleEngineConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__RuleEngineConfigurationExtension() { onv__RuleEngineConfigurationExtension::soap_default(NULL); }
	virtual ~onv__RuleEngineConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__Config
#define SOAP_TYPE_Media_onv__Config (465)
/* onv:Config */
class SOAP_CMAC onv__Config : public xsd__anyType
{
public:
	onv__ItemList *Parameters;	/* required element of type onv:ItemList */
	std::string Name;	/* required attribute */
	xsd__QName Type;	/* required attribute */
public:
	virtual int soap_type() const { return 465; } /* = unique id SOAP_TYPE_Media_onv__Config */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__Config(): Parameters(NULL) { onv__Config::soap_default(NULL); }
	virtual ~onv__Config() { }
};
#endif

#ifndef SOAP_TYPE_Media__onv__ConfigDescription_Messages
#define SOAP_TYPE_Media__onv__ConfigDescription_Messages (868)
/* onv:ConfigDescription-Messages */
class SOAP_CMAC _onv__ConfigDescription_Messages
{
public:
	onv__ItemListDescription *Source;	/* optional element of type onv:ItemListDescription */
	onv__ItemListDescription *Key;	/* optional element of type onv:ItemListDescription */
	onv__ItemListDescription *Data;	/* optional element of type onv:ItemListDescription */
	onv__MessageDescriptionExtension *Extension;	/* optional element of type onv:MessageDescriptionExtension */
	bool *IsProperty;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
	std::string ParentTopic;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 868; } /* = unique id SOAP_TYPE_Media__onv__ConfigDescription_Messages */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onv__ConfigDescription_Messages(): Source(NULL), Key(NULL), Data(NULL), Extension(NULL), IsProperty(NULL), __anyAttribute(NULL) { _onv__ConfigDescription_Messages::soap_default(NULL); }
	virtual ~_onv__ConfigDescription_Messages() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__ConfigDescription
#define SOAP_TYPE_Media_onv__ConfigDescription (466)
/* onv:ConfigDescription */
class SOAP_CMAC onv__ConfigDescription : public xsd__anyType
{
public:
	onv__ItemListDescription *Parameters;	/* required element of type onv:ItemListDescription */
	int __sizeMessages;	/* sequence of elements <Messages> */
	_onv__ConfigDescription_Messages *Messages;	/* optional element of type onv:ConfigDescription-Messages */
	class onv__ConfigDescriptionExtension *Extension;	/* optional element of type onv:ConfigDescriptionExtension */
	xsd__QName Name;	/* required attribute */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 466; } /* = unique id SOAP_TYPE_Media_onv__ConfigDescription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__ConfigDescription(): Parameters(NULL), Messages(NULL), Extension(NULL), __anyAttribute(NULL) { onv__ConfigDescription::soap_default(NULL); }
	virtual ~onv__ConfigDescription() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__ConfigDescriptionExtension
#define SOAP_TYPE_Media_onv__ConfigDescriptionExtension (467)
/* onv:ConfigDescriptionExtension */
class SOAP_CMAC onv__ConfigDescriptionExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 467; } /* = unique id SOAP_TYPE_Media_onv__ConfigDescriptionExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__ConfigDescriptionExtension() { onv__ConfigDescriptionExtension::soap_default(NULL); }
	virtual ~onv__ConfigDescriptionExtension() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__SupportedRules
#define SOAP_TYPE_Media_onv__SupportedRules (468)
/* onv:SupportedRules */
class SOAP_CMAC onv__SupportedRules : public xsd__anyType
{
public:
	std::vector<std::string >RuleContentSchemaLocation;	/* optional element of type xsd:anyURI */
	std::vector<onv__ConfigDescription * >RuleDescription;	/* optional element of type onv:ConfigDescription */
	class onv__SupportedRulesExtension *Extension;	/* optional element of type onv:SupportedRulesExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 468; } /* = unique id SOAP_TYPE_Media_onv__SupportedRules */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__SupportedRules(): Extension(NULL), __anyAttribute(NULL) { onv__SupportedRules::soap_default(NULL); }
	virtual ~onv__SupportedRules() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__SupportedRulesExtension
#define SOAP_TYPE_Media_onv__SupportedRulesExtension (469)
/* onv:SupportedRulesExtension */
class SOAP_CMAC onv__SupportedRulesExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 469; } /* = unique id SOAP_TYPE_Media_onv__SupportedRulesExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__SupportedRulesExtension() { onv__SupportedRulesExtension::soap_default(NULL); }
	virtual ~onv__SupportedRulesExtension() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__SupportedAnalyticsModules
#define SOAP_TYPE_Media_onv__SupportedAnalyticsModules (470)
/* onv:SupportedAnalyticsModules */
class SOAP_CMAC onv__SupportedAnalyticsModules : public xsd__anyType
{
public:
	std::vector<std::string >AnalyticsModuleContentSchemaLocation;	/* optional element of type xsd:anyURI */
	std::vector<onv__ConfigDescription * >AnalyticsModuleDescription;	/* optional element of type onv:ConfigDescription */
	class onv__SupportedAnalyticsModulesExtension *Extension;	/* optional element of type onv:SupportedAnalyticsModulesExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 470; } /* = unique id SOAP_TYPE_Media_onv__SupportedAnalyticsModules */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__SupportedAnalyticsModules(): Extension(NULL), __anyAttribute(NULL) { onv__SupportedAnalyticsModules::soap_default(NULL); }
	virtual ~onv__SupportedAnalyticsModules() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__SupportedAnalyticsModulesExtension
#define SOAP_TYPE_Media_onv__SupportedAnalyticsModulesExtension (471)
/* onv:SupportedAnalyticsModulesExtension */
class SOAP_CMAC onv__SupportedAnalyticsModulesExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 471; } /* = unique id SOAP_TYPE_Media_onv__SupportedAnalyticsModulesExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__SupportedAnalyticsModulesExtension() { onv__SupportedAnalyticsModulesExtension::soap_default(NULL); }
	virtual ~onv__SupportedAnalyticsModulesExtension() { }
};
#endif

#ifndef SOAP_TYPE_Media__onv__union_MetadataStream
#define SOAP_TYPE_Media__onv__union_MetadataStream (881)
/* xsd:choice */
union _onv__union_MetadataStream
{
#define SOAP_UNION__onv__union_MetadataStream_VideoAnalytics	(1)
	class onv__VideoAnalyticsStream *VideoAnalytics;
#define SOAP_UNION__onv__union_MetadataStream_PTZ	(2)
	class onv__PTZStream *PTZ;
#define SOAP_UNION__onv__union_MetadataStream_Event	(3)
	class onv__EventStream *Event;
#define SOAP_UNION__onv__union_MetadataStream_Extension	(4)
	class onv__MetadataStreamExtension *Extension;
};
#endif

#ifndef SOAP_TYPE_Media___onv__union_MetadataStream
#define SOAP_TYPE_Media___onv__union_MetadataStream (876)
/* Operation wrapper: */
class SOAP_CMAC __onv__union_MetadataStream
{
public:
	int __union_MetadataStream;	/* union discriminant (of union defined below) */
	union _onv__union_MetadataStream union_MetadataStream;	/* required element of type xsd:choice */
public:
	virtual int soap_type() const { return 876; } /* = unique id SOAP_TYPE_Media___onv__union_MetadataStream */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         __onv__union_MetadataStream() { __onv__union_MetadataStream::soap_default(NULL); }
	virtual ~__onv__union_MetadataStream() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__MetadataStream
#define SOAP_TYPE_Media_onv__MetadataStream (472)
/* onv:MetadataStream */
class SOAP_CMAC onv__MetadataStream : public xsd__anyType
{
public:
	int __size_MetadataStream;	/* sequence of elements <-union-MetadataStream> */
	__onv__union_MetadataStream *__union_MetadataStream;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 472; } /* = unique id SOAP_TYPE_Media_onv__MetadataStream */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__MetadataStream(): __union_MetadataStream(NULL), __anyAttribute(NULL) { onv__MetadataStream::soap_default(NULL); }
	virtual ~onv__MetadataStream() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__MetadataStreamExtension
#define SOAP_TYPE_Media_onv__MetadataStreamExtension (473)
/* onv:MetadataStreamExtension */
class SOAP_CMAC onv__MetadataStreamExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 473; } /* = unique id SOAP_TYPE_Media_onv__MetadataStreamExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__MetadataStreamExtension() { onv__MetadataStreamExtension::soap_default(NULL); }
	virtual ~onv__MetadataStreamExtension() { }
};
#endif

#ifndef SOAP_TYPE_Media__onv__union_VideoAnalyticsStream
#define SOAP_TYPE_Media__onv__union_VideoAnalyticsStream (886)
/* xsd:choice */
union _onv__union_VideoAnalyticsStream
{
#define SOAP_UNION__onv__union_VideoAnalyticsStream_Frame	(1)
	onv__Frame *Frame;
#define SOAP_UNION__onv__union_VideoAnalyticsStream_Extension	(2)
	class onv__VideoAnalyticsStreamExtension *Extension;
};
#endif

#ifndef SOAP_TYPE_Media___onv__union_VideoAnalyticsStream
#define SOAP_TYPE_Media___onv__union_VideoAnalyticsStream (883)
/* Operation wrapper: */
class SOAP_CMAC __onv__union_VideoAnalyticsStream
{
public:
	int __union_VideoAnalyticsStream;	/* union discriminant (of union defined below) */
	union _onv__union_VideoAnalyticsStream union_VideoAnalyticsStream;	/* required element of type xsd:choice */
public:
	virtual int soap_type() const { return 883; } /* = unique id SOAP_TYPE_Media___onv__union_VideoAnalyticsStream */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         __onv__union_VideoAnalyticsStream() { __onv__union_VideoAnalyticsStream::soap_default(NULL); }
	virtual ~__onv__union_VideoAnalyticsStream() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__VideoAnalyticsStream
#define SOAP_TYPE_Media_onv__VideoAnalyticsStream (474)
/* onv:VideoAnalyticsStream */
class SOAP_CMAC onv__VideoAnalyticsStream : public xsd__anyType
{
public:
	int __size_VideoAnalyticsStream;	/* sequence of elements <-union-VideoAnalyticsStream> */
	__onv__union_VideoAnalyticsStream *__union_VideoAnalyticsStream;
public:
	virtual int soap_type() const { return 474; } /* = unique id SOAP_TYPE_Media_onv__VideoAnalyticsStream */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__VideoAnalyticsStream(): __union_VideoAnalyticsStream(NULL) { onv__VideoAnalyticsStream::soap_default(NULL); }
	virtual ~onv__VideoAnalyticsStream() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__VideoAnalyticsStreamExtension
#define SOAP_TYPE_Media_onv__VideoAnalyticsStreamExtension (475)
/* onv:VideoAnalyticsStreamExtension */
class SOAP_CMAC onv__VideoAnalyticsStreamExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 475; } /* = unique id SOAP_TYPE_Media_onv__VideoAnalyticsStreamExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__VideoAnalyticsStreamExtension() { onv__VideoAnalyticsStreamExtension::soap_default(NULL); }
	virtual ~onv__VideoAnalyticsStreamExtension() { }
};
#endif

#ifndef SOAP_TYPE_Media__onv__union_PTZStream
#define SOAP_TYPE_Media__onv__union_PTZStream (890)
/* xsd:choice */
union _onv__union_PTZStream
{
#define SOAP_UNION__onv__union_PTZStream_PTZStatus	(1)
	onv__PTZStatus *PTZStatus;
#define SOAP_UNION__onv__union_PTZStream_Extension	(2)
	class onv__PTZStreamExtension *Extension;
};
#endif

#ifndef SOAP_TYPE_Media___onv__union_PTZStream
#define SOAP_TYPE_Media___onv__union_PTZStream (888)
/* Operation wrapper: */
class SOAP_CMAC __onv__union_PTZStream
{
public:
	int __union_PTZStream;	/* union discriminant (of union defined below) */
	union _onv__union_PTZStream union_PTZStream;	/* required element of type xsd:choice */
public:
	virtual int soap_type() const { return 888; } /* = unique id SOAP_TYPE_Media___onv__union_PTZStream */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         __onv__union_PTZStream() { __onv__union_PTZStream::soap_default(NULL); }
	virtual ~__onv__union_PTZStream() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__PTZStream
#define SOAP_TYPE_Media_onv__PTZStream (476)
/* onv:PTZStream */
class SOAP_CMAC onv__PTZStream : public xsd__anyType
{
public:
	int __size_PTZStream;	/* sequence of elements <-union-PTZStream> */
	__onv__union_PTZStream *__union_PTZStream;
public:
	virtual int soap_type() const { return 476; } /* = unique id SOAP_TYPE_Media_onv__PTZStream */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__PTZStream(): __union_PTZStream(NULL) { onv__PTZStream::soap_default(NULL); }
	virtual ~onv__PTZStream() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__PTZStreamExtension
#define SOAP_TYPE_Media_onv__PTZStreamExtension (477)
/* onv:PTZStreamExtension */
class SOAP_CMAC onv__PTZStreamExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 477; } /* = unique id SOAP_TYPE_Media_onv__PTZStreamExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__PTZStreamExtension() { onv__PTZStreamExtension::soap_default(NULL); }
	virtual ~onv__PTZStreamExtension() { }
};
#endif

#ifndef SOAP_TYPE_Media__onv__union_EventStream
#define SOAP_TYPE_Media__onv__union_EventStream (895)
/* xsd:choice */
union _onv__union_EventStream
{
#define SOAP_UNION__onv__union_EventStream_wsnb__NotificationMessage	(1)
	class wsnb__NotificationMessageHolderType *wsnb__NotificationMessage;
#define SOAP_UNION__onv__union_EventStream_Extension	(2)
	class onv__EventStreamExtension *Extension;
};
#endif

#ifndef SOAP_TYPE_Media___onv__union_EventStream
#define SOAP_TYPE_Media___onv__union_EventStream (892)
/* Operation wrapper: */
class SOAP_CMAC __onv__union_EventStream
{
public:
	int __union_EventStream;	/* union discriminant (of union defined below) */
	union _onv__union_EventStream union_EventStream;	/* required element of type xsd:choice */
public:
	virtual int soap_type() const { return 892; } /* = unique id SOAP_TYPE_Media___onv__union_EventStream */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         __onv__union_EventStream() { __onv__union_EventStream::soap_default(NULL); }
	virtual ~__onv__union_EventStream() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__EventStream
#define SOAP_TYPE_Media_onv__EventStream (478)
/* onv:EventStream */
class SOAP_CMAC onv__EventStream : public xsd__anyType
{
public:
	int __size_EventStream;	/* sequence of elements <-union-EventStream> */
	__onv__union_EventStream *__union_EventStream;
public:
	virtual int soap_type() const { return 478; } /* = unique id SOAP_TYPE_Media_onv__EventStream */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__EventStream(): __union_EventStream(NULL) { onv__EventStream::soap_default(NULL); }
	virtual ~onv__EventStream() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__EventStreamExtension
#define SOAP_TYPE_Media_onv__EventStreamExtension (479)
/* onv:EventStreamExtension */
class SOAP_CMAC onv__EventStreamExtension : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 479; } /* = unique id SOAP_TYPE_Media_onv__EventStreamExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__EventStreamExtension() { onv__EventStreamExtension::soap_default(NULL); }
	virtual ~onv__EventStreamExtension() { }
};
#endif

#ifndef SOAP_TYPE_Media__onv__Message
#define SOAP_TYPE_Media__onv__Message (480)
/* onv:Message */
class SOAP_CMAC _onv__Message
{
public:
	onv__ItemList *Source;	/* optional element of type onv:ItemList */
	onv__ItemList *Key;	/* optional element of type onv:ItemList */
	onv__ItemList *Data;	/* optional element of type onv:ItemList */
	onv__MessageExtension *Extension;	/* optional element of type onv:MessageExtension */
	time_t UtcTime;	/* required attribute */
	enum onv__PropertyOperation *PropertyOperation;	/* optional attribute */
	char *__anyAttribute;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 480; } /* = unique id SOAP_TYPE_Media__onv__Message */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _onv__Message(): Source(NULL), Key(NULL), Data(NULL), Extension(NULL), PropertyOperation(NULL), __anyAttribute(NULL), soap(NULL) { _onv__Message::soap_default(NULL); }
	virtual ~_onv__Message() { }
};
#endif

#ifndef SOAP_TYPE_Media_wsnb__QueryExpressionType
#define SOAP_TYPE_Media_wsnb__QueryExpressionType (481)
/* wsnb:QueryExpressionType */
class SOAP_CMAC wsnb__QueryExpressionType : public xsd__anyType
{
public:
	char *__any;
	std::string Dialect;	/* required attribute */
	char *__mixed;
public:
	virtual int soap_type() const { return 481; } /* = unique id SOAP_TYPE_Media_wsnb__QueryExpressionType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnb__QueryExpressionType(): __any(NULL), __mixed(NULL) { wsnb__QueryExpressionType::soap_default(NULL); }
	virtual ~wsnb__QueryExpressionType() { }
};
#endif

#ifndef SOAP_TYPE_Media_wsnb__TopicExpressionType
#define SOAP_TYPE_Media_wsnb__TopicExpressionType (482)
/* wsnb:TopicExpressionType */
class SOAP_CMAC wsnb__TopicExpressionType : public xsd__anyType
{
public:
	char *__any;
	std::string Dialect;	/* required attribute */
	char *__anyAttribute;	/* optional attribute */
	char *__mixed;
public:
	virtual int soap_type() const { return 482; } /* = unique id SOAP_TYPE_Media_wsnb__TopicExpressionType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnb__TopicExpressionType(): __any(NULL), __anyAttribute(NULL), __mixed(NULL) { wsnb__TopicExpressionType::soap_default(NULL); }
	virtual ~wsnb__TopicExpressionType() { }
};
#endif

#ifndef SOAP_TYPE_Media_wsnb__FilterType
#define SOAP_TYPE_Media_wsnb__FilterType (483)
/* wsnb:FilterType */
class SOAP_CMAC wsnb__FilterType : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 483; } /* = unique id SOAP_TYPE_Media_wsnb__FilterType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnb__FilterType() { wsnb__FilterType::soap_default(NULL); }
	virtual ~wsnb__FilterType() { }
};
#endif

#ifndef SOAP_TYPE_Media_wsnb__SubscriptionPolicyType
#define SOAP_TYPE_Media_wsnb__SubscriptionPolicyType (484)
/* wsnb:SubscriptionPolicyType */
class SOAP_CMAC wsnb__SubscriptionPolicyType : public xsd__anyType
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 484; } /* = unique id SOAP_TYPE_Media_wsnb__SubscriptionPolicyType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnb__SubscriptionPolicyType() { wsnb__SubscriptionPolicyType::soap_default(NULL); }
	virtual ~wsnb__SubscriptionPolicyType() { }
};
#endif

#ifndef SOAP_TYPE_Media__wsnb__NotificationMessageHolderType_Message
#define SOAP_TYPE_Media__wsnb__NotificationMessageHolderType_Message (901)
/* wsnb:NotificationMessageHolderType-Message */
class SOAP_CMAC _wsnb__NotificationMessageHolderType_Message
{
public:
	char *__any;
public:
	virtual int soap_type() const { return 901; } /* = unique id SOAP_TYPE_Media__wsnb__NotificationMessageHolderType_Message */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnb__NotificationMessageHolderType_Message(): __any(NULL) { _wsnb__NotificationMessageHolderType_Message::soap_default(NULL); }
	virtual ~_wsnb__NotificationMessageHolderType_Message() { }
};
#endif

#ifndef SOAP_TYPE_Media_wsnb__NotificationMessageHolderType
#define SOAP_TYPE_Media_wsnb__NotificationMessageHolderType (485)
/* wsnb:NotificationMessageHolderType */
class SOAP_CMAC wsnb__NotificationMessageHolderType : public xsd__anyType
{
public:
	struct wsa5__EndpointReferenceType *SubscriptionReference;	/* optional element of type wsa5:EndpointReferenceType */
	wsnb__TopicExpressionType *Topic;	/* optional element of type wsnb:TopicExpressionType */
	struct wsa5__EndpointReferenceType *ProducerReference;	/* optional element of type wsa5:EndpointReferenceType */
	_wsnb__NotificationMessageHolderType_Message Message;	/* required element of type wsnb:NotificationMessageHolderType-Message */
public:
	virtual int soap_type() const { return 485; } /* = unique id SOAP_TYPE_Media_wsnb__NotificationMessageHolderType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnb__NotificationMessageHolderType(): SubscriptionReference(NULL), Topic(NULL), ProducerReference(NULL) { wsnb__NotificationMessageHolderType::soap_default(NULL); }
	virtual ~wsnb__NotificationMessageHolderType() { }
};
#endif

#ifndef SOAP_TYPE_Media__wsnb__NotificationProducerRP
#define SOAP_TYPE_Media__wsnb__NotificationProducerRP (506)
/* wsnb:NotificationProducerRP */
class SOAP_CMAC _wsnb__NotificationProducerRP
{
public:
	std::vector<wsnb__TopicExpressionType * >TopicExpression;	/* optional element of type wsnb:TopicExpressionType */
	bool *FixedTopicSet;	/* optional element of type xsd:boolean */
	std::vector<std::string >TopicExpressionDialect;	/* optional element of type xsd:anyURI */
	class wstop__TopicSetType *wstop__TopicSet;	/* optional element of type wstop:TopicSetType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 506; } /* = unique id SOAP_TYPE_Media__wsnb__NotificationProducerRP */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnb__NotificationProducerRP(): FixedTopicSet(NULL), wstop__TopicSet(NULL), soap(NULL) { _wsnb__NotificationProducerRP::soap_default(NULL); }
	virtual ~_wsnb__NotificationProducerRP() { }
};
#endif

#ifndef SOAP_TYPE_Media__wsnb__SubscriptionManagerRP
#define SOAP_TYPE_Media__wsnb__SubscriptionManagerRP (507)
/* wsnb:SubscriptionManagerRP */
class SOAP_CMAC _wsnb__SubscriptionManagerRP
{
public:
	struct wsa5__EndpointReferenceType ConsumerReference;	/* required element of type wsa5:EndpointReferenceType */
	wsnb__FilterType *Filter;	/* optional element of type wsnb:FilterType */
	wsnb__SubscriptionPolicyType *SubscriptionPolicy;	/* optional element of type wsnb:SubscriptionPolicyType */
	time_t *CreationTime;	/* optional element of type xsd:dateTime */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 507; } /* = unique id SOAP_TYPE_Media__wsnb__SubscriptionManagerRP */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnb__SubscriptionManagerRP(): Filter(NULL), SubscriptionPolicy(NULL), CreationTime(NULL), soap(NULL) { _wsnb__SubscriptionManagerRP::soap_default(NULL); }
	virtual ~_wsnb__SubscriptionManagerRP() { }
};
#endif

#ifndef SOAP_TYPE_Media__wsnb__Notify
#define SOAP_TYPE_Media__wsnb__Notify (508)
/* wsnb:Notify */
class SOAP_CMAC _wsnb__Notify
{
public:
	std::vector<wsnb__NotificationMessageHolderType * >NotificationMessage;	/* required element of type wsnb:NotificationMessageHolderType */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 508; } /* = unique id SOAP_TYPE_Media__wsnb__Notify */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnb__Notify(): soap(NULL) { _wsnb__Notify::soap_default(NULL); }
	virtual ~_wsnb__Notify() { }
};
#endif

#ifndef SOAP_TYPE_Media__wsnb__UseRaw
#define SOAP_TYPE_Media__wsnb__UseRaw (509)
/* wsnb:UseRaw */
class SOAP_CMAC _wsnb__UseRaw
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 509; } /* = unique id SOAP_TYPE_Media__wsnb__UseRaw */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnb__UseRaw(): soap(NULL) { _wsnb__UseRaw::soap_default(NULL); }
	virtual ~_wsnb__UseRaw() { }
};
#endif

#ifndef SOAP_TYPE_Media__wsnb__Subscribe_SubscriptionPolicy
#define SOAP_TYPE_Media__wsnb__Subscribe_SubscriptionPolicy (908)
/* wsnb:Subscribe-SubscriptionPolicy */
class SOAP_CMAC _wsnb__Subscribe_SubscriptionPolicy
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 908; } /* = unique id SOAP_TYPE_Media__wsnb__Subscribe_SubscriptionPolicy */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnb__Subscribe_SubscriptionPolicy() { _wsnb__Subscribe_SubscriptionPolicy::soap_default(NULL); }
	virtual ~_wsnb__Subscribe_SubscriptionPolicy() { }
};
#endif

#ifndef SOAP_TYPE_Media__wsnb__Subscribe
#define SOAP_TYPE_Media__wsnb__Subscribe (510)
/* wsnb:Subscribe */
class SOAP_CMAC _wsnb__Subscribe
{
public:
	struct wsa5__EndpointReferenceType ConsumerReference;	/* required element of type wsa5:EndpointReferenceType */
	wsnb__FilterType *Filter;	/* optional element of type wsnb:FilterType */
	std::string *InitialTerminationTime;	/* optional element of type wsnb:AbsoluteOrRelativeTimeType */
	_wsnb__Subscribe_SubscriptionPolicy *SubscriptionPolicy;	/* optional element of type wsnb:Subscribe-SubscriptionPolicy */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 510; } /* = unique id SOAP_TYPE_Media__wsnb__Subscribe */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnb__Subscribe(): Filter(NULL), InitialTerminationTime(NULL), SubscriptionPolicy(NULL), soap(NULL) { _wsnb__Subscribe::soap_default(NULL); }
	virtual ~_wsnb__Subscribe() { }
};
#endif

#ifndef SOAP_TYPE_Media__wsnb__SubscribeResponse
#define SOAP_TYPE_Media__wsnb__SubscribeResponse (511)
/* wsnb:SubscribeResponse */
class SOAP_CMAC _wsnb__SubscribeResponse
{
public:
	struct wsa5__EndpointReferenceType SubscriptionReference;	/* required element of type wsa5:EndpointReferenceType */
	time_t *CurrentTime;	/* optional element of type xsd:dateTime */
	time_t *TerminationTime;	/* optional element of type xsd:dateTime */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 511; } /* = unique id SOAP_TYPE_Media__wsnb__SubscribeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnb__SubscribeResponse(): CurrentTime(NULL), TerminationTime(NULL), soap(NULL) { _wsnb__SubscribeResponse::soap_default(NULL); }
	virtual ~_wsnb__SubscribeResponse() { }
};
#endif

#ifndef SOAP_TYPE_Media__wsnb__GetCurrentMessage
#define SOAP_TYPE_Media__wsnb__GetCurrentMessage (512)
/* wsnb:GetCurrentMessage */
class SOAP_CMAC _wsnb__GetCurrentMessage
{
public:
	wsnb__TopicExpressionType *Topic;	/* required element of type wsnb:TopicExpressionType */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 512; } /* = unique id SOAP_TYPE_Media__wsnb__GetCurrentMessage */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnb__GetCurrentMessage(): Topic(NULL), soap(NULL) { _wsnb__GetCurrentMessage::soap_default(NULL); }
	virtual ~_wsnb__GetCurrentMessage() { }
};
#endif

#ifndef SOAP_TYPE_Media__wsnb__GetCurrentMessageResponse
#define SOAP_TYPE_Media__wsnb__GetCurrentMessageResponse (513)
/* wsnb:GetCurrentMessageResponse */
class SOAP_CMAC _wsnb__GetCurrentMessageResponse
{
public:
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 513; } /* = unique id SOAP_TYPE_Media__wsnb__GetCurrentMessageResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnb__GetCurrentMessageResponse(): soap(NULL) { _wsnb__GetCurrentMessageResponse::soap_default(NULL); }
	virtual ~_wsnb__GetCurrentMessageResponse() { }
};
#endif

#ifndef SOAP_TYPE_Media__wsnb__GetMessages
#define SOAP_TYPE_Media__wsnb__GetMessages (514)
/* wsnb:GetMessages */
class SOAP_CMAC _wsnb__GetMessages
{
public:
	std::string *MaximumNumber;	/* optional element of type xsd:nonNegativeInteger */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 514; } /* = unique id SOAP_TYPE_Media__wsnb__GetMessages */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnb__GetMessages(): MaximumNumber(NULL), __anyAttribute(NULL), soap(NULL) { _wsnb__GetMessages::soap_default(NULL); }
	virtual ~_wsnb__GetMessages() { }
};
#endif

#ifndef SOAP_TYPE_Media__wsnb__GetMessagesResponse
#define SOAP_TYPE_Media__wsnb__GetMessagesResponse (515)
/* wsnb:GetMessagesResponse */
class SOAP_CMAC _wsnb__GetMessagesResponse
{
public:
	std::vector<wsnb__NotificationMessageHolderType * >NotificationMessage;	/* optional element of type wsnb:NotificationMessageHolderType */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 515; } /* = unique id SOAP_TYPE_Media__wsnb__GetMessagesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnb__GetMessagesResponse(): __anyAttribute(NULL), soap(NULL) { _wsnb__GetMessagesResponse::soap_default(NULL); }
	virtual ~_wsnb__GetMessagesResponse() { }
};
#endif

#ifndef SOAP_TYPE_Media__wsnb__DestroyPullPoint
#define SOAP_TYPE_Media__wsnb__DestroyPullPoint (516)
/* wsnb:DestroyPullPoint */
class SOAP_CMAC _wsnb__DestroyPullPoint
{
public:
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 516; } /* = unique id SOAP_TYPE_Media__wsnb__DestroyPullPoint */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnb__DestroyPullPoint(): __anyAttribute(NULL), soap(NULL) { _wsnb__DestroyPullPoint::soap_default(NULL); }
	virtual ~_wsnb__DestroyPullPoint() { }
};
#endif

#ifndef SOAP_TYPE_Media__wsnb__DestroyPullPointResponse
#define SOAP_TYPE_Media__wsnb__DestroyPullPointResponse (517)
/* wsnb:DestroyPullPointResponse */
class SOAP_CMAC _wsnb__DestroyPullPointResponse
{
public:
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 517; } /* = unique id SOAP_TYPE_Media__wsnb__DestroyPullPointResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnb__DestroyPullPointResponse(): __anyAttribute(NULL), soap(NULL) { _wsnb__DestroyPullPointResponse::soap_default(NULL); }
	virtual ~_wsnb__DestroyPullPointResponse() { }
};
#endif

#ifndef SOAP_TYPE_Media__wsnb__CreatePullPoint
#define SOAP_TYPE_Media__wsnb__CreatePullPoint (518)
/* wsnb:CreatePullPoint */
class SOAP_CMAC _wsnb__CreatePullPoint
{
public:
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 518; } /* = unique id SOAP_TYPE_Media__wsnb__CreatePullPoint */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnb__CreatePullPoint(): __anyAttribute(NULL), soap(NULL) { _wsnb__CreatePullPoint::soap_default(NULL); }
	virtual ~_wsnb__CreatePullPoint() { }
};
#endif

#ifndef SOAP_TYPE_Media__wsnb__CreatePullPointResponse
#define SOAP_TYPE_Media__wsnb__CreatePullPointResponse (519)
/* wsnb:CreatePullPointResponse */
class SOAP_CMAC _wsnb__CreatePullPointResponse
{
public:
	struct wsa5__EndpointReferenceType PullPoint;	/* required element of type wsa5:EndpointReferenceType */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 519; } /* = unique id SOAP_TYPE_Media__wsnb__CreatePullPointResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnb__CreatePullPointResponse(): __anyAttribute(NULL), soap(NULL) { _wsnb__CreatePullPointResponse::soap_default(NULL); }
	virtual ~_wsnb__CreatePullPointResponse() { }
};
#endif

#ifndef SOAP_TYPE_Media__wsnb__Renew
#define SOAP_TYPE_Media__wsnb__Renew (520)
/* wsnb:Renew */
class SOAP_CMAC _wsnb__Renew
{
public:
	std::string *TerminationTime;	/* required element of type wsnb:AbsoluteOrRelativeTimeType */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 520; } /* = unique id SOAP_TYPE_Media__wsnb__Renew */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnb__Renew(): TerminationTime(NULL), soap(NULL) { _wsnb__Renew::soap_default(NULL); }
	virtual ~_wsnb__Renew() { }
};
#endif

#ifndef SOAP_TYPE_Media__wsnb__RenewResponse
#define SOAP_TYPE_Media__wsnb__RenewResponse (521)
/* wsnb:RenewResponse */
class SOAP_CMAC _wsnb__RenewResponse
{
public:
	time_t TerminationTime;	/* required element of type xsd:dateTime */
	time_t *CurrentTime;	/* optional element of type xsd:dateTime */
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 521; } /* = unique id SOAP_TYPE_Media__wsnb__RenewResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnb__RenewResponse(): CurrentTime(NULL), soap(NULL) { _wsnb__RenewResponse::soap_default(NULL); }
	virtual ~_wsnb__RenewResponse() { }
};
#endif

#ifndef SOAP_TYPE_Media__wsnb__Unsubscribe
#define SOAP_TYPE_Media__wsnb__Unsubscribe (522)
/* wsnb:Unsubscribe */
class SOAP_CMAC _wsnb__Unsubscribe
{
public:
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 522; } /* = unique id SOAP_TYPE_Media__wsnb__Unsubscribe */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnb__Unsubscribe(): soap(NULL) { _wsnb__Unsubscribe::soap_default(NULL); }
	virtual ~_wsnb__Unsubscribe() { }
};
#endif

#ifndef SOAP_TYPE_Media__wsnb__UnsubscribeResponse
#define SOAP_TYPE_Media__wsnb__UnsubscribeResponse (523)
/* wsnb:UnsubscribeResponse */
class SOAP_CMAC _wsnb__UnsubscribeResponse
{
public:
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 523; } /* = unique id SOAP_TYPE_Media__wsnb__UnsubscribeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnb__UnsubscribeResponse(): soap(NULL) { _wsnb__UnsubscribeResponse::soap_default(NULL); }
	virtual ~_wsnb__UnsubscribeResponse() { }
};
#endif

#ifndef SOAP_TYPE_Media__wsnb__PauseSubscription
#define SOAP_TYPE_Media__wsnb__PauseSubscription (524)
/* wsnb:PauseSubscription */
class SOAP_CMAC _wsnb__PauseSubscription
{
public:
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 524; } /* = unique id SOAP_TYPE_Media__wsnb__PauseSubscription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnb__PauseSubscription(): soap(NULL) { _wsnb__PauseSubscription::soap_default(NULL); }
	virtual ~_wsnb__PauseSubscription() { }
};
#endif

#ifndef SOAP_TYPE_Media__wsnb__PauseSubscriptionResponse
#define SOAP_TYPE_Media__wsnb__PauseSubscriptionResponse (525)
/* wsnb:PauseSubscriptionResponse */
class SOAP_CMAC _wsnb__PauseSubscriptionResponse
{
public:
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 525; } /* = unique id SOAP_TYPE_Media__wsnb__PauseSubscriptionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnb__PauseSubscriptionResponse(): soap(NULL) { _wsnb__PauseSubscriptionResponse::soap_default(NULL); }
	virtual ~_wsnb__PauseSubscriptionResponse() { }
};
#endif

#ifndef SOAP_TYPE_Media__wsnb__ResumeSubscription
#define SOAP_TYPE_Media__wsnb__ResumeSubscription (526)
/* wsnb:ResumeSubscription */
class SOAP_CMAC _wsnb__ResumeSubscription
{
public:
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 526; } /* = unique id SOAP_TYPE_Media__wsnb__ResumeSubscription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnb__ResumeSubscription(): soap(NULL) { _wsnb__ResumeSubscription::soap_default(NULL); }
	virtual ~_wsnb__ResumeSubscription() { }
};
#endif

#ifndef SOAP_TYPE_Media__wsnb__ResumeSubscriptionResponse
#define SOAP_TYPE_Media__wsnb__ResumeSubscriptionResponse (527)
/* wsnb:ResumeSubscriptionResponse */
class SOAP_CMAC _wsnb__ResumeSubscriptionResponse
{
public:
	std::vector<char * >__any;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 527; } /* = unique id SOAP_TYPE_Media__wsnb__ResumeSubscriptionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnb__ResumeSubscriptionResponse(): soap(NULL) { _wsnb__ResumeSubscriptionResponse::soap_default(NULL); }
	virtual ~_wsnb__ResumeSubscriptionResponse() { }
};
#endif

#ifndef SOAP_TYPE_Media__wsrfbf__BaseFaultType_ErrorCode
#define SOAP_TYPE_Media__wsrfbf__BaseFaultType_ErrorCode (911)
/* wsrfbf:BaseFaultType-ErrorCode */
class SOAP_CMAC _wsrfbf__BaseFaultType_ErrorCode
{
public:
	std::string dialect;	/* required attribute */
public:
	virtual int soap_type() const { return 911; } /* = unique id SOAP_TYPE_Media__wsrfbf__BaseFaultType_ErrorCode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsrfbf__BaseFaultType_ErrorCode() { _wsrfbf__BaseFaultType_ErrorCode::soap_default(NULL); }
	virtual ~_wsrfbf__BaseFaultType_ErrorCode() { }
};
#endif

#ifndef SOAP_TYPE_Media__wsrfbf__BaseFaultType_Description
#define SOAP_TYPE_Media__wsrfbf__BaseFaultType_Description (913)
/* Primitive wsrfbf:BaseFaultType-Description schema type: */
class SOAP_CMAC _wsrfbf__BaseFaultType_Description
{
public:
	std::string __item;
	std::string *xml__lang;	/* optional attribute */
public:
	virtual int soap_type() const { return 913; } /* = unique id SOAP_TYPE_Media__wsrfbf__BaseFaultType_Description */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsrfbf__BaseFaultType_Description(): xml__lang(NULL) { _wsrfbf__BaseFaultType_Description::soap_default(NULL); }
	virtual ~_wsrfbf__BaseFaultType_Description() { }
};
#endif

#ifndef SOAP_TYPE_Media__wsrfbf__BaseFaultType_FaultCause
#define SOAP_TYPE_Media__wsrfbf__BaseFaultType_FaultCause (916)
/* wsrfbf:BaseFaultType-FaultCause */
class SOAP_CMAC _wsrfbf__BaseFaultType_FaultCause
{
public:
	char *__any;
public:
	virtual int soap_type() const { return 916; } /* = unique id SOAP_TYPE_Media__wsrfbf__BaseFaultType_FaultCause */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsrfbf__BaseFaultType_FaultCause(): __any(NULL) { _wsrfbf__BaseFaultType_FaultCause::soap_default(NULL); }
	virtual ~_wsrfbf__BaseFaultType_FaultCause() { }
};
#endif

#ifndef SOAP_TYPE_Media_wsrfbf__BaseFaultType
#define SOAP_TYPE_Media_wsrfbf__BaseFaultType (528)
/* wsrfbf:BaseFaultType */
class SOAP_CMAC wsrfbf__BaseFaultType : public xsd__anyType
{
public:
	std::vector<char * >__any;
	time_t Timestamp;	/* required element of type xsd:dateTime */
	struct wsa5__EndpointReferenceType *Originator;	/* optional element of type wsa5:EndpointReferenceType */
	_wsrfbf__BaseFaultType_ErrorCode *ErrorCode;	/* optional element of type wsrfbf:BaseFaultType-ErrorCode */
	int __sizeDescription;	/* sequence of elements <Description> */
	_wsrfbf__BaseFaultType_Description *Description;	/* optional element of type wsrfbf:BaseFaultType-Description */
	_wsrfbf__BaseFaultType_FaultCause *FaultCause;	/* optional element of type wsrfbf:BaseFaultType-FaultCause */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 528; } /* = unique id SOAP_TYPE_Media_wsrfbf__BaseFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsrfbf__BaseFaultType(): Originator(NULL), ErrorCode(NULL), Description(NULL), FaultCause(NULL), __anyAttribute(NULL) { wsrfbf__BaseFaultType::soap_default(NULL); }
	virtual ~wsrfbf__BaseFaultType() { }
};
#endif

#ifndef SOAP_TYPE_Media_wstop__Documentation
#define SOAP_TYPE_Media_wstop__Documentation (529)
/* wstop:Documentation */
class SOAP_CMAC wstop__Documentation : public xsd__anyType
{
public:
	std::vector<char * >__any;
	char *__mixed;
public:
	virtual int soap_type() const { return 529; } /* = unique id SOAP_TYPE_Media_wstop__Documentation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wstop__Documentation(): __mixed(NULL) { wstop__Documentation::soap_default(NULL); }
	virtual ~wstop__Documentation() { }
};
#endif

#ifndef SOAP_TYPE_Media_wstop__ExtensibleDocumented
#define SOAP_TYPE_Media_wstop__ExtensibleDocumented (530)
/* wstop:ExtensibleDocumented */
class SOAP_CMAC wstop__ExtensibleDocumented : public xsd__anyType
{
public:
	wstop__Documentation *documentation;	/* optional element of type wstop:Documentation */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 530; } /* = unique id SOAP_TYPE_Media_wstop__ExtensibleDocumented */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wstop__ExtensibleDocumented(): documentation(NULL), __anyAttribute(NULL) { wstop__ExtensibleDocumented::soap_default(NULL); }
	virtual ~wstop__ExtensibleDocumented() { }
};
#endif

#ifndef SOAP_TYPE_Media_wstop__QueryExpressionType
#define SOAP_TYPE_Media_wstop__QueryExpressionType (531)
/* wstop:QueryExpressionType */
class SOAP_CMAC wstop__QueryExpressionType : public xsd__anyType
{
public:
	char *__any;
	std::string Dialect;	/* required attribute */
	char *__mixed;
public:
	virtual int soap_type() const { return 531; } /* = unique id SOAP_TYPE_Media_wstop__QueryExpressionType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wstop__QueryExpressionType(): __any(NULL), __mixed(NULL) { wstop__QueryExpressionType::soap_default(NULL); }
	virtual ~wstop__QueryExpressionType() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__VideoSource
#define SOAP_TYPE_Media_onv__VideoSource (249)
/* onv:VideoSource */
class SOAP_CMAC onv__VideoSource : public onv__DeviceEntity
{
public:
	float Framerate;	/* required element of type xsd:float */
	onv__VideoResolution *Resolution;	/* required element of type onv:VideoResolution */
	onv__ImagingSettings *Imaging;	/* optional element of type onv:ImagingSettings */
	onv__VideoSourceExtension *Extension;	/* optional element of type onv:VideoSourceExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 249; } /* = unique id SOAP_TYPE_Media_onv__VideoSource */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__VideoSource(): Resolution(NULL), Imaging(NULL), Extension(NULL), __anyAttribute(NULL) { onv__VideoSource::soap_default(NULL); }
	virtual ~onv__VideoSource() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__AudioSource
#define SOAP_TYPE_Media_onv__AudioSource (251)
/* onv:AudioSource */
class SOAP_CMAC onv__AudioSource : public onv__DeviceEntity
{
public:
	int Channels;	/* required element of type xsd:int */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 251; } /* = unique id SOAP_TYPE_Media_onv__AudioSource */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__AudioSource(): __anyAttribute(NULL) { onv__AudioSource::soap_default(NULL); }
	virtual ~onv__AudioSource() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__VideoSourceConfiguration
#define SOAP_TYPE_Media_onv__VideoSourceConfiguration (255)
/* onv:VideoSourceConfiguration */
class SOAP_CMAC onv__VideoSourceConfiguration : public onv__ConfigurationEntity
{
public:
	std::string SourceToken;	/* required element of type onv:ReferenceToken */
	onv__IntRectangle *Bounds;	/* required element of type onv:IntRectangle */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 255; } /* = unique id SOAP_TYPE_Media_onv__VideoSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__VideoSourceConfiguration(): Bounds(NULL), __anyAttribute(NULL) { onv__VideoSourceConfiguration::soap_default(NULL); }
	virtual ~onv__VideoSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__VideoEncoderConfiguration
#define SOAP_TYPE_Media_onv__VideoEncoderConfiguration (258)
/* onv:VideoEncoderConfiguration */
class SOAP_CMAC onv__VideoEncoderConfiguration : public onv__ConfigurationEntity
{
public:
	enum onv__VideoEncoding Encoding;	/* required element of type onv:VideoEncoding */
	onv__VideoResolution *Resolution;	/* required element of type onv:VideoResolution */
	float Quality;	/* required element of type xsd:float */
	onv__VideoRateControl *RateControl;	/* optional element of type onv:VideoRateControl */
	onv__Mpeg4Configuration *MPEG4;	/* optional element of type onv:Mpeg4Configuration */
	onv__H264Configuration *H264;	/* optional element of type onv:H264Configuration */
	onv__MulticastConfiguration *Multicast;	/* required element of type onv:MulticastConfiguration */
	LONG64 SessionTimeout;	/* external */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 258; } /* = unique id SOAP_TYPE_Media_onv__VideoEncoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__VideoEncoderConfiguration(): Resolution(NULL), RateControl(NULL), MPEG4(NULL), H264(NULL), Multicast(NULL), __anyAttribute(NULL) { onv__VideoEncoderConfiguration::soap_default(NULL); }
	virtual ~onv__VideoEncoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__AudioSourceConfiguration
#define SOAP_TYPE_Media_onv__AudioSourceConfiguration (268)
/* onv:AudioSourceConfiguration */
class SOAP_CMAC onv__AudioSourceConfiguration : public onv__ConfigurationEntity
{
public:
	std::string SourceToken;	/* required element of type onv:ReferenceToken */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 268; } /* = unique id SOAP_TYPE_Media_onv__AudioSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__AudioSourceConfiguration(): __anyAttribute(NULL) { onv__AudioSourceConfiguration::soap_default(NULL); }
	virtual ~onv__AudioSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__AudioEncoderConfiguration
#define SOAP_TYPE_Media_onv__AudioEncoderConfiguration (271)
/* onv:AudioEncoderConfiguration */
class SOAP_CMAC onv__AudioEncoderConfiguration : public onv__ConfigurationEntity
{
public:
	enum onv__AudioEncoding Encoding;	/* required element of type onv:AudioEncoding */
	int Bitrate;	/* required element of type xsd:int */
	int SampleRate;	/* required element of type xsd:int */
	onv__MulticastConfiguration *Multicast;	/* required element of type onv:MulticastConfiguration */
	LONG64 SessionTimeout;	/* external */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 271; } /* = unique id SOAP_TYPE_Media_onv__AudioEncoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__AudioEncoderConfiguration(): Multicast(NULL), __anyAttribute(NULL) { onv__AudioEncoderConfiguration::soap_default(NULL); }
	virtual ~onv__AudioEncoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__VideoAnalyticsConfiguration
#define SOAP_TYPE_Media_onv__VideoAnalyticsConfiguration (274)
/* onv:VideoAnalyticsConfiguration */
class SOAP_CMAC onv__VideoAnalyticsConfiguration : public onv__ConfigurationEntity
{
public:
	onv__AnalyticsEngineConfiguration *AnalyticsEngineConfiguration;	/* required element of type onv:AnalyticsEngineConfiguration */
	onv__RuleEngineConfiguration *RuleEngineConfiguration;	/* required element of type onv:RuleEngineConfiguration */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 274; } /* = unique id SOAP_TYPE_Media_onv__VideoAnalyticsConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__VideoAnalyticsConfiguration(): AnalyticsEngineConfiguration(NULL), RuleEngineConfiguration(NULL), __anyAttribute(NULL) { onv__VideoAnalyticsConfiguration::soap_default(NULL); }
	virtual ~onv__VideoAnalyticsConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__MetadataConfiguration
#define SOAP_TYPE_Media_onv__MetadataConfiguration (275)
/* onv:MetadataConfiguration */
class SOAP_CMAC onv__MetadataConfiguration : public onv__ConfigurationEntity
{
public:
	onv__PTZFilter *PTZStatus;	/* optional element of type onv:PTZFilter */
	onv__EventSubscription *Events;	/* optional element of type onv:EventSubscription */
	bool *Analytics;	/* optional element of type xsd:boolean */
	onv__MulticastConfiguration *Multicast;	/* required element of type onv:MulticastConfiguration */
	LONG64 SessionTimeout;	/* external */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 275; } /* = unique id SOAP_TYPE_Media_onv__MetadataConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__MetadataConfiguration(): PTZStatus(NULL), Events(NULL), Analytics(NULL), Multicast(NULL), __anyAttribute(NULL) { onv__MetadataConfiguration::soap_default(NULL); }
	virtual ~onv__MetadataConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__NetworkInterface
#define SOAP_TYPE_Media_onv__NetworkInterface (285)
/* onv:NetworkInterface */
class SOAP_CMAC onv__NetworkInterface : public onv__DeviceEntity
{
public:
	bool Enabled;	/* required element of type xsd:boolean */
	onv__NetworkInterfaceInfo *Info;	/* optional element of type onv:NetworkInterfaceInfo */
	onv__NetworkInterfaceLink *Link;	/* optional element of type onv:NetworkInterfaceLink */
	onv__IPv4NetworkInterface *IPv4;	/* optional element of type onv:IPv4NetworkInterface */
	onv__IPv6NetworkInterface *IPv6;	/* optional element of type onv:IPv6NetworkInterface */
	onv__NetworkInterfaceExtension *Extension;	/* optional element of type onv:NetworkInterfaceExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 285; } /* = unique id SOAP_TYPE_Media_onv__NetworkInterface */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__NetworkInterface(): Info(NULL), Link(NULL), IPv4(NULL), IPv6(NULL), Extension(NULL), __anyAttribute(NULL) { onv__NetworkInterface::soap_default(NULL); }
	virtual ~onv__NetworkInterface() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__RelayOutput
#define SOAP_TYPE_Media_onv__RelayOutput (360)
/* onv:RelayOutput */
class SOAP_CMAC onv__RelayOutput : public onv__DeviceEntity
{
public:
	onv__RelayOutputSettings *Properties;	/* required element of type onv:RelayOutputSettings */
	std::vector<char * >__any;
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 360; } /* = unique id SOAP_TYPE_Media_onv__RelayOutput */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__RelayOutput(): Properties(NULL), __anyAttribute(NULL) { onv__RelayOutput::soap_default(NULL); }
	virtual ~onv__RelayOutput() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__PTZNode
#define SOAP_TYPE_Media_onv__PTZNode (361)
/* onv:PTZNode */
class SOAP_CMAC onv__PTZNode : public onv__DeviceEntity
{
public:
	std::string *Name;	/* optional element of type onv:Name */
	onv__PTZSpaces *SupportedPTZSpaces;	/* required element of type onv:PTZSpaces */
	int MaximumNumberOfPresets;	/* required element of type xsd:int */
	bool HomeSupported;	/* required element of type xsd:boolean */
	std::vector<std::string >AuxiliaryCommands;	/* optional element of type onv:AuxiliaryData */
	onv__PTZNodeExtension *Extension;	/* optional element of type onv:PTZNodeExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 361; } /* = unique id SOAP_TYPE_Media_onv__PTZNode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__PTZNode(): Name(NULL), SupportedPTZSpaces(NULL), Extension(NULL), __anyAttribute(NULL) { onv__PTZNode::soap_default(NULL); }
	virtual ~onv__PTZNode() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__PTZConfiguration
#define SOAP_TYPE_Media_onv__PTZConfiguration (363)
/* onv:PTZConfiguration */
class SOAP_CMAC onv__PTZConfiguration : public onv__ConfigurationEntity
{
public:
	std::string NodeToken;	/* required element of type onv:ReferenceToken */
	std::string *DefaultAbsolutePantTiltPositionSpace;	/* optional element of type xsd:anyURI */
	std::string *DefaultAbsoluteZoomPositionSpace;	/* optional element of type xsd:anyURI */
	std::string *DefaultRelativePanTiltTranslationSpace;	/* optional element of type xsd:anyURI */
	std::string *DefaultRelativeZoomTranslationSpace;	/* optional element of type xsd:anyURI */
	std::string *DefaultContinuousPanTiltVelocitySpace;	/* optional element of type xsd:anyURI */
	std::string *DefaultContinuousZoomVelocitySpace;	/* optional element of type xsd:anyURI */
	onv__PTZSpeed *DefaultPTZSpeed;	/* optional element of type onv:PTZSpeed */
	LONG64 *DefaultPTZTimeout;	/* optional element of type xsd:duration */
	onv__PanTiltLimits *PanTiltLimits;	/* optional element of type onv:PanTiltLimits */
	onv__ZoomLimits *ZoomLimits;	/* optional element of type onv:ZoomLimits */
	onv__PTZConfigurationExtension *Extension;	/* optional element of type onv:PTZConfigurationExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 363; } /* = unique id SOAP_TYPE_Media_onv__PTZConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__PTZConfiguration(): DefaultAbsolutePantTiltPositionSpace(NULL), DefaultAbsoluteZoomPositionSpace(NULL), DefaultRelativePanTiltTranslationSpace(NULL), DefaultRelativeZoomTranslationSpace(NULL), DefaultContinuousPanTiltVelocitySpace(NULL), DefaultContinuousZoomVelocitySpace(NULL), DefaultPTZSpeed(NULL), DefaultPTZTimeout(NULL), PanTiltLimits(NULL), ZoomLimits(NULL), Extension(NULL), __anyAttribute(NULL) { onv__PTZConfiguration::soap_default(NULL); }
	virtual ~onv__PTZConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_Media_onv__Object
#define SOAP_TYPE_Media_onv__Object (447)
/* onv:Object */
class SOAP_CMAC onv__Object : public onv__ObjectId
{
public:
	onv__Appearance *Appearance;	/* optional element of type onv:Appearance */
	onv__Behaviour *Behaviour;	/* optional element of type onv:Behaviour */
	onv__ObjectExtension *Extension;	/* optional element of type onv:ObjectExtension */
	char *__anyAttribute;	/* optional attribute */
public:
	virtual int soap_type() const { return 447; } /* = unique id SOAP_TYPE_Media_onv__Object */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         onv__Object(): Appearance(NULL), Behaviour(NULL), Extension(NULL), __anyAttribute(NULL) { onv__Object::soap_default(NULL); }
	virtual ~onv__Object() { }
};
#endif

#ifndef SOAP_TYPE_Media_wsnb__SubscribeCreationFailedFaultType
#define SOAP_TYPE_Media_wsnb__SubscribeCreationFailedFaultType (486)
/* wsnb:SubscribeCreationFailedFaultType */
class SOAP_CMAC wsnb__SubscribeCreationFailedFaultType : public wsrfbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 486; } /* = unique id SOAP_TYPE_Media_wsnb__SubscribeCreationFailedFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnb__SubscribeCreationFailedFaultType() { wsnb__SubscribeCreationFailedFaultType::soap_default(NULL); }
	virtual ~wsnb__SubscribeCreationFailedFaultType() { }
};
#endif

#ifndef SOAP_TYPE_Media_wsnb__InvalidFilterFaultType
#define SOAP_TYPE_Media_wsnb__InvalidFilterFaultType (487)
/* wsnb:InvalidFilterFaultType */
class SOAP_CMAC wsnb__InvalidFilterFaultType : public wsrfbf__BaseFaultType
{
public:
	std::vector<xsd__QName >UnknownFilter;	/* required element of type xsd:QName */
public:
	virtual int soap_type() const { return 487; } /* = unique id SOAP_TYPE_Media_wsnb__InvalidFilterFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnb__InvalidFilterFaultType() { wsnb__InvalidFilterFaultType::soap_default(NULL); }
	virtual ~wsnb__InvalidFilterFaultType() { }
};
#endif

#ifndef SOAP_TYPE_Media_wsnb__TopicExpressionDialectUnknownFaultType
#define SOAP_TYPE_Media_wsnb__TopicExpressionDialectUnknownFaultType (488)
/* wsnb:TopicExpressionDialectUnknownFaultType */
class SOAP_CMAC wsnb__TopicExpressionDialectUnknownFaultType : public wsrfbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 488; } /* = unique id SOAP_TYPE_Media_wsnb__TopicExpressionDialectUnknownFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnb__TopicExpressionDialectUnknownFaultType() { wsnb__TopicExpressionDialectUnknownFaultType::soap_default(NULL); }
	virtual ~wsnb__TopicExpressionDialectUnknownFaultType() { }
};
#endif

#ifndef SOAP_TYPE_Media_wsnb__InvalidTopicExpressionFaultType
#define SOAP_TYPE_Media_wsnb__InvalidTopicExpressionFaultType (489)
/* wsnb:InvalidTopicExpressionFaultType */
class SOAP_CMAC wsnb__InvalidTopicExpressionFaultType : public wsrfbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 489; } /* = unique id SOAP_TYPE_Media_wsnb__InvalidTopicExpressionFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnb__InvalidTopicExpressionFaultType() { wsnb__InvalidTopicExpressionFaultType::soap_default(NULL); }
	virtual ~wsnb__InvalidTopicExpressionFaultType() { }
};
#endif

#ifndef SOAP_TYPE_Media_wsnb__TopicNotSupportedFaultType
#define SOAP_TYPE_Media_wsnb__TopicNotSupportedFaultType (490)
/* wsnb:TopicNotSupportedFaultType */
class SOAP_CMAC wsnb__TopicNotSupportedFaultType : public wsrfbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 490; } /* = unique id SOAP_TYPE_Media_wsnb__TopicNotSupportedFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnb__TopicNotSupportedFaultType() { wsnb__TopicNotSupportedFaultType::soap_default(NULL); }
	virtual ~wsnb__TopicNotSupportedFaultType() { }
};
#endif

#ifndef SOAP_TYPE_Media_wsnb__MultipleTopicsSpecifiedFaultType
#define SOAP_TYPE_Media_wsnb__MultipleTopicsSpecifiedFaultType (491)
/* wsnb:MultipleTopicsSpecifiedFaultType */
class SOAP_CMAC wsnb__MultipleTopicsSpecifiedFaultType : public wsrfbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 491; } /* = unique id SOAP_TYPE_Media_wsnb__MultipleTopicsSpecifiedFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnb__MultipleTopicsSpecifiedFaultType() { wsnb__MultipleTopicsSpecifiedFaultType::soap_default(NULL); }
	virtual ~wsnb__MultipleTopicsSpecifiedFaultType() { }
};
#endif

#ifndef SOAP_TYPE_Media_wsnb__InvalidProducerPropertiesExpressionFaultType
#define SOAP_TYPE_Media_wsnb__InvalidProducerPropertiesExpressionFaultType (492)
/* wsnb:InvalidProducerPropertiesExpressionFaultType */
class SOAP_CMAC wsnb__InvalidProducerPropertiesExpressionFaultType : public wsrfbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 492; } /* = unique id SOAP_TYPE_Media_wsnb__InvalidProducerPropertiesExpressionFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnb__InvalidProducerPropertiesExpressionFaultType() { wsnb__InvalidProducerPropertiesExpressionFaultType::soap_default(NULL); }
	virtual ~wsnb__InvalidProducerPropertiesExpressionFaultType() { }
};
#endif

#ifndef SOAP_TYPE_Media_wsnb__InvalidMessageContentExpressionFaultType
#define SOAP_TYPE_Media_wsnb__InvalidMessageContentExpressionFaultType (493)
/* wsnb:InvalidMessageContentExpressionFaultType */
class SOAP_CMAC wsnb__InvalidMessageContentExpressionFaultType : public wsrfbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 493; } /* = unique id SOAP_TYPE_Media_wsnb__InvalidMessageContentExpressionFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnb__InvalidMessageContentExpressionFaultType() { wsnb__InvalidMessageContentExpressionFaultType::soap_default(NULL); }
	virtual ~wsnb__InvalidMessageContentExpressionFaultType() { }
};
#endif

#ifndef SOAP_TYPE_Media_wsnb__UnrecognizedPolicyRequestFaultType
#define SOAP_TYPE_Media_wsnb__UnrecognizedPolicyRequestFaultType (494)
/* wsnb:UnrecognizedPolicyRequestFaultType */
class SOAP_CMAC wsnb__UnrecognizedPolicyRequestFaultType : public wsrfbf__BaseFaultType
{
public:
	std::vector<xsd__QName >UnrecognizedPolicy;	/* optional element of type xsd:QName */
public:
	virtual int soap_type() const { return 494; } /* = unique id SOAP_TYPE_Media_wsnb__UnrecognizedPolicyRequestFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnb__UnrecognizedPolicyRequestFaultType() { wsnb__UnrecognizedPolicyRequestFaultType::soap_default(NULL); }
	virtual ~wsnb__UnrecognizedPolicyRequestFaultType() { }
};
#endif

#ifndef SOAP_TYPE_Media_wsnb__UnsupportedPolicyRequestFaultType
#define SOAP_TYPE_Media_wsnb__UnsupportedPolicyRequestFaultType (495)
/* wsnb:UnsupportedPolicyRequestFaultType */
class SOAP_CMAC wsnb__UnsupportedPolicyRequestFaultType : public wsrfbf__BaseFaultType
{
public:
	std::vector<xsd__QName >UnsupportedPolicy;	/* optional element of type xsd:QName */
public:
	virtual int soap_type() const { return 495; } /* = unique id SOAP_TYPE_Media_wsnb__UnsupportedPolicyRequestFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnb__UnsupportedPolicyRequestFaultType() { wsnb__UnsupportedPolicyRequestFaultType::soap_default(NULL); }
	virtual ~wsnb__UnsupportedPolicyRequestFaultType() { }
};
#endif

#ifndef SOAP_TYPE_Media_wsnb__NotifyMessageNotSupportedFaultType
#define SOAP_TYPE_Media_wsnb__NotifyMessageNotSupportedFaultType (496)
/* wsnb:NotifyMessageNotSupportedFaultType */
class SOAP_CMAC wsnb__NotifyMessageNotSupportedFaultType : public wsrfbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 496; } /* = unique id SOAP_TYPE_Media_wsnb__NotifyMessageNotSupportedFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnb__NotifyMessageNotSupportedFaultType() { wsnb__NotifyMessageNotSupportedFaultType::soap_default(NULL); }
	virtual ~wsnb__NotifyMessageNotSupportedFaultType() { }
};
#endif

#ifndef SOAP_TYPE_Media_wsnb__UnacceptableInitialTerminationTimeFaultType
#define SOAP_TYPE_Media_wsnb__UnacceptableInitialTerminationTimeFaultType (497)
/* wsnb:UnacceptableInitialTerminationTimeFaultType */
class SOAP_CMAC wsnb__UnacceptableInitialTerminationTimeFaultType : public wsrfbf__BaseFaultType
{
public:
	time_t MinimumTime;	/* required element of type xsd:dateTime */
	time_t *MaximumTime;	/* optional element of type xsd:dateTime */
public:
	virtual int soap_type() const { return 497; } /* = unique id SOAP_TYPE_Media_wsnb__UnacceptableInitialTerminationTimeFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnb__UnacceptableInitialTerminationTimeFaultType(): MaximumTime(NULL) { wsnb__UnacceptableInitialTerminationTimeFaultType::soap_default(NULL); }
	virtual ~wsnb__UnacceptableInitialTerminationTimeFaultType() { }
};
#endif

#ifndef SOAP_TYPE_Media_wsnb__NoCurrentMessageOnTopicFaultType
#define SOAP_TYPE_Media_wsnb__NoCurrentMessageOnTopicFaultType (498)
/* wsnb:NoCurrentMessageOnTopicFaultType */
class SOAP_CMAC wsnb__NoCurrentMessageOnTopicFaultType : public wsrfbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 498; } /* = unique id SOAP_TYPE_Media_wsnb__NoCurrentMessageOnTopicFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnb__NoCurrentMessageOnTopicFaultType() { wsnb__NoCurrentMessageOnTopicFaultType::soap_default(NULL); }
	virtual ~wsnb__NoCurrentMessageOnTopicFaultType() { }
};
#endif

#ifndef SOAP_TYPE_Media_wsnb__UnableToGetMessagesFaultType
#define SOAP_TYPE_Media_wsnb__UnableToGetMessagesFaultType (499)
/* wsnb:UnableToGetMessagesFaultType */
class SOAP_CMAC wsnb__UnableToGetMessagesFaultType : public wsrfbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 499; } /* = unique id SOAP_TYPE_Media_wsnb__UnableToGetMessagesFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnb__UnableToGetMessagesFaultType() { wsnb__UnableToGetMessagesFaultType::soap_default(NULL); }
	virtual ~wsnb__UnableToGetMessagesFaultType() { }
};
#endif

#ifndef SOAP_TYPE_Media_wsnb__UnableToDestroyPullPointFaultType
#define SOAP_TYPE_Media_wsnb__UnableToDestroyPullPointFaultType (500)
/* wsnb:UnableToDestroyPullPointFaultType */
class SOAP_CMAC wsnb__UnableToDestroyPullPointFaultType : public wsrfbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 500; } /* = unique id SOAP_TYPE_Media_wsnb__UnableToDestroyPullPointFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnb__UnableToDestroyPullPointFaultType() { wsnb__UnableToDestroyPullPointFaultType::soap_default(NULL); }
	virtual ~wsnb__UnableToDestroyPullPointFaultType() { }
};
#endif

#ifndef SOAP_TYPE_Media_wsnb__UnableToCreatePullPointFaultType
#define SOAP_TYPE_Media_wsnb__UnableToCreatePullPointFaultType (501)
/* wsnb:UnableToCreatePullPointFaultType */
class SOAP_CMAC wsnb__UnableToCreatePullPointFaultType : public wsrfbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 501; } /* = unique id SOAP_TYPE_Media_wsnb__UnableToCreatePullPointFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnb__UnableToCreatePullPointFaultType() { wsnb__UnableToCreatePullPointFaultType::soap_default(NULL); }
	virtual ~wsnb__UnableToCreatePullPointFaultType() { }
};
#endif

#ifndef SOAP_TYPE_Media_wsnb__UnacceptableTerminationTimeFaultType
#define SOAP_TYPE_Media_wsnb__UnacceptableTerminationTimeFaultType (502)
/* wsnb:UnacceptableTerminationTimeFaultType */
class SOAP_CMAC wsnb__UnacceptableTerminationTimeFaultType : public wsrfbf__BaseFaultType
{
public:
	time_t MinimumTime;	/* required element of type xsd:dateTime */
	time_t *MaximumTime;	/* optional element of type xsd:dateTime */
public:
	virtual int soap_type() const { return 502; } /* = unique id SOAP_TYPE_Media_wsnb__UnacceptableTerminationTimeFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnb__UnacceptableTerminationTimeFaultType(): MaximumTime(NULL) { wsnb__UnacceptableTerminationTimeFaultType::soap_default(NULL); }
	virtual ~wsnb__UnacceptableTerminationTimeFaultType() { }
};
#endif

#ifndef SOAP_TYPE_Media_wsnb__UnableToDestroySubscriptionFaultType
#define SOAP_TYPE_Media_wsnb__UnableToDestroySubscriptionFaultType (503)
/* wsnb:UnableToDestroySubscriptionFaultType */
class SOAP_CMAC wsnb__UnableToDestroySubscriptionFaultType : public wsrfbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 503; } /* = unique id SOAP_TYPE_Media_wsnb__UnableToDestroySubscriptionFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnb__UnableToDestroySubscriptionFaultType() { wsnb__UnableToDestroySubscriptionFaultType::soap_default(NULL); }
	virtual ~wsnb__UnableToDestroySubscriptionFaultType() { }
};
#endif

#ifndef SOAP_TYPE_Media_wsnb__PauseFailedFaultType
#define SOAP_TYPE_Media_wsnb__PauseFailedFaultType (504)
/* wsnb:PauseFailedFaultType */
class SOAP_CMAC wsnb__PauseFailedFaultType : public wsrfbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 504; } /* = unique id SOAP_TYPE_Media_wsnb__PauseFailedFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnb__PauseFailedFaultType() { wsnb__PauseFailedFaultType::soap_default(NULL); }
	virtual ~wsnb__PauseFailedFaultType() { }
};
#endif

#ifndef SOAP_TYPE_Media_wsnb__ResumeFailedFaultType
#define SOAP_TYPE_Media_wsnb__ResumeFailedFaultType (505)
/* wsnb:ResumeFailedFaultType */
class SOAP_CMAC wsnb__ResumeFailedFaultType : public wsrfbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 505; } /* = unique id SOAP_TYPE_Media_wsnb__ResumeFailedFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnb__ResumeFailedFaultType() { wsnb__ResumeFailedFaultType::soap_default(NULL); }
	virtual ~wsnb__ResumeFailedFaultType() { }
};
#endif

#ifndef SOAP_TYPE_Media__wstop__TopicNamespaceType_Topic
#define SOAP_TYPE_Media__wstop__TopicNamespaceType_Topic (946)
/* wstop:TopicNamespaceType-Topic */
class SOAP_CMAC _wstop__TopicNamespaceType_Topic
{
public:
	wstop__Documentation *documentation;	/* optional element of type wstop:Documentation */
	char *__anyAttribute;	/* optional attribute */
	wstop__QueryExpressionType *MessagePattern;	/* optional element of type wstop:QueryExpressionType */
	std::vector<class wstop__TopicType * >Topic;	/* optional element of type wstop:TopicType */
	std::vector<char * >__any;
	std::string name;	/* required attribute */
	std::string *messageTypes;	/* optional attribute */
	bool final;	/* optional attribute */
	std::string *parent;	/* optional attribute */
public:
	virtual int soap_type() const { return 946; } /* = unique id SOAP_TYPE_Media__wstop__TopicNamespaceType_Topic */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wstop__TopicNamespaceType_Topic(): documentation(NULL), __anyAttribute(NULL), MessagePattern(NULL), messageTypes(NULL), parent(NULL) { _wstop__TopicNamespaceType_Topic::soap_default(NULL); }
	virtual ~_wstop__TopicNamespaceType_Topic() { }
};
#endif

#ifndef SOAP_TYPE_Media_wstop__TopicNamespaceType
#define SOAP_TYPE_Media_wstop__TopicNamespaceType (532)
/* wstop:TopicNamespaceType */
class SOAP_CMAC wstop__TopicNamespaceType : public wstop__ExtensibleDocumented
{
public:
	int __sizeTopic;	/* sequence of elements <Topic> */
	_wstop__TopicNamespaceType_Topic *Topic;	/* optional element of type wstop:TopicNamespaceType-Topic */
	std::vector<char * >__any;
	std::string *name;	/* optional attribute */
	std::string targetNamespace;	/* required attribute */
	bool final;	/* optional attribute */
public:
	virtual int soap_type() const { return 532; } /* = unique id SOAP_TYPE_Media_wstop__TopicNamespaceType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wstop__TopicNamespaceType(): Topic(NULL), name(NULL) { wstop__TopicNamespaceType::soap_default(NULL); }
	virtual ~wstop__TopicNamespaceType() { }
};
#endif

#ifndef SOAP_TYPE_Media_wstop__TopicType
#define SOAP_TYPE_Media_wstop__TopicType (533)
/* wstop:TopicType */
class SOAP_CMAC wstop__TopicType : public wstop__ExtensibleDocumented
{
public:
	wstop__QueryExpressionType *MessagePattern;	/* optional element of type wstop:QueryExpressionType */
	std::vector<wstop__TopicType * >Topic;	/* optional element of type wstop:TopicType */
	std::vector<char * >__any;
	std::string name;	/* required attribute */
	std::string *messageTypes;	/* optional attribute */
	bool final;	/* optional attribute */
public:
	virtual int soap_type() const { return 533; } /* = unique id SOAP_TYPE_Media_wstop__TopicType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wstop__TopicType(): MessagePattern(NULL), messageTypes(NULL) { wstop__TopicType::soap_default(NULL); }
	virtual ~wstop__TopicType() { }
};
#endif

#ifndef SOAP_TYPE_Media_wstop__TopicSetType
#define SOAP_TYPE_Media_wstop__TopicSetType (534)
/* wstop:TopicSetType */
class SOAP_CMAC wstop__TopicSetType : public wstop__ExtensibleDocumented
{
public:
	std::vector<char * >__any;
public:
	virtual int soap_type() const { return 534; } /* = unique id SOAP_TYPE_Media_wstop__TopicSetType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wstop__TopicSetType() { wstop__TopicSetType::soap_default(NULL); }
	virtual ~wstop__TopicSetType() { }
};
#endif

#ifndef SOAP_TYPE_Media___trt__GetVideoSources
#define SOAP_TYPE_Media___trt__GetVideoSources (956)
/* Operation wrapper: */
struct __trt__GetVideoSources
{
public:
	_trt__GetVideoSources *trt__GetVideoSources;	/* optional element of type trt:GetVideoSources */
};
#endif

#ifndef SOAP_TYPE_Media___trt__GetAudioSources
#define SOAP_TYPE_Media___trt__GetAudioSources (960)
/* Operation wrapper: */
struct __trt__GetAudioSources
{
public:
	_trt__GetAudioSources *trt__GetAudioSources;	/* optional element of type trt:GetAudioSources */
};
#endif

#ifndef SOAP_TYPE_Media___trt__CreateProfile
#define SOAP_TYPE_Media___trt__CreateProfile (964)
/* Operation wrapper: */
struct __trt__CreateProfile
{
public:
	_trt__CreateProfile *trt__CreateProfile;	/* optional element of type trt:CreateProfile */
};
#endif

#ifndef SOAP_TYPE_Media___trt__GetProfile
#define SOAP_TYPE_Media___trt__GetProfile (968)
/* Operation wrapper: */
struct __trt__GetProfile
{
public:
	_trt__GetProfile *trt__GetProfile;	/* optional element of type trt:GetProfile */
};
#endif

#ifndef SOAP_TYPE_Media___trt__GetProfiles
#define SOAP_TYPE_Media___trt__GetProfiles (972)
/* Operation wrapper: */
struct __trt__GetProfiles
{
public:
	_trt__GetProfiles *trt__GetProfiles;	/* optional element of type trt:GetProfiles */
};
#endif

#ifndef SOAP_TYPE_Media___trt__AddVideoEncoderConfiguration
#define SOAP_TYPE_Media___trt__AddVideoEncoderConfiguration (976)
/* Operation wrapper: */
struct __trt__AddVideoEncoderConfiguration
{
public:
	_trt__AddVideoEncoderConfiguration *trt__AddVideoEncoderConfiguration;	/* optional element of type trt:AddVideoEncoderConfiguration */
};
#endif

#ifndef SOAP_TYPE_Media___trt__AddVideoSourceConfiguration
#define SOAP_TYPE_Media___trt__AddVideoSourceConfiguration (980)
/* Operation wrapper: */
struct __trt__AddVideoSourceConfiguration
{
public:
	_trt__AddVideoSourceConfiguration *trt__AddVideoSourceConfiguration;	/* optional element of type trt:AddVideoSourceConfiguration */
};
#endif

#ifndef SOAP_TYPE_Media___trt__AddAudioEncoderConfiguration
#define SOAP_TYPE_Media___trt__AddAudioEncoderConfiguration (984)
/* Operation wrapper: */
struct __trt__AddAudioEncoderConfiguration
{
public:
	_trt__AddAudioEncoderConfiguration *trt__AddAudioEncoderConfiguration;	/* optional element of type trt:AddAudioEncoderConfiguration */
};
#endif

#ifndef SOAP_TYPE_Media___trt__AddAudioSourceConfiguration
#define SOAP_TYPE_Media___trt__AddAudioSourceConfiguration (988)
/* Operation wrapper: */
struct __trt__AddAudioSourceConfiguration
{
public:
	_trt__AddAudioSourceConfiguration *trt__AddAudioSourceConfiguration;	/* optional element of type trt:AddAudioSourceConfiguration */
};
#endif

#ifndef SOAP_TYPE_Media___trt__AddPTZConfiguration
#define SOAP_TYPE_Media___trt__AddPTZConfiguration (992)
/* Operation wrapper: */
struct __trt__AddPTZConfiguration
{
public:
	_trt__AddPTZConfiguration *trt__AddPTZConfiguration;	/* optional element of type trt:AddPTZConfiguration */
};
#endif

#ifndef SOAP_TYPE_Media___trt__AddVideoAnalyticsConfiguration
#define SOAP_TYPE_Media___trt__AddVideoAnalyticsConfiguration (996)
/* Operation wrapper: */
struct __trt__AddVideoAnalyticsConfiguration
{
public:
	_trt__AddVideoAnalyticsConfiguration *trt__AddVideoAnalyticsConfiguration;	/* optional element of type trt:AddVideoAnalyticsConfiguration */
};
#endif

#ifndef SOAP_TYPE_Media___trt__AddMetadataConfiguration
#define SOAP_TYPE_Media___trt__AddMetadataConfiguration (1000)
/* Operation wrapper: */
struct __trt__AddMetadataConfiguration
{
public:
	_trt__AddMetadataConfiguration *trt__AddMetadataConfiguration;	/* optional element of type trt:AddMetadataConfiguration */
};
#endif

#ifndef SOAP_TYPE_Media___trt__RemoveVideoEncoderConfiguration
#define SOAP_TYPE_Media___trt__RemoveVideoEncoderConfiguration (1004)
/* Operation wrapper: */
struct __trt__RemoveVideoEncoderConfiguration
{
public:
	_trt__RemoveVideoEncoderConfiguration *trt__RemoveVideoEncoderConfiguration;	/* optional element of type trt:RemoveVideoEncoderConfiguration */
};
#endif

#ifndef SOAP_TYPE_Media___trt__RemoveVideoSourceConfiguration
#define SOAP_TYPE_Media___trt__RemoveVideoSourceConfiguration (1008)
/* Operation wrapper: */
struct __trt__RemoveVideoSourceConfiguration
{
public:
	_trt__RemoveVideoSourceConfiguration *trt__RemoveVideoSourceConfiguration;	/* optional element of type trt:RemoveVideoSourceConfiguration */
};
#endif

#ifndef SOAP_TYPE_Media___trt__RemoveAudioEncoderConfiguration
#define SOAP_TYPE_Media___trt__RemoveAudioEncoderConfiguration (1012)
/* Operation wrapper: */
struct __trt__RemoveAudioEncoderConfiguration
{
public:
	_trt__RemoveAudioEncoderConfiguration *trt__RemoveAudioEncoderConfiguration;	/* optional element of type trt:RemoveAudioEncoderConfiguration */
};
#endif

#ifndef SOAP_TYPE_Media___trt__RemoveAudioSourceConfiguration
#define SOAP_TYPE_Media___trt__RemoveAudioSourceConfiguration (1016)
/* Operation wrapper: */
struct __trt__RemoveAudioSourceConfiguration
{
public:
	_trt__RemoveAudioSourceConfiguration *trt__RemoveAudioSourceConfiguration;	/* optional element of type trt:RemoveAudioSourceConfiguration */
};
#endif

#ifndef SOAP_TYPE_Media___trt__RemovePTZConfiguration
#define SOAP_TYPE_Media___trt__RemovePTZConfiguration (1020)
/* Operation wrapper: */
struct __trt__RemovePTZConfiguration
{
public:
	_trt__RemovePTZConfiguration *trt__RemovePTZConfiguration;	/* optional element of type trt:RemovePTZConfiguration */
};
#endif

#ifndef SOAP_TYPE_Media___trt__RemoveVideoAnalyticsConfiguration
#define SOAP_TYPE_Media___trt__RemoveVideoAnalyticsConfiguration (1024)
/* Operation wrapper: */
struct __trt__RemoveVideoAnalyticsConfiguration
{
public:
	_trt__RemoveVideoAnalyticsConfiguration *trt__RemoveVideoAnalyticsConfiguration;	/* optional element of type trt:RemoveVideoAnalyticsConfiguration */
};
#endif

#ifndef SOAP_TYPE_Media___trt__RemoveMetadataConfiguration
#define SOAP_TYPE_Media___trt__RemoveMetadataConfiguration (1028)
/* Operation wrapper: */
struct __trt__RemoveMetadataConfiguration
{
public:
	_trt__RemoveMetadataConfiguration *trt__RemoveMetadataConfiguration;	/* optional element of type trt:RemoveMetadataConfiguration */
};
#endif

#ifndef SOAP_TYPE_Media___trt__DeleteProfile
#define SOAP_TYPE_Media___trt__DeleteProfile (1032)
/* Operation wrapper: */
struct __trt__DeleteProfile
{
public:
	_trt__DeleteProfile *trt__DeleteProfile;	/* optional element of type trt:DeleteProfile */
};
#endif

#ifndef SOAP_TYPE_Media___trt__GetVideoSourceConfigurations
#define SOAP_TYPE_Media___trt__GetVideoSourceConfigurations (1036)
/* Operation wrapper: */
struct __trt__GetVideoSourceConfigurations
{
public:
	_trt__GetVideoSourceConfigurations *trt__GetVideoSourceConfigurations;	/* optional element of type trt:GetVideoSourceConfigurations */
};
#endif

#ifndef SOAP_TYPE_Media___trt__GetVideoEncoderConfigurations
#define SOAP_TYPE_Media___trt__GetVideoEncoderConfigurations (1040)
/* Operation wrapper: */
struct __trt__GetVideoEncoderConfigurations
{
public:
	_trt__GetVideoEncoderConfigurations *trt__GetVideoEncoderConfigurations;	/* optional element of type trt:GetVideoEncoderConfigurations */
};
#endif

#ifndef SOAP_TYPE_Media___trt__GetAudioSourceConfigurations
#define SOAP_TYPE_Media___trt__GetAudioSourceConfigurations (1044)
/* Operation wrapper: */
struct __trt__GetAudioSourceConfigurations
{
public:
	_trt__GetAudioSourceConfigurations *trt__GetAudioSourceConfigurations;	/* optional element of type trt:GetAudioSourceConfigurations */
};
#endif

#ifndef SOAP_TYPE_Media___trt__GetAudioEncoderConfigurations
#define SOAP_TYPE_Media___trt__GetAudioEncoderConfigurations (1048)
/* Operation wrapper: */
struct __trt__GetAudioEncoderConfigurations
{
public:
	_trt__GetAudioEncoderConfigurations *trt__GetAudioEncoderConfigurations;	/* optional element of type trt:GetAudioEncoderConfigurations */
};
#endif

#ifndef SOAP_TYPE_Media___trt__GetVideoAnalyticsConfigurations
#define SOAP_TYPE_Media___trt__GetVideoAnalyticsConfigurations (1052)
/* Operation wrapper: */
struct __trt__GetVideoAnalyticsConfigurations
{
public:
	_trt__GetVideoAnalyticsConfigurations *trt__GetVideoAnalyticsConfigurations;	/* optional element of type trt:GetVideoAnalyticsConfigurations */
};
#endif

#ifndef SOAP_TYPE_Media___trt__GetMetadataConfigurations
#define SOAP_TYPE_Media___trt__GetMetadataConfigurations (1056)
/* Operation wrapper: */
struct __trt__GetMetadataConfigurations
{
public:
	_trt__GetMetadataConfigurations *trt__GetMetadataConfigurations;	/* optional element of type trt:GetMetadataConfigurations */
};
#endif

#ifndef SOAP_TYPE_Media___trt__GetVideoSourceConfiguration
#define SOAP_TYPE_Media___trt__GetVideoSourceConfiguration (1060)
/* Operation wrapper: */
struct __trt__GetVideoSourceConfiguration
{
public:
	_trt__GetVideoSourceConfiguration *trt__GetVideoSourceConfiguration;	/* optional element of type trt:GetVideoSourceConfiguration */
};
#endif

#ifndef SOAP_TYPE_Media___trt__GetVideoEncoderConfiguration
#define SOAP_TYPE_Media___trt__GetVideoEncoderConfiguration (1064)
/* Operation wrapper: */
struct __trt__GetVideoEncoderConfiguration
{
public:
	_trt__GetVideoEncoderConfiguration *trt__GetVideoEncoderConfiguration;	/* optional element of type trt:GetVideoEncoderConfiguration */
};
#endif

#ifndef SOAP_TYPE_Media___trt__GetAudioSourceConfiguration
#define SOAP_TYPE_Media___trt__GetAudioSourceConfiguration (1068)
/* Operation wrapper: */
struct __trt__GetAudioSourceConfiguration
{
public:
	_trt__GetAudioSourceConfiguration *trt__GetAudioSourceConfiguration;	/* optional element of type trt:GetAudioSourceConfiguration */
};
#endif

#ifndef SOAP_TYPE_Media___trt__GetAudioEncoderConfiguration
#define SOAP_TYPE_Media___trt__GetAudioEncoderConfiguration (1072)
/* Operation wrapper: */
struct __trt__GetAudioEncoderConfiguration
{
public:
	_trt__GetAudioEncoderConfiguration *trt__GetAudioEncoderConfiguration;	/* optional element of type trt:GetAudioEncoderConfiguration */
};
#endif

#ifndef SOAP_TYPE_Media___trt__GetVideoAnalyticsConfiguration
#define SOAP_TYPE_Media___trt__GetVideoAnalyticsConfiguration (1076)
/* Operation wrapper: */
struct __trt__GetVideoAnalyticsConfiguration
{
public:
	_trt__GetVideoAnalyticsConfiguration *trt__GetVideoAnalyticsConfiguration;	/* optional element of type trt:GetVideoAnalyticsConfiguration */
};
#endif

#ifndef SOAP_TYPE_Media___trt__GetMetadataConfiguration
#define SOAP_TYPE_Media___trt__GetMetadataConfiguration (1080)
/* Operation wrapper: */
struct __trt__GetMetadataConfiguration
{
public:
	_trt__GetMetadataConfiguration *trt__GetMetadataConfiguration;	/* optional element of type trt:GetMetadataConfiguration */
};
#endif

#ifndef SOAP_TYPE_Media___trt__GetCompatibleVideoEncoderConfigurations
#define SOAP_TYPE_Media___trt__GetCompatibleVideoEncoderConfigurations (1084)
/* Operation wrapper: */
struct __trt__GetCompatibleVideoEncoderConfigurations
{
public:
	_trt__GetCompatibleVideoEncoderConfigurations *trt__GetCompatibleVideoEncoderConfigurations;	/* optional element of type trt:GetCompatibleVideoEncoderConfigurations */
};
#endif

#ifndef SOAP_TYPE_Media___trt__GetCompatibleVideoSourceConfigurations
#define SOAP_TYPE_Media___trt__GetCompatibleVideoSourceConfigurations (1088)
/* Operation wrapper: */
struct __trt__GetCompatibleVideoSourceConfigurations
{
public:
	_trt__GetCompatibleVideoSourceConfigurations *trt__GetCompatibleVideoSourceConfigurations;	/* optional element of type trt:GetCompatibleVideoSourceConfigurations */
};
#endif

#ifndef SOAP_TYPE_Media___trt__GetCompatibleAudioEncoderConfigurations
#define SOAP_TYPE_Media___trt__GetCompatibleAudioEncoderConfigurations (1092)
/* Operation wrapper: */
struct __trt__GetCompatibleAudioEncoderConfigurations
{
public:
	_trt__GetCompatibleAudioEncoderConfigurations *trt__GetCompatibleAudioEncoderConfigurations;	/* optional element of type trt:GetCompatibleAudioEncoderConfigurations */
};
#endif

#ifndef SOAP_TYPE_Media___trt__GetCompatibleAudioSourceConfigurations
#define SOAP_TYPE_Media___trt__GetCompatibleAudioSourceConfigurations (1096)
/* Operation wrapper: */
struct __trt__GetCompatibleAudioSourceConfigurations
{
public:
	_trt__GetCompatibleAudioSourceConfigurations *trt__GetCompatibleAudioSourceConfigurations;	/* optional element of type trt:GetCompatibleAudioSourceConfigurations */
};
#endif

#ifndef SOAP_TYPE_Media___trt__GetCompatibleVideoAnalyticsConfigurations
#define SOAP_TYPE_Media___trt__GetCompatibleVideoAnalyticsConfigurations (1100)
/* Operation wrapper: */
struct __trt__GetCompatibleVideoAnalyticsConfigurations
{
public:
	_trt__GetCompatibleVideoAnalyticsConfigurations *trt__GetCompatibleVideoAnalyticsConfigurations;	/* optional element of type trt:GetCompatibleVideoAnalyticsConfigurations */
};
#endif

#ifndef SOAP_TYPE_Media___trt__GetCompatibleMetadataConfigurations
#define SOAP_TYPE_Media___trt__GetCompatibleMetadataConfigurations (1104)
/* Operation wrapper: */
struct __trt__GetCompatibleMetadataConfigurations
{
public:
	_trt__GetCompatibleMetadataConfigurations *trt__GetCompatibleMetadataConfigurations;	/* optional element of type trt:GetCompatibleMetadataConfigurations */
};
#endif

#ifndef SOAP_TYPE_Media___trt__SetVideoSourceConfiguration
#define SOAP_TYPE_Media___trt__SetVideoSourceConfiguration (1108)
/* Operation wrapper: */
struct __trt__SetVideoSourceConfiguration
{
public:
	_trt__SetVideoSourceConfiguration *trt__SetVideoSourceConfiguration;	/* optional element of type trt:SetVideoSourceConfiguration */
};
#endif

#ifndef SOAP_TYPE_Media___trt__SetVideoEncoderConfiguration
#define SOAP_TYPE_Media___trt__SetVideoEncoderConfiguration (1112)
/* Operation wrapper: */
struct __trt__SetVideoEncoderConfiguration
{
public:
	_trt__SetVideoEncoderConfiguration *trt__SetVideoEncoderConfiguration;	/* optional element of type trt:SetVideoEncoderConfiguration */
};
#endif

#ifndef SOAP_TYPE_Media___trt__SetAudioSourceConfiguration
#define SOAP_TYPE_Media___trt__SetAudioSourceConfiguration (1116)
/* Operation wrapper: */
struct __trt__SetAudioSourceConfiguration
{
public:
	_trt__SetAudioSourceConfiguration *trt__SetAudioSourceConfiguration;	/* optional element of type trt:SetAudioSourceConfiguration */
};
#endif

#ifndef SOAP_TYPE_Media___trt__SetAudioEncoderConfiguration
#define SOAP_TYPE_Media___trt__SetAudioEncoderConfiguration (1120)
/* Operation wrapper: */
struct __trt__SetAudioEncoderConfiguration
{
public:
	_trt__SetAudioEncoderConfiguration *trt__SetAudioEncoderConfiguration;	/* optional element of type trt:SetAudioEncoderConfiguration */
};
#endif

#ifndef SOAP_TYPE_Media___trt__SetVideoAnalyticsConfiguration
#define SOAP_TYPE_Media___trt__SetVideoAnalyticsConfiguration (1124)
/* Operation wrapper: */
struct __trt__SetVideoAnalyticsConfiguration
{
public:
	_trt__SetVideoAnalyticsConfiguration *trt__SetVideoAnalyticsConfiguration;	/* optional element of type trt:SetVideoAnalyticsConfiguration */
};
#endif

#ifndef SOAP_TYPE_Media___trt__SetMetadataConfiguration
#define SOAP_TYPE_Media___trt__SetMetadataConfiguration (1128)
/* Operation wrapper: */
struct __trt__SetMetadataConfiguration
{
public:
	_trt__SetMetadataConfiguration *trt__SetMetadataConfiguration;	/* optional element of type trt:SetMetadataConfiguration */
};
#endif

#ifndef SOAP_TYPE_Media___trt__GetVideoSourceConfigurationOptions
#define SOAP_TYPE_Media___trt__GetVideoSourceConfigurationOptions (1132)
/* Operation wrapper: */
struct __trt__GetVideoSourceConfigurationOptions
{
public:
	_trt__GetVideoSourceConfigurationOptions *trt__GetVideoSourceConfigurationOptions;	/* optional element of type trt:GetVideoSourceConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE_Media___trt__GetVideoEncoderConfigurationOptions
#define SOAP_TYPE_Media___trt__GetVideoEncoderConfigurationOptions (1136)
/* Operation wrapper: */
struct __trt__GetVideoEncoderConfigurationOptions
{
public:
	_trt__GetVideoEncoderConfigurationOptions *trt__GetVideoEncoderConfigurationOptions;	/* optional element of type trt:GetVideoEncoderConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE_Media___trt__GetAudioSourceConfigurationOptions
#define SOAP_TYPE_Media___trt__GetAudioSourceConfigurationOptions (1140)
/* Operation wrapper: */
struct __trt__GetAudioSourceConfigurationOptions
{
public:
	_trt__GetAudioSourceConfigurationOptions *trt__GetAudioSourceConfigurationOptions;	/* optional element of type trt:GetAudioSourceConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE_Media___trt__GetAudioEncoderConfigurationOptions
#define SOAP_TYPE_Media___trt__GetAudioEncoderConfigurationOptions (1144)
/* Operation wrapper: */
struct __trt__GetAudioEncoderConfigurationOptions
{
public:
	_trt__GetAudioEncoderConfigurationOptions *trt__GetAudioEncoderConfigurationOptions;	/* optional element of type trt:GetAudioEncoderConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE_Media___trt__GetMetadataConfigurationOptions
#define SOAP_TYPE_Media___trt__GetMetadataConfigurationOptions (1148)
/* Operation wrapper: */
struct __trt__GetMetadataConfigurationOptions
{
public:
	_trt__GetMetadataConfigurationOptions *trt__GetMetadataConfigurationOptions;	/* optional element of type trt:GetMetadataConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE_Media___trt__GetGuaranteedNumberOfVideoEncoderInstances
#define SOAP_TYPE_Media___trt__GetGuaranteedNumberOfVideoEncoderInstances (1152)
/* Operation wrapper: */
struct __trt__GetGuaranteedNumberOfVideoEncoderInstances
{
public:
	_trt__GetGuaranteedNumberOfVideoEncoderInstances *trt__GetGuaranteedNumberOfVideoEncoderInstances;	/* optional element of type trt:GetGuaranteedNumberOfVideoEncoderInstances */
};
#endif

#ifndef SOAP_TYPE_Media___trt__GetStreamUri
#define SOAP_TYPE_Media___trt__GetStreamUri (1156)
/* Operation wrapper: */
struct __trt__GetStreamUri
{
public:
	_trt__GetStreamUri *trt__GetStreamUri;	/* optional element of type trt:GetStreamUri */
};
#endif

#ifndef SOAP_TYPE_Media___trt__StartMulticastStreaming
#define SOAP_TYPE_Media___trt__StartMulticastStreaming (1160)
/* Operation wrapper: */
struct __trt__StartMulticastStreaming
{
public:
	_trt__StartMulticastStreaming *trt__StartMulticastStreaming;	/* optional element of type trt:StartMulticastStreaming */
};
#endif

#ifndef SOAP_TYPE_Media___trt__StopMulticastStreaming
#define SOAP_TYPE_Media___trt__StopMulticastStreaming (1164)
/* Operation wrapper: */
struct __trt__StopMulticastStreaming
{
public:
	_trt__StopMulticastStreaming *trt__StopMulticastStreaming;	/* optional element of type trt:StopMulticastStreaming */
};
#endif

#ifndef SOAP_TYPE_Media___trt__SetSynchronizationPoint
#define SOAP_TYPE_Media___trt__SetSynchronizationPoint (1168)
/* Operation wrapper: */
struct __trt__SetSynchronizationPoint
{
public:
	_trt__SetSynchronizationPoint *trt__SetSynchronizationPoint;	/* optional element of type trt:SetSynchronizationPoint */
};
#endif

#ifndef SOAP_TYPE_Media___trt__GetSnapshotUri
#define SOAP_TYPE_Media___trt__GetSnapshotUri (1172)
/* Operation wrapper: */
struct __trt__GetSnapshotUri
{
public:
	_trt__GetSnapshotUri *trt__GetSnapshotUri;	/* optional element of type trt:GetSnapshotUri */
};
#endif

#ifndef SOAP_TYPE_Media_SOAP_ENV__Code
#define SOAP_TYPE_Media_SOAP_ENV__Code (1173)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#ifndef SOAP_TYPE_Media_SOAP_ENV__Detail
#define SOAP_TYPE_Media_SOAP_ENV__Detail (1175)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
	char *__any;
};
#endif

#ifndef SOAP_TYPE_Media_SOAP_ENV__Reason
#define SOAP_TYPE_Media_SOAP_ENV__Reason (1178)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_Media_SOAP_ENV__Fault
#define SOAP_TYPE_Media_SOAP_ENV__Fault (1179)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE_Media__QName
#define SOAP_TYPE_Media__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE_Media__XML
#define SOAP_TYPE_Media__XML (6)
typedef char *_XML;
#endif

#ifndef SOAP_TYPE_Media_wsa5__RelationshipTypeOpenEnum
#define SOAP_TYPE_Media_wsa5__RelationshipTypeOpenEnum (17)
typedef char *wsa5__RelationshipTypeOpenEnum;
#endif

#ifndef SOAP_TYPE_Media_wsa5__FaultCodesOpenEnumType
#define SOAP_TYPE_Media_wsa5__FaultCodesOpenEnumType (18)
typedef char *wsa5__FaultCodesOpenEnumType;
#endif

#ifndef SOAP_TYPE_Media__wsa5__EndpointReference
#define SOAP_TYPE_Media__wsa5__EndpointReference (24)
typedef struct wsa5__EndpointReferenceType _wsa5__EndpointReference;
#endif

#ifndef SOAP_TYPE_Media__wsa5__ReferenceParameters
#define SOAP_TYPE_Media__wsa5__ReferenceParameters (25)
typedef struct wsa5__ReferenceParametersType _wsa5__ReferenceParameters;
#endif

#ifndef SOAP_TYPE_Media__wsa5__Metadata
#define SOAP_TYPE_Media__wsa5__Metadata (26)
typedef struct wsa5__MetadataType _wsa5__Metadata;
#endif

#ifndef SOAP_TYPE_Media__wsa5__MessageID
#define SOAP_TYPE_Media__wsa5__MessageID (27)
typedef char *_wsa5__MessageID;
#endif

#ifndef SOAP_TYPE_Media__wsa5__RelatesTo
#define SOAP_TYPE_Media__wsa5__RelatesTo (28)
typedef struct wsa5__RelatesToType _wsa5__RelatesTo;
#endif

#ifndef SOAP_TYPE_Media__wsa5__ReplyTo
#define SOAP_TYPE_Media__wsa5__ReplyTo (29)
typedef struct wsa5__EndpointReferenceType _wsa5__ReplyTo;
#endif

#ifndef SOAP_TYPE_Media__wsa5__From
#define SOAP_TYPE_Media__wsa5__From (30)
typedef struct wsa5__EndpointReferenceType _wsa5__From;
#endif

#ifndef SOAP_TYPE_Media__wsa5__FaultTo
#define SOAP_TYPE_Media__wsa5__FaultTo (31)
typedef struct wsa5__EndpointReferenceType _wsa5__FaultTo;
#endif

#ifndef SOAP_TYPE_Media__wsa5__To
#define SOAP_TYPE_Media__wsa5__To (32)
typedef char *_wsa5__To;
#endif

#ifndef SOAP_TYPE_Media__wsa5__Action
#define SOAP_TYPE_Media__wsa5__Action (33)
typedef char *_wsa5__Action;
#endif

#ifndef SOAP_TYPE_Media__wsa5__RetryAfter
#define SOAP_TYPE_Media__wsa5__RetryAfter (35)
typedef ULONG64 _wsa5__RetryAfter;
#endif

#ifndef SOAP_TYPE_Media__wsa5__ProblemHeaderQName
#define SOAP_TYPE_Media__wsa5__ProblemHeaderQName (36)
typedef char *_wsa5__ProblemHeaderQName;
#endif

#ifndef SOAP_TYPE_Media__wsa5__ProblemIRI
#define SOAP_TYPE_Media__wsa5__ProblemIRI (37)
typedef char *_wsa5__ProblemIRI;
#endif

#ifndef SOAP_TYPE_Media__wsa5__ProblemAction
#define SOAP_TYPE_Media__wsa5__ProblemAction (38)
typedef struct wsa5__ProblemActionType _wsa5__ProblemAction;
#endif

#ifndef SOAP_TYPE_Media_xsd__NCName
#define SOAP_TYPE_Media_xsd__NCName (102)
typedef std::string xsd__NCName;
#endif

#ifndef SOAP_TYPE_Media_xsd__anySimpleType
#define SOAP_TYPE_Media_xsd__anySimpleType (106)
typedef std::string xsd__anySimpleType;
#endif

#ifndef SOAP_TYPE_Media_xsd__anyURI
#define SOAP_TYPE_Media_xsd__anyURI (108)
typedef std::string xsd__anyURI;
#endif

#ifndef SOAP_TYPE_Media_xsd__integer
#define SOAP_TYPE_Media_xsd__integer (124)
typedef std::string xsd__integer;
#endif

#ifndef SOAP_TYPE_Media_xsd__nonNegativeInteger
#define SOAP_TYPE_Media_xsd__nonNegativeInteger (126)
typedef std::string xsd__nonNegativeInteger;
#endif

#ifndef SOAP_TYPE_Media_xsd__token
#define SOAP_TYPE_Media_xsd__token (129)
typedef std::string xsd__token;
#endif

#ifndef SOAP_TYPE_Media__xml__lang
#define SOAP_TYPE_Media__xml__lang (131)
typedef std::string _xml__lang;
#endif

#ifndef SOAP_TYPE_Media_wsnb__AbsoluteOrRelativeTimeType
#define SOAP_TYPE_Media_wsnb__AbsoluteOrRelativeTimeType (535)
typedef std::string wsnb__AbsoluteOrRelativeTimeType;
#endif

#ifndef SOAP_TYPE_Media_onv__ReferenceToken
#define SOAP_TYPE_Media_onv__ReferenceToken (536)
typedef std::string onv__ReferenceToken;
#endif

#ifndef SOAP_TYPE_Media_onv__Name
#define SOAP_TYPE_Media_onv__Name (538)
typedef std::string onv__Name;
#endif

#ifndef SOAP_TYPE_Media_onv__IANA_IfTypes
#define SOAP_TYPE_Media_onv__IANA_IfTypes (558)
typedef int onv__IANA_IfTypes;
#endif

#ifndef SOAP_TYPE_Media_onv__IPv4Address
#define SOAP_TYPE_Media_onv__IPv4Address (566)
typedef std::string onv__IPv4Address;
#endif

#ifndef SOAP_TYPE_Media_onv__IPv6Address
#define SOAP_TYPE_Media_onv__IPv6Address (568)
typedef std::string onv__IPv6Address;
#endif

#ifndef SOAP_TYPE_Media_onv__HwAddress
#define SOAP_TYPE_Media_onv__HwAddress (570)
typedef std::string onv__HwAddress;
#endif

#ifndef SOAP_TYPE_Media_onv__DNSName
#define SOAP_TYPE_Media_onv__DNSName (574)
typedef std::string onv__DNSName;
#endif

#ifndef SOAP_TYPE_Media_onv__Domain
#define SOAP_TYPE_Media_onv__Domain (576)
typedef std::string onv__Domain;
#endif

#ifndef SOAP_TYPE_Media_onv__AuxiliaryData
#define SOAP_TYPE_Media_onv__AuxiliaryData (598)
typedef std::string onv__AuxiliaryData;
#endif

#ifndef SOAP_TYPE_Media_onv__TopicNamespaceLocation
#define SOAP_TYPE_Media_onv__TopicNamespaceLocation (618)
typedef std::string onv__TopicNamespaceLocation;
#endif

#ifndef SOAP_TYPE_Media_wstop__FullTopicExpression
#define SOAP_TYPE_Media_wstop__FullTopicExpression (626)
typedef std::string wstop__FullTopicExpression;
#endif

#ifndef SOAP_TYPE_Media_wstop__ConcreteTopicExpression
#define SOAP_TYPE_Media_wstop__ConcreteTopicExpression (628)
typedef std::string wstop__ConcreteTopicExpression;
#endif

#ifndef SOAP_TYPE_Media_wstop__SimpleTopicExpression
#define SOAP_TYPE_Media_wstop__SimpleTopicExpression (630)
typedef xsd__QName wstop__SimpleTopicExpression;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


} // namespace Media


#endif

/* End of MediaStub.h */
