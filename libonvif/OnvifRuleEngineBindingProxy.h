/* OnvifRuleEngineBindingProxy.h
   Generated by gSOAP 2.8.0 from onvif.h
   Copyright(C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.
   The generated code is released under one of the following licenses:
   GPL OR Genivia's license for commercial use.
*/

#ifndef OnvifRuleEngineBindingProxy_H
#define OnvifRuleEngineBindingProxy_H
#include "OnvifH.h"

class SOAP_CMAC RuleEngineBindingProxy : public soap
{ public:
	/// Endpoint URL of service 'RuleEngineBindingProxy' (change as needed)
	const char *soap_endpoint;
	/// Constructor
	RuleEngineBindingProxy();
	/// Constructor with copy of another engine state
	RuleEngineBindingProxy(const struct soap&);
	/// Constructor with engine input+output mode control
	RuleEngineBindingProxy(soap_mode iomode);
	/// Constructor with engine input and output mode control
	RuleEngineBindingProxy(soap_mode imode, soap_mode omode);
	/// Destructor frees deserialized data
	virtual	~RuleEngineBindingProxy();
	/// Initializer used by constructors
	virtual	void RuleEngineBindingProxy_init(soap_mode imode, soap_mode omode);
	/// Delete all deserialized data (uses soap_destroy and soap_end)
	virtual	void destroy();
	/// Disables and removes SOAP Header from message
	virtual	void soap_noheader();
	/// Put SOAP Header in message
	virtual	void soap_header(struct _wsse__Security *wsse__Security, char *wsa5__MessageID, struct wsa5__RelatesToType *wsa5__RelatesTo, struct wsa5__EndpointReferenceType *wsa5__From, struct wsa5__EndpointReferenceType *wsa5__ReplyTo, struct wsa5__EndpointReferenceType *wsa5__FaultTo, char *wsa5__To, char *wsa5__Action);
	/// Get SOAP Header structure (NULL when absent)
	virtual	const SOAP_ENV__Header *soap_header();
	/// Get SOAP Fault structure (NULL when absent)
	virtual	const SOAP_ENV__Fault *soap_fault();
	/// Get SOAP Fault string (NULL when absent)
	virtual	const char *soap_fault_string();
	/// Get SOAP Fault detail as string (NULL when absent)
	virtual	const char *soap_fault_detail();
	/// Force close connection (normally automatic, except for send_X ops)
	virtual	int soap_close_socket();
	/// Print fault
	virtual	void soap_print_fault(FILE*);
#ifndef WITH_LEAN
	/// Print fault to stream
	virtual	void soap_stream_fault(std::ostream&);
	/// Put fault into buffer
	virtual	char *soap_sprint_fault(char *buf, size_t len);
#endif

	/// Web service operation 'GetSupportedRules' (returns error code or SOAP_OK)
	virtual	int GetSupportedRules(_tan__GetSupportedRules *tan__GetSupportedRules, _tan__GetSupportedRulesResponse *tan__GetSupportedRulesResponse);

	/// Web service operation 'CreateRules' (returns error code or SOAP_OK)
	virtual	int CreateRules(_tan__CreateRules *tan__CreateRules, _tan__CreateRulesResponse *tan__CreateRulesResponse);

	/// Web service operation 'DeleteRules' (returns error code or SOAP_OK)
	virtual	int DeleteRules(_tan__DeleteRules *tan__DeleteRules, _tan__DeleteRulesResponse *tan__DeleteRulesResponse);

	/// Web service operation 'GetRules' (returns error code or SOAP_OK)
	virtual	int GetRules(_tan__GetRules *tan__GetRules, _tan__GetRulesResponse *tan__GetRulesResponse);

	/// Web service operation 'ModifyRules' (returns error code or SOAP_OK)
	virtual	int ModifyRules(_tan__ModifyRules *tan__ModifyRules, _tan__ModifyRulesResponse *tan__ModifyRulesResponse);
};
#endif
