/* Remotedpws_discoveryProxy.cpp
   Generated by gSOAP 2.8.0 from devprof_databinding.gsoap
   Copyright(C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.
   The generated code is released under one of the following licenses:
   GPL OR Genivia's license for commercial use.
*/

#include "Remotedpws_discoveryProxy.h"

namespace Remote {

dpws_discoveryProxy::dpws_discoveryProxy()
{	dpws_discoveryProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

dpws_discoveryProxy::dpws_discoveryProxy(const struct soap &_soap) : soap(_soap)
{ }

dpws_discoveryProxy::dpws_discoveryProxy(soap_mode iomode)
{	dpws_discoveryProxy_init(iomode, iomode);
}

dpws_discoveryProxy::dpws_discoveryProxy(soap_mode imode, soap_mode omode)
{	dpws_discoveryProxy_init(imode, omode);
}

void dpws_discoveryProxy::dpws_discoveryProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"wsa", "http://schemas.xmlsoap.org/ws/2004/08/addressing", NULL, NULL},
	{"c14n", "http://www.w3.org/2001/10/xml-exc-c14n#", NULL, NULL},
	{"wsu", "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd", NULL, NULL},
	{"ds", "http://www.w3.org/2000/09/xmldsig#", NULL, NULL},
	{"wsse", "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd", NULL, NULL},
	{"wsd", "http://schemas.xmlsoap.org/ws/2005/04/discovery", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	this->namespaces = namespaces;
}

dpws_discoveryProxy::~dpws_discoveryProxy()
{ }

void dpws_discoveryProxy::destroy()
{	soap_destroy(this);
	soap_end(this);
}

void dpws_discoveryProxy::soap_noheader()
{	header = NULL;
}

void dpws_discoveryProxy::soap_header(char *wsa__MessageID, struct wsa__Relationship *wsa__RelatesTo, struct wsa__EndpointReferenceType *wsa__From, struct wsa__EndpointReferenceType *wsa__ReplyTo, struct wsa__EndpointReferenceType *wsa__FaultTo, char *wsa__To, char *wsa__Action, struct _wsse__Security *wsse__Security, struct wsd__AppSequenceType *wsd__AppSequence)
{	::soap_header(this);
	((Remote::SOAP_ENV__Header*)this->header)->wsa__MessageID = wsa__MessageID;
	((Remote::SOAP_ENV__Header*)this->header)->wsa__RelatesTo = wsa__RelatesTo;
	((Remote::SOAP_ENV__Header*)this->header)->wsa__From = wsa__From;
	((Remote::SOAP_ENV__Header*)this->header)->wsa__ReplyTo = wsa__ReplyTo;
	((Remote::SOAP_ENV__Header*)this->header)->wsa__FaultTo = wsa__FaultTo;
	((Remote::SOAP_ENV__Header*)this->header)->wsa__To = wsa__To;
	((Remote::SOAP_ENV__Header*)this->header)->wsa__Action = wsa__Action;
	((Remote::SOAP_ENV__Header*)this->header)->wsse__Security = wsse__Security;
	((Remote::SOAP_ENV__Header*)this->header)->wsd__AppSequence = wsd__AppSequence;
}

const SOAP_ENV__Header *dpws_discoveryProxy::soap_header()
{	return (const Remote::SOAP_ENV__Header*)this->header;
}

const SOAP_ENV__Fault *dpws_discoveryProxy::soap_fault()
{	return (const Remote::SOAP_ENV__Fault*)this->fault;
}

const char *dpws_discoveryProxy::soap_fault_string()
{	return *soap_faultstring(this);
}

const char *dpws_discoveryProxy::soap_fault_detail()
{	return *soap_faultdetail(this);
}

int dpws_discoveryProxy::soap_close_socket()
{	return soap_closesock(this);
}

void dpws_discoveryProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
void dpws_discoveryProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}

char *dpws_discoveryProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

int dpws_discoveryProxy::send_Hello(struct wsd__HelloType *wsd__Hello)
{
	struct __wsd__Hello soap_tmp___wsd__Hello;
	const char *soap_action = NULL;
	struct soap *soap = this;
	soap_action = "http://schemas.xmlsoap.org/ws/2005/04/discovery/Hello";
	soap->encodingStyle = NULL;
	soap_tmp___wsd__Hello.wsd__Hello = wsd__Hello;
	soap_begin(soap);
	soap_serializeheader(soap);

	soap_serialize___wsd__Hello(soap, &soap_tmp___wsd__Hello);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___wsd__Hello(soap, &soap_tmp___wsd__Hello, "-wsd:Hello", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___wsd__Hello(soap, &soap_tmp___wsd__Hello, "-wsd:Hello", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int dpws_discoveryProxy::recv_Hello(struct __wsd__Hello& tmp)
{
	struct soap *soap = this;
	struct __wsd__Hello *_param_1 = &tmp;
	soap_default___wsd__Hello(soap, _param_1);
	soap_begin(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get___wsd__Hello(soap, _param_1, "-wsd:Hello", NULL);
	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
		soap->error = SOAP_NO_METHOD;
	if (soap->error
	 || soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int dpws_discoveryProxy::send_Bye(struct wsd__ByeType *wsd__Bye)
{	struct soap *soap = this;
	struct __wsd__Bye soap_tmp___wsd__Bye;
	const char *soap_action = NULL;
	soap_action = "http://schemas.xmlsoap.org/ws/2005/04/discovery/Bye";
	soap->encodingStyle = NULL;
	soap_tmp___wsd__Bye.wsd__Bye = wsd__Bye;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___wsd__Bye(soap, &soap_tmp___wsd__Bye);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___wsd__Bye(soap, &soap_tmp___wsd__Bye, "-wsd:Bye", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___wsd__Bye(soap, &soap_tmp___wsd__Bye, "-wsd:Bye", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int dpws_discoveryProxy::recv_Bye(struct __wsd__Bye& tmp)
{
	struct soap *soap = this;
	struct __wsd__Bye *_param_2 = &tmp;
	soap_default___wsd__Bye(soap, _param_2);
	soap_begin(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get___wsd__Bye(soap, _param_2, "-wsd:Bye", NULL);
	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
		soap->error = SOAP_NO_METHOD;
	if (soap->error
	 || soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int dpws_discoveryProxy::send_Probe(struct wsd__ProbeType *wsd__Probe)

{
	struct soap *soap = this;
	struct __wsd__Probe soap_tmp___wsd__Probe;
	const char *soap_action = NULL;
	soap->encodingStyle = NULL;
	soap_tmp___wsd__Probe.wsd__Probe = wsd__Probe;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___wsd__Probe(soap, &soap_tmp___wsd__Probe);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___wsd__Probe(soap, &soap_tmp___wsd__Probe, "-wsd:Probe", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___wsd__Probe(soap, &soap_tmp___wsd__Probe, "-wsd:Probe", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int dpws_discoveryProxy::recv_Probe(struct __wsd__Probe& tmp)
{
	struct soap *soap = this;
	struct __wsd__Probe *_param_3 = &tmp;
	soap_default___wsd__Probe(soap, _param_3);
	soap_begin(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get___wsd__Probe(soap, _param_3, "-wsd:Probe", NULL);
	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
		soap->error = SOAP_NO_METHOD;
	if (soap->error
	 || soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int dpws_discoveryProxy::send_ProbeMatches(struct wsd__ProbeMatchesType *wsd__ProbeMatches)
{	struct soap *soap = this;
	struct __wsd__ProbeMatches soap_tmp___wsd__ProbeMatches;
	const char *soap_action = NULL;
	soap_action = "http://schemas.xmlsoap.org/ws/2005/04/discovery/ProbeMatches";
	soap->encodingStyle = NULL;
	soap_tmp___wsd__ProbeMatches.wsd__ProbeMatches = wsd__ProbeMatches;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___wsd__ProbeMatches(soap, &soap_tmp___wsd__ProbeMatches);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___wsd__ProbeMatches(soap, &soap_tmp___wsd__ProbeMatches, "-wsd:ProbeMatches", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___wsd__ProbeMatches(soap, &soap_tmp___wsd__ProbeMatches, "-wsd:ProbeMatches", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int dpws_discoveryProxy::recv_ProbeMatches(struct __wsd__ProbeMatches& tmp)
{
	struct soap *soap = this;
	struct __wsd__ProbeMatches *_param_4 = &tmp;
	soap_default___wsd__ProbeMatches(soap, _param_4);
	soap_begin(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get___wsd__ProbeMatches(soap, _param_4, "-wsd:ProbeMatches", NULL);
	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
		soap->error = SOAP_NO_METHOD;
	if (soap->error
	 || soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int dpws_discoveryProxy::send_Resolve(struct wsd__ResolveType *wsd__Resolve)
{	struct soap *soap = this;
	struct __wsd__Resolve soap_tmp___wsd__Resolve;
	const char *soap_action = NULL;
	soap_action = "http://schemas.xmlsoap.org/ws/2005/04/discovery/Resolve";
	soap->encodingStyle = NULL;
	soap_tmp___wsd__Resolve.wsd__Resolve = wsd__Resolve;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___wsd__Resolve(soap, &soap_tmp___wsd__Resolve);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___wsd__Resolve(soap, &soap_tmp___wsd__Resolve, "-wsd:Resolve", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___wsd__Resolve(soap, &soap_tmp___wsd__Resolve, "-wsd:Resolve", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int dpws_discoveryProxy::recv_Resolve(struct __wsd__Resolve& tmp)
{
	struct soap *soap = this;
	struct __wsd__Resolve *_param_5 = &tmp;
	soap_default___wsd__Resolve(soap, _param_5);
	soap_begin(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get___wsd__Resolve(soap, _param_5, "-wsd:Resolve", NULL);
	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
		soap->error = SOAP_NO_METHOD;
	if (soap->error
	 || soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int dpws_discoveryProxy::send_ResolveMatches(struct wsd__ResolveMatchesType *wsd__ResolveMatches)
{	struct soap *soap = this;
	struct __wsd__ResolveMatches soap_tmp___wsd__ResolveMatches;
	const char *soap_action = NULL;
	soap_action = "http://schemas.xmlsoap.org/ws/2005/04/discovery/ResolveMatches";
	soap->encodingStyle = NULL;
	soap_tmp___wsd__ResolveMatches.wsd__ResolveMatches = wsd__ResolveMatches;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___wsd__ResolveMatches(soap, &soap_tmp___wsd__ResolveMatches);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___wsd__ResolveMatches(soap, &soap_tmp___wsd__ResolveMatches, "-wsd:ResolveMatches", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___wsd__ResolveMatches(soap, &soap_tmp___wsd__ResolveMatches, "-wsd:ResolveMatches", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int dpws_discoveryProxy::recv_ResolveMatches(struct __wsd__ResolveMatches& tmp)
{
	struct soap *soap = this;
	struct __wsd__ResolveMatches *_param_6 = &tmp;
	soap_default___wsd__ResolveMatches(soap, _param_6);
	soap_begin(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get___wsd__ResolveMatches(soap, _param_6, "-wsd:ResolveMatches", NULL);
	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
		soap->error = SOAP_NO_METHOD;
	if (soap->error
	 || soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

} // namespace Remote

/* End of client proxy code */
