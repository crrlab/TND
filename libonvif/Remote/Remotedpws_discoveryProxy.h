/* Remotedpws_discoveryProxy.h
   Generated by gSOAP 2.8.0 from devprof_databinding.gsoap
   Copyright(C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.
   The generated code is released under one of the following licenses:
   GPL OR Genivia's license for commercial use.
*/

#ifndef Remotedpws_discoveryProxy_H
#define Remotedpws_discoveryProxy_H
#include "RemoteH.h"

namespace Remote {

class SOAP_CMAC dpws_discoveryProxy : public soap
{ public:
	/// Endpoint URL of service 'dpws_discoveryProxy' (change as needed)
	const char *soap_endpoint;
	/// Constructor
	dpws_discoveryProxy();
	/// Constructor with copy of another engine state
	dpws_discoveryProxy(const struct soap&);
	/// Constructor with engine input+output mode control
	dpws_discoveryProxy(soap_mode iomode);
	/// Constructor with engine input and output mode control
	dpws_discoveryProxy(soap_mode imode, soap_mode omode);
	/// Destructor frees deserialized data
	virtual	~dpws_discoveryProxy();
	/// Initializer used by constructors
	virtual	void dpws_discoveryProxy_init(soap_mode imode, soap_mode omode);
	/// Delete all deserialized data (uses soap_destroy and soap_end)
	virtual	void destroy();
	/// Disables and removes SOAP Header from message
	virtual	void soap_noheader();
	/// Put SOAP Header in message
	virtual	void soap_header(char *wsa__MessageID, struct wsa__Relationship *wsa__RelatesTo, struct wsa__EndpointReferenceType *wsa__From, struct wsa__EndpointReferenceType *wsa__ReplyTo, struct wsa__EndpointReferenceType *wsa__FaultTo, char *wsa__To, char *wsa__Action, struct _wsse__Security *wsse__Security, struct wsd__AppSequenceType *wsd__AppSequence);
	/// Get SOAP Header structure (NULL when absent)
	virtual	const SOAP_ENV__Header *soap_header();
	/// Get SOAP Fault structure (NULL when absent)
	virtual	const SOAP_ENV__Fault *soap_fault();
	/// Get SOAP Fault string (NULL when absent)
	virtual	const char *soap_fault_string();
	/// Get SOAP Fault detail as string (NULL when absent)
	virtual	const char *soap_fault_detail();
	/// Force close connection (normally automatic, except for send_X ops)
	virtual	int soap_close_socket();
	/// Print fault
	virtual	void soap_print_fault(FILE*);
#ifndef WITH_LEAN
	/// Print fault to stream
	virtual	void soap_stream_fault(std::ostream&);
	/// Put fault into buffer
	virtual	char *soap_sprint_fault(char *buf, size_t len);
#endif

	/// Web service one-way send operation 'send_Hello' (returns error code or SOAP_OK)
	virtual	int send_Hello(struct wsd__HelloType *wsd__Hello);
	/// Web service one-way receive operation 'recv_Hello' (returns error code or SOAP_OK);
	virtual	int recv_Hello(struct __wsd__Hello&);
	/// Web service receive of HTTP Accept acknowledgment for one-way send operation 'send_Hello' (returns error code or SOAP_OK)
	virtual	int recv_Hello_empty_response() { return soap_recv_empty_response(this); }
	/// Web service one-way synchronous send operation 'Hello' with HTTP Accept/OK response receive (returns error code or SOAP_OK)
	virtual	int Hello(struct wsd__HelloType *wsd__Hello) { if (send_Hello(wsd__Hello) || soap_recv_empty_response(this)) return this->error; return SOAP_OK; }

	/// Web service one-way send operation 'send_Bye' (returns error code or SOAP_OK)
	virtual	int send_Bye(struct wsd__ByeType *wsd__Bye);
	/// Web service one-way receive operation 'recv_Bye' (returns error code or SOAP_OK);
	virtual	int recv_Bye(struct __wsd__Bye&);
	/// Web service receive of HTTP Accept acknowledgment for one-way send operation 'send_Bye' (returns error code or SOAP_OK)
	virtual	int recv_Bye_empty_response() { return soap_recv_empty_response(this); }
	/// Web service one-way synchronous send operation 'Bye' with HTTP Accept/OK response receive (returns error code or SOAP_OK)
	virtual	int Bye(struct wsd__ByeType *wsd__Bye) { if (send_Bye(wsd__Bye) || soap_recv_empty_response(this)) return this->error; return SOAP_OK; }

	/// Web service one-way send operation 'send_Probe' (returns error code or SOAP_OK)
	virtual	int send_Probe(struct wsd__ProbeType *wsd__Probe);
	/// Web service one-way receive operation 'recv_Probe' (returns error code or SOAP_OK);
	virtual	int recv_Probe(struct __wsd__Probe&);
	/// Web service receive of HTTP Accept acknowledgment for one-way send operation 'send_Probe' (returns error code or SOAP_OK)
	virtual	int recv_Probe_empty_response() { return soap_recv_empty_response(this); }
	/// Web service one-way synchronous send operation 'Probe' with HTTP Accept/OK response receive (returns error code or SOAP_OK)
	virtual	int Probe(struct wsd__ProbeType *wsd__Probe) { if (send_Probe(wsd__Probe) || soap_recv_empty_response(this)) return this->error; return SOAP_OK; }

	/// Web service one-way send operation 'send_ProbeMatches' (returns error code or SOAP_OK)
	virtual	int send_ProbeMatches(struct wsd__ProbeMatchesType *wsd__ProbeMatches);
	/// Web service one-way receive operation 'recv_ProbeMatches' (returns error code or SOAP_OK);
	virtual	int recv_ProbeMatches(struct __wsd__ProbeMatches&);
	/// Web service receive of HTTP Accept acknowledgment for one-way send operation 'send_ProbeMatches' (returns error code or SOAP_OK)
	virtual	int recv_ProbeMatches_empty_response() { return soap_recv_empty_response(this); }
	/// Web service one-way synchronous send operation 'ProbeMatches' with HTTP Accept/OK response receive (returns error code or SOAP_OK)
	virtual	int ProbeMatches(struct wsd__ProbeMatchesType *wsd__ProbeMatches) { if (send_ProbeMatches(wsd__ProbeMatches) || soap_recv_empty_response(this)) return this->error; return SOAP_OK; }

	/// Web service one-way send operation 'send_Resolve' (returns error code or SOAP_OK)
	virtual	int send_Resolve(struct wsd__ResolveType *wsd__Resolve);
	/// Web service one-way receive operation 'recv_Resolve' (returns error code or SOAP_OK);
	virtual	int recv_Resolve(struct __wsd__Resolve&);
	/// Web service receive of HTTP Accept acknowledgment for one-way send operation 'send_Resolve' (returns error code or SOAP_OK)
	virtual	int recv_Resolve_empty_response() { return soap_recv_empty_response(this); }
	/// Web service one-way synchronous send operation 'Resolve' with HTTP Accept/OK response receive (returns error code or SOAP_OK)
	virtual	int Resolve(struct wsd__ResolveType *wsd__Resolve) { if (send_Resolve(wsd__Resolve) || soap_recv_empty_response(this)) return this->error; return SOAP_OK; }

	/// Web service one-way send operation 'send_ResolveMatches' (returns error code or SOAP_OK)
	virtual	int send_ResolveMatches(struct wsd__ResolveMatchesType *wsd__ResolveMatches);
	/// Web service one-way receive operation 'recv_ResolveMatches' (returns error code or SOAP_OK);
	virtual	int recv_ResolveMatches(struct __wsd__ResolveMatches&);
	/// Web service receive of HTTP Accept acknowledgment for one-way send operation 'send_ResolveMatches' (returns error code or SOAP_OK)
	virtual	int recv_ResolveMatches_empty_response() { return soap_recv_empty_response(this); }
	/// Web service one-way synchronous send operation 'ResolveMatches' with HTTP Accept/OK response receive (returns error code or SOAP_OK)
	virtual	int ResolveMatches(struct wsd__ResolveMatchesType *wsd__ResolveMatches) { if (send_ResolveMatches(wsd__ResolveMatches) || soap_recv_empty_response(this)) return this->error; return SOAP_OK; }
};

} // namespace Remote

#endif
