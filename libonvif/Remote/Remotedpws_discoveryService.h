/* Remotedpws_discoveryService.h
   Generated by gSOAP 2.8.0 from devprof_databinding.gsoap
   Copyright(C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.
   The generated code is released under one of the following licenses:
   GPL OR Genivia's license for commercial use.
*/

#ifndef Remotedpws_discoveryService_H
#define Remotedpws_discoveryService_H
#include "RemoteH.h"

namespace Remote {
class SOAP_CMAC dpws_discoveryService : public soap
{ public:
	/// Constructor
	dpws_discoveryService();
	/// Constructor with copy of another engine state
	dpws_discoveryService(const struct soap&);
	/// Constructor with engine input+output mode control
	dpws_discoveryService(soap_mode iomode);
	/// Constructor with engine input and output mode control
	dpws_discoveryService(soap_mode imode, soap_mode omode);
	/// Destructor, also frees all deserialized data
	virtual ~dpws_discoveryService();
	/// Delete all deserialized data (uses soap_destroy and soap_end)
	virtual	void destroy();
	/// Initializer used by constructor
	virtual	void dpws_discoveryService_init(soap_mode imode, soap_mode omode);
	/// Create a copy
	virtual	dpws_discoveryService *copy();
	/// Force close connection (normally automatic)
	virtual	int soap_close_socket();
	/// Return sender-related fault to sender
	virtual	int soap_senderfault(const char *string, const char *detailXML);
	/// Return sender-related fault with SOAP 1.2 subcode to sender
	virtual	int soap_senderfault(const char *subcodeQName, const char *string, const char *detailXML);
	/// Return receiver-related fault to sender
	virtual	int soap_receiverfault(const char *string, const char *detailXML);
	/// Return receiver-related fault with SOAP 1.2 subcode to sender
	virtual	int soap_receiverfault(const char *subcodeQName, const char *string, const char *detailXML);
	/// Print fault
	virtual	void soap_print_fault(FILE*);
#ifndef WITH_LEAN
	/// Print fault to stream
	virtual	void soap_stream_fault(std::ostream&);
	/// Put fault into buffer
	virtual	char *soap_sprint_fault(char *buf, size_t len);
#endif
	/// Disables and removes SOAP Header from message
	virtual	void soap_noheader();
	/// Put SOAP Header in message
	virtual	void soap_header(char *wsa__MessageID, struct wsa__Relationship *wsa__RelatesTo, struct wsa__EndpointReferenceType *wsa__From, struct wsa__EndpointReferenceType *wsa__ReplyTo, struct wsa__EndpointReferenceType *wsa__FaultTo, char *wsa__To, char *wsa__Action, struct _wsse__Security *wsse__Security, struct wsd__AppSequenceType *wsd__AppSequence);
	/// Get SOAP Header structure (NULL when absent)
	virtual	const SOAP_ENV__Header *soap_header();
	/// Run simple single-thread iterative service on port until a connection error occurs (returns error code or SOAP_OK), use this->bind_flag = SO_REUSEADDR to rebind for a rerun
	virtual	int run(int port);
	/// Bind service to port (returns master socket or SOAP_INVALID_SOCKET)
	virtual	SOAP_SOCKET bind(const char *host, int port, int backlog);
	/// Accept next request (returns socket or SOAP_INVALID_SOCKET)
	virtual	SOAP_SOCKET accept();
	/// Serve this request (returns error code or SOAP_OK)
	virtual	int serve();
	/// Used by serve() to dispatch a request (returns error code or SOAP_OK)
	virtual	int dispatch();

	///
	/// Service operations (you should define these):
	///

	/// Web service one-way operation 'Hello' (return error code, SOAP_OK (no response), or send_Hello_empty_response())
	virtual	int Hello(struct wsd__HelloType *wsd__Hello);
	virtual	int send_Hello_empty_response(int httpcode) { return soap_send_empty_response(this, httpcode); }

	/// Web service one-way operation 'Bye' (return error code, SOAP_OK (no response), or send_Bye_empty_response())
	virtual	int Bye(struct wsd__ByeType *wsd__Bye);
	virtual	int send_Bye_empty_response(int httpcode) { return soap_send_empty_response(this, httpcode); }

	/// Web service one-way operation 'Probe' (return error code, SOAP_OK (no response), or send_Probe_empty_response())
	virtual	int Probe(struct wsd__ProbeType *wsd__Probe);
	virtual	int send_Probe_empty_response(int httpcode) { return soap_send_empty_response(this, httpcode); }

	/// Web service one-way operation 'ProbeMatches' (return error code, SOAP_OK (no response), or send_ProbeMatches_empty_response())
	virtual	int ProbeMatches(struct wsd__ProbeMatchesType *wsd__ProbeMatches);
	virtual	int send_ProbeMatches_empty_response(int httpcode) { return soap_send_empty_response(this, httpcode); }

	/// Web service one-way operation 'Resolve' (return error code, SOAP_OK (no response), or send_Resolve_empty_response())
	virtual	int Resolve(struct wsd__ResolveType *wsd__Resolve);
	virtual	int send_Resolve_empty_response(int httpcode) { return soap_send_empty_response(this, httpcode); }

	/// Web service one-way operation 'ResolveMatches' (return error code, SOAP_OK (no response), or send_ResolveMatches_empty_response())
	virtual	int ResolveMatches(struct wsd__ResolveMatchesType *wsd__ResolveMatches);
	virtual	int send_ResolveMatches_empty_response(int httpcode) { return soap_send_empty_response(this, httpcode); }
};

} // namespace Remote

#endif
