/* Remotedpws_discoveryService.cpp
   Generated by gSOAP 2.8.0 from devprof_databinding.gsoap
   Copyright(C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.
   The generated code is released under one of the following licenses:
   GPL OR Genivia's license for commercial use.
*/

#include "Remotedpws_discoveryService.h"

namespace Remote {

dpws_discoveryService::dpws_discoveryService()
{	dpws_discoveryService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

dpws_discoveryService::dpws_discoveryService(const struct soap &_soap) :soap(_soap)
{ }

dpws_discoveryService::dpws_discoveryService(soap_mode iomode)
{	dpws_discoveryService_init(iomode, iomode);
}

dpws_discoveryService::dpws_discoveryService(soap_mode imode, soap_mode omode)
{	dpws_discoveryService_init(imode, omode);
}

dpws_discoveryService::~dpws_discoveryService()
{ }

void dpws_discoveryService::dpws_discoveryService_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"wsa", "http://schemas.xmlsoap.org/ws/2004/08/addressing", NULL, NULL},
	{"c14n", "http://www.w3.org/2001/10/xml-exc-c14n#", NULL, NULL},
	{"wsu", "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd", NULL, NULL},
	{"ds", "http://www.w3.org/2000/09/xmldsig#", NULL, NULL},
	{"wsse", "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd", NULL, NULL},
	{"wsd", "http://schemas.xmlsoap.org/ws/2005/04/discovery", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	this->namespaces = namespaces;
};

void dpws_discoveryService::destroy()
{	soap_destroy(this);
	soap_end(this);
}

dpws_discoveryService *dpws_discoveryService::copy()
{	dpws_discoveryService *dup = SOAP_NEW_COPY(dpws_discoveryService(*(struct soap*)this));
	return dup;
}

int dpws_discoveryService::soap_close_socket()
{	return soap_closesock(this);
}

int dpws_discoveryService::soap_senderfault(const char *string, const char *detailXML)
{	return ::soap_sender_fault(this, string, detailXML);
}

int dpws_discoveryService::soap_senderfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_sender_fault_subcode(this, subcodeQName, string, detailXML);
}

int dpws_discoveryService::soap_receiverfault(const char *string, const char *detailXML)
{	return ::soap_receiver_fault(this, string, detailXML);
}

int dpws_discoveryService::soap_receiverfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_receiver_fault_subcode(this, subcodeQName, string, detailXML);
}

void dpws_discoveryService::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
void dpws_discoveryService::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}

char *dpws_discoveryService::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

void dpws_discoveryService::soap_noheader()
{	header = NULL;
}

void dpws_discoveryService::soap_header(char *wsa__MessageID, struct wsa__Relationship *wsa__RelatesTo, struct wsa__EndpointReferenceType *wsa__From, struct wsa__EndpointReferenceType *wsa__ReplyTo, struct wsa__EndpointReferenceType *wsa__FaultTo, char *wsa__To, char *wsa__Action, struct _wsse__Security *wsse__Security, struct wsd__AppSequenceType *wsd__AppSequence)
{	::soap_header(this);
	((Remote::SOAP_ENV__Header*)this->header)->wsa__MessageID = wsa__MessageID;
	((Remote::SOAP_ENV__Header*)this->header)->wsa__RelatesTo = wsa__RelatesTo;
	((Remote::SOAP_ENV__Header*)this->header)->wsa__From = wsa__From;
	((Remote::SOAP_ENV__Header*)this->header)->wsa__ReplyTo = wsa__ReplyTo;
	((Remote::SOAP_ENV__Header*)this->header)->wsa__FaultTo = wsa__FaultTo;
	((Remote::SOAP_ENV__Header*)this->header)->wsa__To = wsa__To;
	((Remote::SOAP_ENV__Header*)this->header)->wsa__Action = wsa__Action;
	((Remote::SOAP_ENV__Header*)this->header)->wsse__Security = wsse__Security;
	((Remote::SOAP_ENV__Header*)this->header)->wsd__AppSequence = wsd__AppSequence;
}

const SOAP_ENV__Header *dpws_discoveryService::soap_header()
{	return (const Remote::SOAP_ENV__Header*)this->header;
}

int dpws_discoveryService::run(int port)
{	if (soap_valid_socket(bind(NULL, port, 100)))
	{	for (;;)
		{	if (!soap_valid_socket(accept()))
				return this->error;
			(void)serve();
			soap_destroy(this);
			soap_end(this);
		}
	}
	else
		return this->error;
	return SOAP_OK;
}

SOAP_SOCKET dpws_discoveryService::bind(const char *host, int port, int backlog)
{	return soap_bind(this, host, port, backlog);
}

SOAP_SOCKET dpws_discoveryService::accept()
{	return soap_accept(this);
}

int dpws_discoveryService::serve()
{
#ifndef WITH_FASTCGI
	unsigned int k = this->max_keep_alive;
#endif
	do
	{	soap_begin(this);
#ifdef WITH_FASTCGI
		if (FCGI_Accept() < 0)
		{
			this->error = SOAP_EOF;
			return soap_send_fault(this);
		}
#endif

		soap_begin(this);

#ifndef WITH_FASTCGI
		if (this->max_keep_alive > 0 && !--k)
			this->keep_alive = 0;
#endif

		if (soap_begin_recv(this))
		{	if (this->error < SOAP_STOP)
			{
#ifdef WITH_FASTCGI
				soap_send_fault(this);
#else 
				return soap_send_fault(this);
#endif
			}
			soap_closesock(this);

			continue;
		}

		if (soap_envelope_begin_in(this)
		 || soap_recv_header(this)
		 || soap_body_begin_in(this)
		 || dispatch() || (this->fserveloop && this->fserveloop(this)))
		{
#ifdef WITH_FASTCGI
			soap_send_fault(this);
#else
			return soap_send_fault(this);
#endif
		}

#ifdef WITH_FASTCGI
		soap_destroy(this);
		soap_end(this);
	} while (1);
#else
	} while (this->keep_alive);
#endif
	return SOAP_OK;
}

static int serve___wsd__Hello(dpws_discoveryService*);
static int serve___wsd__Bye(dpws_discoveryService*);
static int serve___wsd__Probe(dpws_discoveryService*);
static int serve___wsd__ProbeMatches(dpws_discoveryService*);
static int serve___wsd__Resolve(dpws_discoveryService*);
static int serve___wsd__ResolveMatches(dpws_discoveryService*);

int dpws_discoveryService::dispatch()
{	soap_peek_element(this);
	if (!soap_match_tag(this, this->tag, "wsd:Hello"))
		return serve___wsd__Hello(this);
	if (!soap_match_tag(this, this->tag, "wsd:Bye"))
		return serve___wsd__Bye(this);
	if (!soap_match_tag(this, this->tag, "wsd:Probe"))
		return serve___wsd__Probe(this);
	if (!soap_match_tag(this, this->tag, "wsd:ProbeMatches"))
		return serve___wsd__ProbeMatches(this);
	if (!soap_match_tag(this, this->tag, "wsd:Resolve"))
		return serve___wsd__Resolve(this);
	if (!soap_match_tag(this, this->tag, "wsd:ResolveMatches"))
		return serve___wsd__ResolveMatches(this);
	return this->error = SOAP_NO_METHOD;
}

static int serve___wsd__Hello(dpws_discoveryService *soap)
{	struct __wsd__Hello soap_tmp___wsd__Hello;
	soap_default___wsd__Hello(soap, &soap_tmp___wsd__Hello);
	soap->encodingStyle = NULL;
	if (!soap_get___wsd__Hello(soap, &soap_tmp___wsd__Hello, "-wsd:Hello", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->Hello(soap_tmp___wsd__Hello.wsd__Hello);
	if (soap->error)
		return soap->error;
	return soap_closesock(soap);
}

static int serve___wsd__Bye(dpws_discoveryService *soap)
{	struct __wsd__Bye soap_tmp___wsd__Bye;
	soap_default___wsd__Bye(soap, &soap_tmp___wsd__Bye);
	soap->encodingStyle = NULL;
	if (!soap_get___wsd__Bye(soap, &soap_tmp___wsd__Bye, "-wsd:Bye", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->Bye(soap_tmp___wsd__Bye.wsd__Bye);
	if (soap->error)
		return soap->error;
	return soap_closesock(soap);
}

static int serve___wsd__Probe(dpws_discoveryService *soap)
{	struct __wsd__Probe soap_tmp___wsd__Probe;
	soap_default___wsd__Probe(soap, &soap_tmp___wsd__Probe);
	soap->encodingStyle = NULL;
	if (!soap_get___wsd__Probe(soap, &soap_tmp___wsd__Probe, "-wsd:Probe", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->Probe(soap_tmp___wsd__Probe.wsd__Probe);
	if (soap->error)
		return soap->error;
	return soap_closesock(soap);
}

static int serve___wsd__ProbeMatches(dpws_discoveryService *soap)
{	struct __wsd__ProbeMatches soap_tmp___wsd__ProbeMatches;
	soap_default___wsd__ProbeMatches(soap, &soap_tmp___wsd__ProbeMatches);
	soap->encodingStyle = NULL;
	if (!soap_get___wsd__ProbeMatches(soap, &soap_tmp___wsd__ProbeMatches, "-wsd:ProbeMatches", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->ProbeMatches(soap_tmp___wsd__ProbeMatches.wsd__ProbeMatches);
	if (soap->error)
		return soap->error;
	return soap_closesock(soap);
}

static int serve___wsd__Resolve(dpws_discoveryService *soap)
{	struct __wsd__Resolve soap_tmp___wsd__Resolve;
	soap_default___wsd__Resolve(soap, &soap_tmp___wsd__Resolve);
	soap->encodingStyle = NULL;
	if (!soap_get___wsd__Resolve(soap, &soap_tmp___wsd__Resolve, "-wsd:Resolve", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->Resolve(soap_tmp___wsd__Resolve.wsd__Resolve);
	if (soap->error)
		return soap->error;
	return soap_closesock(soap);
}

static int serve___wsd__ResolveMatches(dpws_discoveryService *soap)
{	struct __wsd__ResolveMatches soap_tmp___wsd__ResolveMatches;
	soap_default___wsd__ResolveMatches(soap, &soap_tmp___wsd__ResolveMatches);
	soap->encodingStyle = NULL;
	if (!soap_get___wsd__ResolveMatches(soap, &soap_tmp___wsd__ResolveMatches, "-wsd:ResolveMatches", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->ResolveMatches(soap_tmp___wsd__ResolveMatches.wsd__ResolveMatches);
	if (soap->error)
		return soap->error;
	return soap_closesock(soap);
}

} // namespace Remote

/* End of server object code */
